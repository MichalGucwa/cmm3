# LIBTBX_SET_DISPATCHER_NAME phenix.find_alt_orig_sym_mate
from phaser import AlterOriginSymmate
from phaser import cli
from libtbx.phil import parse
from libtbx import runtime_utils
import sys
import os

master_params="""
AltOrigSymMates
{
    moving_pdb = None
      .help = "path to a PDB file from an MR solution"
      .type = path
      .short_caption = Moving PDB file
      .style = bold file_type:pdb input_file

    moving
      .help = "Specify either mrsolution or pickle_solution."
    {
        mrsolution
          .help = "MR solution produced by command-line version of Phaser"
          .style = noauto
        {
            solfname = None
              .help = "path to the solution file, i.e. the .sol file"
              .type = path
            ensembles
              .help = "Ensembles constituent in this MR solution."
                      "Typically these are chains in the PDB file."
              .multiple = True
            {
                name = None
                  .help = "ID for ensemble in the MR solution, i.e. the name after"
                          "the &quot;SOLU 6DIM ENSE&quot; string in the .sol file."
                  .type = str
                xyzfname = None
                  .help = "Path to the PDB file with atoms representing this ensemble."
                          "This is the search model used by Phaser for this ensemble"
                          "prior to solving the structure. It is not the solved structure."
                  .multiple = True
                  .type = path
            }
        }

        pickle_solution
          .help = "Phaser MR solution from PHENIX GUI"
          .style = noauto
        {
            pklfname = None
              .help = "PHENIX GUI solution file from Phaser-MR, i.e. the .pkl file"
              .type = path
            philfname = None
              .help = "PHENIX GUI configuration file used as input prior to Phaser-MR, i.e. the .eff file"
              .type = path
        }
    }

    fixed_pdb = None
      .help = "path to a PDB file from an MR solution"
      .type = path
      .short_caption = Fixed PDB file
      .style = bold file_type:pdb input_file

    fixed
      .help = "Specify either mrsolution or pickle_solution."
    {
        mrsolution
          .help = "MR solution produced by command-line version of Phaser"
          .style = noauto
        {
            solfname = None
              .help = "path to the solution file, i.e. the .sol file"
              .type = path
            ensembles
              .help = "Ensembles constituent in this MR solution."
                      "Typically these are chains in the PDB file."
              .multiple = True
              .style = noauto
            {
                name = None
                  .help = "ID for ensemble in the MR solution, i.e. the name after"
                          "the &quot;SOLU 6DIM ENSE&quot; string in the .sol file."
                  .type = str
                xyzfname = None
                  .help = "Path to the PDB file with atoms representing this ensemble."
                          "This is the search model used by Phaser for this ensemble"
                          "prior to solving the structure. It is not the solved structure."
                  .multiple = True
                  .type = path
            }
        }

        pickle_solution
          .help = "Phaser MR solution from PHENIX GUI"
          .style = noauto
        {
            pklfname = None
              .help = "PHENIX GUI solution file from Phaser-MR, i.e. the .pkl file"
              .type = path
            philfname = None
              .help = "PHENIX GUI configuration file used as input prior to Phaser-MR, i.e. the .eff file"
              .type = path
        }
    }

    spacegroupfname = None
      .help = "A PDB file with a CRYST1 record or an MTZ file providing"
              "the space group and cell dimension for this computation."
      .type = path
      .short_caption = Symmetry file
      .style = file_type:pdb,mtz input_file
    chosenorigin = "Any"
      .help = "By default all allowed origin shifts are probed. Specifying"
              "&quot;2/3, 1/3, 1/2&quot; tells the program to only explore symmetry operations"
              "for the unit cells displaced at fractional positions (2/3, 1/3, 1/2)"
      .short_caption = Only use origin
      .type = str
    use_all_SSM = False
      .help = "By default only the best sequence alignment from SSM is used."
              "Setting this value to True will include other suboptimal alignments for testing."
      .type = bool
      .short_caption = Use all SSM alignments
    no_symmetry_operations = False
      .help = "When set to False all symmetry operations are probed during the computation."
      .short_caption = Don't loop over symmetry operators
      .type = bool
    movehetatms = False
      .help = "Move hetatoms close to a chain in conjunction with that chain."
              "Hetatoms are first associated with individual chains with phenix.sort_hetatms"
              "before undergoing the same spatial transformation as the chains."
      .short_caption = Also move HETATM
      .type = bool
    debug = False
      .type = bool
    verbose = False
      .type = bool
    gui_output_dir = None
      .type = path
      .short_caption = Output directory
      .help = For PHENIX GUI only.
      .style = directory output_dir
    include scope libtbx.phil.interface.tracking_params
}
"""

master_phil = parse(master_params, process_includes=True)

parser = cli.PCLIParser(
    master_phil = master_phil,
    description = "Identify equivalent MR solutions of the same dataset irrespective of origin and symmetry operation",
    usage = "%(prog)s [options] phils"
    )

def run (args) :
  return AlterOriginSymmate.RunFromCommandline(parser, args=args)

class launcher (runtime_utils.target_with_save_result) :
  def run (self) :
    os.makedirs(self.output_dir)
    os.chdir(self.output_dir)
    return run(self.args)

def finish_job (result) :
  output_files = []
  if (result is not None) :
    for file_name in result :
      output_files.append((file_name, "Transformed model"))
  return output_files, ()

def validate_params (params) :
  return True

if __name__ == "__main__":
  ret = run(sys.argv[1:])
