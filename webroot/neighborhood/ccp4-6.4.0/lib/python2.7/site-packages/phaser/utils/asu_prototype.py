from cctbx.sgtbx.direct_space_asu import reference_table
from scitbx.python_utils.misc import store
from cctbx import sgtbx

def where(facet, point):
  result = facet.c
  for i in xrange(3):
    result += facet.n[i] * point[i]
  return result

def fuzzy_is_inside(facet, point, epsilon=1.e-6):
  if (abs(where(facet, point)) < epsilon):
    return True
  return False

def first_molecule_search_symmetry(space_group_info):
  # get the allowed origin shifts
  ss = space_group_info.structure_seminvariant()
  # assert that the continous shifts are along principal directions
  # multiply the discrete origin shifts into the group
  continuous_shifts = []
  expanded_group = sgtbx.space_group(space_group_info.type().hall_symbol())
  for vm in ss.vectors_and_moduli():
    print "ss vector:", vm.v
    print "ss modulus:", vm.m
    if (vm.m == 0):
      # collect continous allowed origin shifts
      continuous_shifts.append(vm.v)
    else:
      # add discrete allowed origin shifts
      expanded_group.expand_ltr(
        sgtbx.tr_vec(vm.v, vm.m).new_denominator(expanded_group.t_den()))
  # return the expanded group along with the continuous shifts
  return sgtbx.space_group_info(group=expanded_group), continuous_shifts

def continuous_shifts_are_principal(continuous_shifts):
  for pa in continuous_shifts:
    if (not pa in ((1,0,0),(0,1,0),(0,0,1))): return 00000
  return 0001

def is_inside_prototype():
  asu = reference_table.get_asu(143)
  for facet in asu.facets:
    print facet.n, facet.c
    print where(facet, (0,0,0))
    print where(facet, (-3,0,0))

def run():
  for sg_number in xrange(1,231):
    space_group_info = sgtbx.space_group_info(symbol=sg_number)
    expanded_group, continuous_shifts = first_molecule_search_symmetry(
      space_group_info)
    print space_group_info
    print expanded_group
    print continuous_shifts
    assert continuous_shifts_are_principal(continuous_shifts)
    expanded_group_type = expanded_group.type()
    print expanded_group_type.number()
    #assert space_group_info.type().number() == expanded_group_type.number()
    reference_asu = reference_table.get_asu(expanded_group_type.number())
    reference_asu.show_comprehensive_summary()
    print expanded_group_type.cb_op().inverse().c()
    asu = reference_asu.change_basis(expanded_group_type.cb_op().inverse())
    asu.show_comprehensive_summary()
    print

if (__name__ == "__main__"):
  run()
