# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_coot', [dirname(__file__)])
        except ImportError:
            import _coot
            return _coot
        if fp is not None:
            try:
                _mod = imp.load_module('_coot', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _coot = swig_import_helper()
    del swig_import_helper
else:
    import _coot
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coot.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _coot.SwigPyIterator_value(self)
    def incr(self, n = 1): return _coot.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _coot.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _coot.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _coot.SwigPyIterator_equal(self, *args)
    def copy(self): return _coot.SwigPyIterator_copy(self)
    def next(self): return _coot.SwigPyIterator_next(self)
    def __next__(self): return _coot.SwigPyIterator___next__(self)
    def previous(self): return _coot.SwigPyIterator_previous(self)
    def advance(self, *args): return _coot.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _coot.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _coot.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _coot.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _coot.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _coot.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _coot.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _coot.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vector_string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_string, name)
    __repr__ = _swig_repr
    def iterator(self): return _coot.vector_string_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _coot.vector_string___nonzero__(self)
    def __bool__(self): return _coot.vector_string___bool__(self)
    def __len__(self): return _coot.vector_string___len__(self)
    def pop(self): return _coot.vector_string_pop(self)
    def __getslice__(self, *args): return _coot.vector_string___getslice__(self, *args)
    def __setslice__(self, *args): return _coot.vector_string___setslice__(self, *args)
    def __delslice__(self, *args): return _coot.vector_string___delslice__(self, *args)
    def __delitem__(self, *args): return _coot.vector_string___delitem__(self, *args)
    def __getitem__(self, *args): return _coot.vector_string___getitem__(self, *args)
    def __setitem__(self, *args): return _coot.vector_string___setitem__(self, *args)
    def append(self, *args): return _coot.vector_string_append(self, *args)
    def empty(self): return _coot.vector_string_empty(self)
    def size(self): return _coot.vector_string_size(self)
    def clear(self): return _coot.vector_string_clear(self)
    def swap(self, *args): return _coot.vector_string_swap(self, *args)
    def get_allocator(self): return _coot.vector_string_get_allocator(self)
    def begin(self): return _coot.vector_string_begin(self)
    def end(self): return _coot.vector_string_end(self)
    def rbegin(self): return _coot.vector_string_rbegin(self)
    def rend(self): return _coot.vector_string_rend(self)
    def pop_back(self): return _coot.vector_string_pop_back(self)
    def erase(self, *args): return _coot.vector_string_erase(self, *args)
    def __init__(self, *args): 
        this = _coot.new_vector_string(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _coot.vector_string_push_back(self, *args)
    def front(self): return _coot.vector_string_front(self)
    def back(self): return _coot.vector_string_back(self)
    def assign(self, *args): return _coot.vector_string_assign(self, *args)
    def resize(self, *args): return _coot.vector_string_resize(self, *args)
    def insert(self, *args): return _coot.vector_string_insert(self, *args)
    def reserve(self, *args): return _coot.vector_string_reserve(self, *args)
    def capacity(self): return _coot.vector_string_capacity(self)
    __swig_destroy__ = _coot.delete_vector_string
    __del__ = lambda self : None;
vector_string_swigregister = _coot.vector_string_swigregister
vector_string_swigregister(vector_string)

class vector_atom_spec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_atom_spec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_atom_spec, name)
    __repr__ = _swig_repr
    def iterator(self): return _coot.vector_atom_spec_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _coot.vector_atom_spec___nonzero__(self)
    def __bool__(self): return _coot.vector_atom_spec___bool__(self)
    def __len__(self): return _coot.vector_atom_spec___len__(self)
    def pop(self): return _coot.vector_atom_spec_pop(self)
    def __getslice__(self, *args): return _coot.vector_atom_spec___getslice__(self, *args)
    def __setslice__(self, *args): return _coot.vector_atom_spec___setslice__(self, *args)
    def __delslice__(self, *args): return _coot.vector_atom_spec___delslice__(self, *args)
    def __delitem__(self, *args): return _coot.vector_atom_spec___delitem__(self, *args)
    def __getitem__(self, *args): return _coot.vector_atom_spec___getitem__(self, *args)
    def __setitem__(self, *args): return _coot.vector_atom_spec___setitem__(self, *args)
    def append(self, *args): return _coot.vector_atom_spec_append(self, *args)
    def empty(self): return _coot.vector_atom_spec_empty(self)
    def size(self): return _coot.vector_atom_spec_size(self)
    def clear(self): return _coot.vector_atom_spec_clear(self)
    def swap(self, *args): return _coot.vector_atom_spec_swap(self, *args)
    def get_allocator(self): return _coot.vector_atom_spec_get_allocator(self)
    def begin(self): return _coot.vector_atom_spec_begin(self)
    def end(self): return _coot.vector_atom_spec_end(self)
    def rbegin(self): return _coot.vector_atom_spec_rbegin(self)
    def rend(self): return _coot.vector_atom_spec_rend(self)
    def pop_back(self): return _coot.vector_atom_spec_pop_back(self)
    def erase(self, *args): return _coot.vector_atom_spec_erase(self, *args)
    def __init__(self, *args): 
        this = _coot.new_vector_atom_spec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _coot.vector_atom_spec_push_back(self, *args)
    def front(self): return _coot.vector_atom_spec_front(self)
    def back(self): return _coot.vector_atom_spec_back(self)
    def assign(self, *args): return _coot.vector_atom_spec_assign(self, *args)
    def resize(self, *args): return _coot.vector_atom_spec_resize(self, *args)
    def insert(self, *args): return _coot.vector_atom_spec_insert(self, *args)
    def reserve(self, *args): return _coot.vector_atom_spec_reserve(self, *args)
    def capacity(self): return _coot.vector_atom_spec_capacity(self)
    __swig_destroy__ = _coot.delete_vector_atom_spec
    __del__ = lambda self : None;
vector_atom_spec_swigregister = _coot.vector_atom_spec_swigregister
vector_atom_spec_swigregister(vector_atom_spec)

class pairbf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pairbf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pairbf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coot.new_pairbf(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _coot.pairbf_first_set
    __swig_getmethods__["first"] = _coot.pairbf_first_get
    if _newclass:first = _swig_property(_coot.pairbf_first_get, _coot.pairbf_first_set)
    __swig_setmethods__["second"] = _coot.pairbf_second_set
    __swig_getmethods__["second"] = _coot.pairbf_second_get
    if _newclass:second = _swig_property(_coot.pairbf_second_get, _coot.pairbf_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _coot.delete_pairbf
    __del__ = lambda self : None;
pairbf_swigregister = _coot.pairbf_swigregister
pairbf_swigregister(pairbf)

COOT_SCHEME_DIR = _coot.COOT_SCHEME_DIR

def try_load_python_extras_dir():
  return _coot.try_load_python_extras_dir()
try_load_python_extras_dir = _coot.try_load_python_extras_dir

def set_prefer_python():
  return _coot.set_prefer_python()
set_prefer_python = _coot.set_prefer_python

def prefer_python():
  return _coot.prefer_python()
prefer_python = _coot.prefer_python

def make_directory_maybe(*args):
  return _coot.make_directory_maybe(*args)
make_directory_maybe = _coot.make_directory_maybe

def set_show_paths_in_display_manager(*args):
  return _coot.set_show_paths_in_display_manager(*args)
set_show_paths_in_display_manager = _coot.set_show_paths_in_display_manager

def show_paths_in_display_manager_state():
  return _coot.show_paths_in_display_manager_state()
show_paths_in_display_manager_state = _coot.show_paths_in_display_manager_state

def add_coordinates_glob_extension(*args):
  return _coot.add_coordinates_glob_extension(*args)
add_coordinates_glob_extension = _coot.add_coordinates_glob_extension

def add_data_glob_extension(*args):
  return _coot.add_data_glob_extension(*args)
add_data_glob_extension = _coot.add_data_glob_extension

def add_dictionary_glob_extension(*args):
  return _coot.add_dictionary_glob_extension(*args)
add_dictionary_glob_extension = _coot.add_dictionary_glob_extension

def add_map_glob_extension(*args):
  return _coot.add_map_glob_extension(*args)
add_map_glob_extension = _coot.add_map_glob_extension

def remove_coordinates_glob_extension(*args):
  return _coot.remove_coordinates_glob_extension(*args)
remove_coordinates_glob_extension = _coot.remove_coordinates_glob_extension

def remove_data_glob_extension(*args):
  return _coot.remove_data_glob_extension(*args)
remove_data_glob_extension = _coot.remove_data_glob_extension

def remove_dictionary_glob_extension(*args):
  return _coot.remove_dictionary_glob_extension(*args)
remove_dictionary_glob_extension = _coot.remove_dictionary_glob_extension

def remove_map_glob_extension(*args):
  return _coot.remove_map_glob_extension(*args)
remove_map_glob_extension = _coot.remove_map_glob_extension

def set_sticky_sort_by_date():
  return _coot.set_sticky_sort_by_date()
set_sticky_sort_by_date = _coot.set_sticky_sort_by_date

def unset_sticky_sort_by_date():
  return _coot.unset_sticky_sort_by_date()
unset_sticky_sort_by_date = _coot.unset_sticky_sort_by_date

def set_filter_fileselection_filenames(*args):
  return _coot.set_filter_fileselection_filenames(*args)
set_filter_fileselection_filenames = _coot.set_filter_fileselection_filenames

def set_file_selection_dialog_size(*args):
  return _coot.set_file_selection_dialog_size(*args)
set_file_selection_dialog_size = _coot.set_file_selection_dialog_size

def filter_fileselection_filenames_state():
  return _coot.filter_fileselection_filenames_state()
filter_fileselection_filenames_state = _coot.filter_fileselection_filenames_state

def file_type_coords(*args):
  return _coot.file_type_coords(*args)
file_type_coords = _coot.file_type_coords

def open_coords_dialog():
  return _coot.open_coords_dialog()
open_coords_dialog = _coot.open_coords_dialog

def on_filename_filter_toggle_button_toggled(*args):
  return _coot.on_filename_filter_toggle_button_toggled(*args)
on_filename_filter_toggle_button_toggled = _coot.on_filename_filter_toggle_button_toggled

def add_file_dialog_action_area_vbox(*args):
  return _coot.add_file_dialog_action_area_vbox(*args)
add_file_dialog_action_area_vbox = _coot.add_file_dialog_action_area_vbox

def add_filename_filter(*args):
  return _coot.add_filename_filter(*args)
add_filename_filter = _coot.add_filename_filter

def add_save_coordinates_include_hydrogens_and_aniso_checkbutton(*args):
  return _coot.add_save_coordinates_include_hydrogens_and_aniso_checkbutton(*args)
add_save_coordinates_include_hydrogens_and_aniso_checkbutton = _coot.add_save_coordinates_include_hydrogens_and_aniso_checkbutton

def add_filename_filter_button(*args):
  return _coot.add_filename_filter_button(*args)
add_filename_filter_button = _coot.add_filename_filter_button

def add_filechooser_filter_button(*args):
  return _coot.add_filechooser_filter_button(*args)
add_filechooser_filter_button = _coot.add_filechooser_filter_button

def add_filechooser_extra_filter_button(*args):
  return _coot.add_filechooser_extra_filter_button(*args)
add_filechooser_extra_filter_button = _coot.add_filechooser_extra_filter_button

def on_filename_filter_key_press_event(*args):
  return _coot.on_filename_filter_key_press_event(*args)
on_filename_filter_key_press_event = _coot.on_filename_filter_key_press_event

def fill_option_menu_with_coordinates_options(*args):
  return _coot.fill_option_menu_with_coordinates_options(*args)
fill_option_menu_with_coordinates_options = _coot.fill_option_menu_with_coordinates_options

def fill_option_menu_with_coordinates_options_unsaved_first(*args):
  return _coot.fill_option_menu_with_coordinates_options_unsaved_first(*args)
fill_option_menu_with_coordinates_options_unsaved_first = _coot.fill_option_menu_with_coordinates_options_unsaved_first

def coot_file_chooser():
  return _coot.coot_file_chooser()
coot_file_chooser = _coot.coot_file_chooser

def coot_dataset_chooser():
  return _coot.coot_dataset_chooser()
coot_dataset_chooser = _coot.coot_dataset_chooser

def coot_map_name_chooser():
  return _coot.coot_map_name_chooser()
coot_map_name_chooser = _coot.coot_map_name_chooser

def coot_save_coords_chooser():
  return _coot.coot_save_coords_chooser()
coot_save_coords_chooser = _coot.coot_save_coords_chooser

def coot_cif_dictionary_chooser():
  return _coot.coot_cif_dictionary_chooser()
coot_cif_dictionary_chooser = _coot.coot_cif_dictionary_chooser

def coot_run_script_chooser():
  return _coot.coot_run_script_chooser()
coot_run_script_chooser = _coot.coot_run_script_chooser

def coot_save_state_chooser():
  return _coot.coot_save_state_chooser()
coot_save_state_chooser = _coot.coot_save_state_chooser

def coot_save_symmetry_chooser():
  return _coot.coot_save_symmetry_chooser()
coot_save_symmetry_chooser = _coot.coot_save_symmetry_chooser

def coot_screendump_chooser():
  return _coot.coot_screendump_chooser()
coot_screendump_chooser = _coot.coot_screendump_chooser

def set_directory_for_coot_file_chooser(*args):
  return _coot.set_directory_for_coot_file_chooser(*args)
set_directory_for_coot_file_chooser = _coot.set_directory_for_coot_file_chooser

def coot_file_chooser_file_name(*args):
  return _coot.coot_file_chooser_file_name(*args)
coot_file_chooser_file_name = _coot.coot_file_chooser_file_name

def set_filename_for_filechooserselection(*args):
  return _coot.set_filename_for_filechooserselection(*args)
set_filename_for_filechooserselection = _coot.set_filename_for_filechooserselection

def set_file_chooser_selector(*args):
  return _coot.set_file_chooser_selector(*args)
set_file_chooser_selector = _coot.set_file_chooser_selector

def file_chooser_selector_state():
  return _coot.file_chooser_selector_state()
file_chooser_selector_state = _coot.file_chooser_selector_state

def set_file_chooser_overwrite(*args):
  return _coot.set_file_chooser_overwrite(*args)
set_file_chooser_overwrite = _coot.set_file_chooser_overwrite

def file_chooser_overwrite_state():
  return _coot.file_chooser_overwrite_state()
file_chooser_overwrite_state = _coot.file_chooser_overwrite_state

def get_positive_float_from_entry(*args):
  return _coot.get_positive_float_from_entry(*args)
get_positive_float_from_entry = _coot.get_positive_float_from_entry

def handle_filename_filter_gtk2(*args):
  return _coot.handle_filename_filter_gtk2(*args)
handle_filename_filter_gtk2 = _coot.handle_filename_filter_gtk2

def set_transient_and_position(*args):
  return _coot.set_transient_and_position(*args)
set_transient_and_position = _coot.set_transient_and_position

def info_dialog(*args):
  return _coot.info_dialog(*args)
info_dialog = _coot.info_dialog

def info_dialog_and_text(*args):
  return _coot.info_dialog_and_text(*args)
info_dialog_and_text = _coot.info_dialog_and_text

def set_main_window_title(*args):
  return _coot.set_main_window_title(*args)
set_main_window_title = _coot.set_main_window_title

def manage_column_selector(*args):
  return _coot.manage_column_selector(*args)
manage_column_selector = _coot.manage_column_selector

def manage_refmac_column_selection(*args):
  return _coot.manage_refmac_column_selection(*args)
manage_refmac_column_selection = _coot.manage_refmac_column_selection

def fill_f_optionmenu_with_expert_options(*args):
  return _coot.fill_f_optionmenu_with_expert_options(*args)
fill_f_optionmenu_with_expert_options = _coot.fill_f_optionmenu_with_expert_options

def handle_column_label_make_fourier(*args):
  return _coot.handle_column_label_make_fourier(*args)
handle_column_label_make_fourier = _coot.handle_column_label_make_fourier

def wrapped_create_run_refmac_dialog():
  return _coot.wrapped_create_run_refmac_dialog()
wrapped_create_run_refmac_dialog = _coot.wrapped_create_run_refmac_dialog

def chain_n_residues(*args):
  return _coot.chain_n_residues(*args)
chain_n_residues = _coot.chain_n_residues

def molecule_centre_internal(*args):
  return _coot.molecule_centre_internal(*args)
molecule_centre_internal = _coot.molecule_centre_internal

def resname_from_serial_number(*args):
  return _coot.resname_from_serial_number(*args)
resname_from_serial_number = _coot.resname_from_serial_number

def seqnum_from_serial_number(*args):
  return _coot.seqnum_from_serial_number(*args)
seqnum_from_serial_number = _coot.seqnum_from_serial_number

def insertion_code_from_serial_number(*args):
  return _coot.insertion_code_from_serial_number(*args)
insertion_code_from_serial_number = _coot.insertion_code_from_serial_number

def python_representation_kk(*args):
  return _coot.python_representation_kk(*args)
python_representation_kk = _coot.python_representation_kk

def chain_id_py(*args):
  return _coot.chain_id_py(*args)
chain_id_py = _coot.chain_id_py

def n_models(*args):
  return _coot.n_models(*args)
n_models = _coot.n_models

def n_chains(*args):
  return _coot.n_chains(*args)
n_chains = _coot.n_chains

def is_solvent_chain_p(*args):
  return _coot.is_solvent_chain_p(*args)
is_solvent_chain_p = _coot.is_solvent_chain_p

def n_residues(*args):
  return _coot.n_residues(*args)
n_residues = _coot.n_residues

def remarks_py(*args):
  return _coot.remarks_py(*args)
remarks_py = _coot.remarks_py

def residue_centre_py(*args):
  return _coot.residue_centre_py(*args)
residue_centre_py = _coot.residue_centre_py

def sort_chains(*args):
  return _coot.sort_chains(*args)
sort_chains = _coot.sort_chains

def sort_residues(*args):
  return _coot.sort_residues(*args)
sort_residues = _coot.sort_residues

def remarks_dialog(*args):
  return _coot.remarks_dialog(*args)
remarks_dialog = _coot.remarks_dialog

def on_remarks_dialog_close_button_clicked(*args):
  return _coot.on_remarks_dialog_close_button_clicked(*args)
on_remarks_dialog_close_button_clicked = _coot.on_remarks_dialog_close_button_clicked

def remark_number_to_colour(*args):
  return _coot.remark_number_to_colour(*args)
remark_number_to_colour = _coot.remark_number_to_colour

def print_header_secondary_structure_info(*args):
  return _coot.print_header_secondary_structure_info(*args)
print_header_secondary_structure_info = _coot.print_header_secondary_structure_info

def write_header_secondary_structure_info(*args):
  return _coot.write_header_secondary_structure_info(*args)
write_header_secondary_structure_info = _coot.write_header_secondary_structure_info

def copy_molecule(*args):
  return _coot.copy_molecule(*args)
copy_molecule = _coot.copy_molecule

def add_ligand_delete_residue_copy_molecule(*args):
  return _coot.add_ligand_delete_residue_copy_molecule(*args)
add_ligand_delete_residue_copy_molecule = _coot.add_ligand_delete_residue_copy_molecule

def exchange_chain_ids_for_seg_ids(*args):
  return _coot.exchange_chain_ids_for_seg_ids(*args)
exchange_chain_ids_for_seg_ids = _coot.exchange_chain_ids_for_seg_ids

def show_remarks_browswer():
  return _coot.show_remarks_browswer()
show_remarks_browswer = _coot.show_remarks_browswer

def wrapped_create_remarks_browser_molecule_chooser_dialog():
  return _coot.wrapped_create_remarks_browser_molecule_chooser_dialog()
wrapped_create_remarks_browser_molecule_chooser_dialog = _coot.wrapped_create_remarks_browser_molecule_chooser_dialog

def fill_remarks_browswer_chooser(*args):
  return _coot.fill_remarks_browswer_chooser(*args)
fill_remarks_browswer_chooser = _coot.fill_remarks_browswer_chooser

def remarks_browswer_molecule_item_select(*args):
  return _coot.remarks_browswer_molecule_item_select(*args)
remarks_browswer_molecule_item_select = _coot.remarks_browswer_molecule_item_select

def coot_version():
  return _coot.coot_version()
coot_version = _coot.coot_version

def coot_sys_build_type_py():
  return _coot.coot_sys_build_type_py()
coot_sys_build_type_py = _coot.coot_sys_build_type_py

def svn_revision():
  return _coot.svn_revision()
svn_revision = _coot.svn_revision

def molecule_name(*args):
  return _coot.molecule_name(*args)
molecule_name = _coot.molecule_name

def molecule_name_stub_py(*args):
  return _coot.molecule_name_stub_py(*args)
molecule_name_stub_py = _coot.molecule_name_stub_py

def set_molecule_name(*args):
  return _coot.set_molecule_name(*args)
set_molecule_name = _coot.set_molecule_name

def coot_checked_exit(*args):
  return _coot.coot_checked_exit(*args)
coot_checked_exit = _coot.coot_checked_exit

def coot_real_exit(*args):
  return _coot.coot_real_exit(*args)
coot_real_exit = _coot.coot_real_exit

def coot_clear_backup_or_real_exit(*args):
  return _coot.coot_clear_backup_or_real_exit(*args)
coot_clear_backup_or_real_exit = _coot.coot_clear_backup_or_real_exit

def run_clear_backups_py(*args):
  return _coot.run_clear_backups_py(*args)
run_clear_backups_py = _coot.run_clear_backups_py

def fill_about_window(*args):
  return _coot.fill_about_window(*args)
fill_about_window = _coot.fill_about_window

def add_coot_references_button(*args):
  return _coot.add_coot_references_button(*args)
add_coot_references_button = _coot.add_coot_references_button

def wrapped_create_coot_references_dialog():
  return _coot.wrapped_create_coot_references_dialog()
wrapped_create_coot_references_dialog = _coot.wrapped_create_coot_references_dialog

def fill_references_notebook(*args):
  return _coot.fill_references_notebook(*args)
fill_references_notebook = _coot.fill_references_notebook

def first_coords_imol():
  return _coot.first_coords_imol()
first_coords_imol = _coot.first_coords_imol

def first_small_coords_imol():
  return _coot.first_small_coords_imol()
first_small_coords_imol = _coot.first_small_coords_imol

def first_unsaved_coords_imol():
  return _coot.first_unsaved_coords_imol()
first_unsaved_coords_imol = _coot.first_unsaved_coords_imol

def mmcif_sfs_to_mtz(*args):
  return _coot.mmcif_sfs_to_mtz(*args)
mmcif_sfs_to_mtz = _coot.mmcif_sfs_to_mtz

def set_do_anti_aliasing(*args):
  return _coot.set_do_anti_aliasing(*args)
set_do_anti_aliasing = _coot.set_do_anti_aliasing

def do_anti_aliasing_state():
  return _coot.do_anti_aliasing_state()
do_anti_aliasing_state = _coot.do_anti_aliasing_state

def set_do_GL_lighting(*args):
  return _coot.set_do_GL_lighting(*args)
set_do_GL_lighting = _coot.set_do_GL_lighting

def do_GL_lighting_state():
  return _coot.do_GL_lighting_state()
do_GL_lighting_state = _coot.do_GL_lighting_state

def use_graphics_interface_state():
  return _coot.use_graphics_interface_state()
use_graphics_interface_state = _coot.use_graphics_interface_state

def python_at_prompt_at_startup_state():
  return _coot.python_at_prompt_at_startup_state()
python_at_prompt_at_startup_state = _coot.python_at_prompt_at_startup_state

def start_graphics_interface():
  return _coot.start_graphics_interface()
start_graphics_interface = _coot.start_graphics_interface

def reset_view():
  return _coot.reset_view()
reset_view = _coot.reset_view

def graphics_n_molecules():
  return _coot.graphics_n_molecules()
graphics_n_molecules = _coot.graphics_n_molecules

def molecule_has_hydrogens_raw(*args):
  return _coot.molecule_has_hydrogens_raw(*args)
molecule_has_hydrogens_raw = _coot.molecule_has_hydrogens_raw

def own_molecule_number(*args):
  return _coot.own_molecule_number(*args)
own_molecule_number = _coot.own_molecule_number

def next_map_for_molecule(*args):
  return _coot.next_map_for_molecule(*args)
next_map_for_molecule = _coot.next_map_for_molecule

def toggle_idle_spin_function():
  return _coot.toggle_idle_spin_function()
toggle_idle_spin_function = _coot.toggle_idle_spin_function

def toggle_idle_rock_function():
  return _coot.toggle_idle_rock_function()
toggle_idle_rock_function = _coot.toggle_idle_rock_function

def get_idle_function_rock_target_angle():
  return _coot.get_idle_function_rock_target_angle()
get_idle_function_rock_target_angle = _coot.get_idle_function_rock_target_angle

def set_rocking_factors(*args):
  return _coot.set_rocking_factors(*args)
set_rocking_factors = _coot.set_rocking_factors

def set_idle_function_rotate_angle(*args):
  return _coot.set_idle_function_rotate_angle(*args)
set_idle_function_rotate_angle = _coot.set_idle_function_rotate_angle

def idle_function_rotate_angle():
  return _coot.idle_function_rotate_angle()
idle_function_rotate_angle = _coot.idle_function_rotate_angle

def handle_read_draw_molecule(*args):
  return _coot.handle_read_draw_molecule(*args)
handle_read_draw_molecule = _coot.handle_read_draw_molecule

def set_convert_to_v2_atom_names(*args):
  return _coot.set_convert_to_v2_atom_names(*args)
set_convert_to_v2_atom_names = _coot.set_convert_to_v2_atom_names

def handle_read_draw_molecule_with_recentre(*args):
  return _coot.handle_read_draw_molecule_with_recentre(*args)
handle_read_draw_molecule_with_recentre = _coot.handle_read_draw_molecule_with_recentre

def handle_read_draw_molecule_and_move_molecule_here(*args):
  return _coot.handle_read_draw_molecule_and_move_molecule_here(*args)
handle_read_draw_molecule_and_move_molecule_here = _coot.handle_read_draw_molecule_and_move_molecule_here

def read_pdb(*args):
  return _coot.read_pdb(*args)
read_pdb = _coot.read_pdb

def assign_hetatms(*args):
  return _coot.assign_hetatms(*args)
assign_hetatms = _coot.assign_hetatms

def hetify_residue(*args):
  return _coot.hetify_residue(*args)
hetify_residue = _coot.hetify_residue

def residue_has_hetatms(*args):
  return _coot.residue_has_hetatms(*args)
residue_has_hetatms = _coot.residue_has_hetatms

def het_group_residues_py(*args):
  return _coot.het_group_residues_py(*args)
het_group_residues_py = _coot.het_group_residues_py

def het_group_n_atoms(*args):
  return _coot.het_group_n_atoms(*args)
het_group_n_atoms = _coot.het_group_n_atoms

def replace_fragment(*args):
  return _coot.replace_fragment(*args)
replace_fragment = _coot.replace_fragment

def copy_residue_range(*args):
  return _coot.copy_residue_range(*args)
copy_residue_range = _coot.copy_residue_range

def clear_and_update_model_molecule_from_file(*args):
  return _coot.clear_and_update_model_molecule_from_file(*args)
clear_and_update_model_molecule_from_file = _coot.clear_and_update_model_molecule_from_file

def screendump_image(*args):
  return _coot.screendump_image(*args)
screendump_image = _coot.screendump_image

def check_for_dark_blue_density():
  return _coot.check_for_dark_blue_density()
check_for_dark_blue_density = _coot.check_for_dark_blue_density

def add_is_difference_map_checkbutton(*args):
  return _coot.add_is_difference_map_checkbutton(*args)
add_is_difference_map_checkbutton = _coot.add_is_difference_map_checkbutton

def on_read_map_difference_map_toggle_button_toggled(*args):
  return _coot.on_read_map_difference_map_toggle_button_toggled(*args)
on_read_map_difference_map_toggle_button_toggled = _coot.on_read_map_difference_map_toggle_button_toggled

def add_recentre_on_read_pdb_checkbutton(*args):
  return _coot.add_recentre_on_read_pdb_checkbutton(*args)
add_recentre_on_read_pdb_checkbutton = _coot.add_recentre_on_read_pdb_checkbutton

def on_recentre_on_read_pdb_toggle_button_toggled(*args):
  return _coot.on_recentre_on_read_pdb_toggle_button_toggled(*args)
on_recentre_on_read_pdb_toggle_button_toggled = _coot.on_recentre_on_read_pdb_toggle_button_toggled

def set_draw_solid_density_surface(*args):
  return _coot.set_draw_solid_density_surface(*args)
set_draw_solid_density_surface = _coot.set_draw_solid_density_surface

def set_draw_map_standard_lines(*args):
  return _coot.set_draw_map_standard_lines(*args)
set_draw_map_standard_lines = _coot.set_draw_map_standard_lines

def solid_surface(*args):
  return _coot.solid_surface(*args)
solid_surface = _coot.solid_surface

def set_solid_density_surface_opacity(*args):
  return _coot.set_solid_density_surface_opacity(*args)
set_solid_density_surface_opacity = _coot.set_solid_density_surface_opacity

def set_flat_shading_for_solid_density_surface(*args):
  return _coot.set_flat_shading_for_solid_density_surface(*args)
set_flat_shading_for_solid_density_surface = _coot.set_flat_shading_for_solid_density_surface

def test_internal_py():
  return _coot.test_internal_py()
test_internal_py = _coot.test_internal_py

def test_internal_single_py():
  return _coot.test_internal_single_py()
test_internal_single_py = _coot.test_internal_single_py

def set_scroll_by_wheel_mouse(*args):
  return _coot.set_scroll_by_wheel_mouse(*args)
set_scroll_by_wheel_mouse = _coot.set_scroll_by_wheel_mouse

def scroll_by_wheel_mouse_state():
  return _coot.scroll_by_wheel_mouse_state()
scroll_by_wheel_mouse_state = _coot.scroll_by_wheel_mouse_state

def set_default_initial_contour_level_for_map(*args):
  return _coot.set_default_initial_contour_level_for_map(*args)
set_default_initial_contour_level_for_map = _coot.set_default_initial_contour_level_for_map

def set_default_initial_contour_level_for_difference_map(*args):
  return _coot.set_default_initial_contour_level_for_difference_map(*args)
set_default_initial_contour_level_for_difference_map = _coot.set_default_initial_contour_level_for_difference_map

def print_view_matrix():
  return _coot.print_view_matrix()
print_view_matrix = _coot.print_view_matrix

def get_view_matrix_element(*args):
  return _coot.get_view_matrix_element(*args)
get_view_matrix_element = _coot.get_view_matrix_element

def get_view_quaternion_internal(*args):
  return _coot.get_view_quaternion_internal(*args)
get_view_quaternion_internal = _coot.get_view_quaternion_internal

def set_view_quaternion(*args):
  return _coot.set_view_quaternion(*args)
set_view_quaternion = _coot.set_view_quaternion

def apply_ncs_to_view_orientation(*args):
  return _coot.apply_ncs_to_view_orientation(*args)
apply_ncs_to_view_orientation = _coot.apply_ncs_to_view_orientation

def apply_ncs_to_view_orientation_and_screen_centre(*args):
  return _coot.apply_ncs_to_view_orientation_and_screen_centre(*args)
apply_ncs_to_view_orientation_and_screen_centre = _coot.apply_ncs_to_view_orientation_and_screen_centre

def set_fps_flag(*args):
  return _coot.set_fps_flag(*args)
set_fps_flag = _coot.set_fps_flag

def get_fps_flag():
  return _coot.get_fps_flag()
get_fps_flag = _coot.get_fps_flag

def set_show_origin_marker(*args):
  return _coot.set_show_origin_marker(*args)
set_show_origin_marker = _coot.set_show_origin_marker

def show_origin_marker_state():
  return _coot.show_origin_marker_state()
show_origin_marker_state = _coot.show_origin_marker_state

def hide_modelling_toolbar():
  return _coot.hide_modelling_toolbar()
hide_modelling_toolbar = _coot.hide_modelling_toolbar

def show_modelling_toolbar():
  return _coot.show_modelling_toolbar()
show_modelling_toolbar = _coot.show_modelling_toolbar

def hide_main_toolbar():
  return _coot.hide_main_toolbar()
hide_main_toolbar = _coot.hide_main_toolbar

def show_main_toolbar():
  return _coot.show_main_toolbar()
show_main_toolbar = _coot.show_main_toolbar

def show_model_toolbar_all_icons():
  return _coot.show_model_toolbar_all_icons()
show_model_toolbar_all_icons = _coot.show_model_toolbar_all_icons

def show_model_toolbar_main_icons():
  return _coot.show_model_toolbar_main_icons()
show_model_toolbar_main_icons = _coot.show_model_toolbar_main_icons

def toolbar_popup_menu(*args):
  return _coot.toolbar_popup_menu(*args)
toolbar_popup_menu = _coot.toolbar_popup_menu

def set_model_toolbar_docked_position_callback(*args):
  return _coot.set_model_toolbar_docked_position_callback(*args)
set_model_toolbar_docked_position_callback = _coot.set_model_toolbar_docked_position_callback

def reattach_modelling_toolbar():
  return _coot.reattach_modelling_toolbar()
reattach_modelling_toolbar = _coot.reattach_modelling_toolbar

def set_model_toolbar_docked_position(*args):
  return _coot.set_model_toolbar_docked_position(*args)
set_model_toolbar_docked_position = _coot.set_model_toolbar_docked_position

def suck_model_fit_dialog():
  return _coot.suck_model_fit_dialog()
suck_model_fit_dialog = _coot.suck_model_fit_dialog

def suck_model_fit_dialog_bl():
  return _coot.suck_model_fit_dialog_bl()
suck_model_fit_dialog_bl = _coot.suck_model_fit_dialog_bl

def close_model_fit_dialog(*args):
  return _coot.close_model_fit_dialog(*args)
close_model_fit_dialog = _coot.close_model_fit_dialog

def popup_window(*args):
  return _coot.popup_window(*args)
popup_window = _coot.popup_window

def add_status_bar_text(*args):
  return _coot.add_status_bar_text(*args)
add_status_bar_text = _coot.add_status_bar_text

def set_model_fit_refine_dialog_stays_on_top(*args):
  return _coot.set_model_fit_refine_dialog_stays_on_top(*args)
set_model_fit_refine_dialog_stays_on_top = _coot.set_model_fit_refine_dialog_stays_on_top

def model_fit_refine_dialog_stays_on_top_state():
  return _coot.model_fit_refine_dialog_stays_on_top_state()
model_fit_refine_dialog_stays_on_top_state = _coot.model_fit_refine_dialog_stays_on_top_state

def save_accept_reject_dialog_window_position(*args):
  return _coot.save_accept_reject_dialog_window_position(*args)
save_accept_reject_dialog_window_position = _coot.save_accept_reject_dialog_window_position

def set_accept_reject_dialog(*args):
  return _coot.set_accept_reject_dialog(*args)
set_accept_reject_dialog = _coot.set_accept_reject_dialog

def set_accept_reject_dialog_docked(*args):
  return _coot.set_accept_reject_dialog_docked(*args)
set_accept_reject_dialog_docked = _coot.set_accept_reject_dialog_docked

def accept_reject_dialog_docked_state():
  return _coot.accept_reject_dialog_docked_state()
accept_reject_dialog_docked_state = _coot.accept_reject_dialog_docked_state

def set_accept_reject_dialog_docked_show(*args):
  return _coot.set_accept_reject_dialog_docked_show(*args)
set_accept_reject_dialog_docked_show = _coot.set_accept_reject_dialog_docked_show

def accept_reject_dialog_docked_show_state():
  return _coot.accept_reject_dialog_docked_show_state()
accept_reject_dialog_docked_show_state = _coot.accept_reject_dialog_docked_show_state

def set_model_toolbar_style(*args):
  return _coot.set_model_toolbar_style(*args)
set_model_toolbar_style = _coot.set_model_toolbar_style

def model_toolbar_style_state():
  return _coot.model_toolbar_style_state()
model_toolbar_style_state = _coot.model_toolbar_style_state

def set_main_toolbar_style(*args):
  return _coot.set_main_toolbar_style(*args)
set_main_toolbar_style = _coot.set_main_toolbar_style

def main_toolbar_style_state():
  return _coot.main_toolbar_style_state()
main_toolbar_style_state = _coot.main_toolbar_style_state

def quanta_buttons():
  return _coot.quanta_buttons()
quanta_buttons = _coot.quanta_buttons

def quanta_like_zoom():
  return _coot.quanta_like_zoom()
quanta_like_zoom = _coot.quanta_like_zoom

def set_control_key_for_rotate(*args):
  return _coot.set_control_key_for_rotate(*args)
set_control_key_for_rotate = _coot.set_control_key_for_rotate

def control_key_for_rotate_state():
  return _coot.control_key_for_rotate_state()
control_key_for_rotate_state = _coot.control_key_for_rotate_state

def blob_under_pointer_to_screen_centre():
  return _coot.blob_under_pointer_to_screen_centre()
blob_under_pointer_to_screen_centre = _coot.blob_under_pointer_to_screen_centre

def normal_cursor():
  return _coot.normal_cursor()
normal_cursor = _coot.normal_cursor

def fleur_cursor():
  return _coot.fleur_cursor()
fleur_cursor = _coot.fleur_cursor

def pick_cursor_maybe():
  return _coot.pick_cursor_maybe()
pick_cursor_maybe = _coot.pick_cursor_maybe

def rotate_cursor():
  return _coot.rotate_cursor()
rotate_cursor = _coot.rotate_cursor

def set_pick_cursor_index(*args):
  return _coot.set_pick_cursor_index(*args)
set_pick_cursor_index = _coot.set_pick_cursor_index

def post_model_fit_refine_dialog():
  return _coot.post_model_fit_refine_dialog()
post_model_fit_refine_dialog = _coot.post_model_fit_refine_dialog

def wrapped_create_model_fit_refine_dialog():
  return _coot.wrapped_create_model_fit_refine_dialog()
wrapped_create_model_fit_refine_dialog = _coot.wrapped_create_model_fit_refine_dialog

def update_model_fit_refine_dialog_menu(*args):
  return _coot.update_model_fit_refine_dialog_menu(*args)
update_model_fit_refine_dialog_menu = _coot.update_model_fit_refine_dialog_menu

def update_model_fit_refine_dialog_buttons(*args):
  return _coot.update_model_fit_refine_dialog_buttons(*args)
update_model_fit_refine_dialog_buttons = _coot.update_model_fit_refine_dialog_buttons

def unset_model_fit_refine_dialog():
  return _coot.unset_model_fit_refine_dialog()
unset_model_fit_refine_dialog = _coot.unset_model_fit_refine_dialog

def unset_refine_params_dialog():
  return _coot.unset_refine_params_dialog()
unset_refine_params_dialog = _coot.unset_refine_params_dialog

def show_select_map_dialog():
  return _coot.show_select_map_dialog()
show_select_map_dialog = _coot.show_select_map_dialog

def set_model_fit_refine_rotate_translate_zone_label(*args):
  return _coot.set_model_fit_refine_rotate_translate_zone_label(*args)
set_model_fit_refine_rotate_translate_zone_label = _coot.set_model_fit_refine_rotate_translate_zone_label

def set_model_fit_refine_place_atom_at_pointer_label(*args):
  return _coot.set_model_fit_refine_place_atom_at_pointer_label(*args)
set_model_fit_refine_place_atom_at_pointer_label = _coot.set_model_fit_refine_place_atom_at_pointer_label

def wrapped_create_other_model_tools_dialog():
  return _coot.wrapped_create_other_model_tools_dialog()
wrapped_create_other_model_tools_dialog = _coot.wrapped_create_other_model_tools_dialog

def unset_other_modelling_tools_dialog():
  return _coot.unset_other_modelling_tools_dialog()
unset_other_modelling_tools_dialog = _coot.unset_other_modelling_tools_dialog

def post_other_modelling_tools_dialog():
  return _coot.post_other_modelling_tools_dialog()
post_other_modelling_tools_dialog = _coot.post_other_modelling_tools_dialog

def set_refinement_move_atoms_with_zero_occupancy(*args):
  return _coot.set_refinement_move_atoms_with_zero_occupancy(*args)
set_refinement_move_atoms_with_zero_occupancy = _coot.set_refinement_move_atoms_with_zero_occupancy

def refinement_move_atoms_with_zero_occupancy_state():
  return _coot.refinement_move_atoms_with_zero_occupancy_state()
refinement_move_atoms_with_zero_occupancy_state = _coot.refinement_move_atoms_with_zero_occupancy_state

def wrapped_create_fast_ss_search_dialog():
  return _coot.wrapped_create_fast_ss_search_dialog()
wrapped_create_fast_ss_search_dialog = _coot.wrapped_create_fast_ss_search_dialog

def make_backup(*args):
  return _coot.make_backup(*args)
make_backup = _coot.make_backup

def turn_off_backup(*args):
  return _coot.turn_off_backup(*args)
turn_off_backup = _coot.turn_off_backup

def turn_on_backup(*args):
  return _coot.turn_on_backup(*args)
turn_on_backup = _coot.turn_on_backup

def backup_state(*args):
  return _coot.backup_state(*args)
backup_state = _coot.backup_state

def apply_undo():
  return _coot.apply_undo()
apply_undo = _coot.apply_undo

def apply_redo():
  return _coot.apply_redo()
apply_redo = _coot.apply_redo

def set_have_unsaved_changes(*args):
  return _coot.set_have_unsaved_changes(*args)
set_have_unsaved_changes = _coot.set_have_unsaved_changes

def have_unsaved_changes_p(*args):
  return _coot.have_unsaved_changes_p(*args)
have_unsaved_changes_p = _coot.have_unsaved_changes_p

def set_undo_molecule(*args):
  return _coot.set_undo_molecule(*args)
set_undo_molecule = _coot.set_undo_molecule

def show_set_undo_molecule_chooser():
  return _coot.show_set_undo_molecule_chooser()
show_set_undo_molecule_chooser = _coot.show_set_undo_molecule_chooser

def wrapped_create_undo_molecule_chooser_dialog():
  return _coot.wrapped_create_undo_molecule_chooser_dialog()
wrapped_create_undo_molecule_chooser_dialog = _coot.wrapped_create_undo_molecule_chooser_dialog

def set_unpathed_backup_file_names(*args):
  return _coot.set_unpathed_backup_file_names(*args)
set_unpathed_backup_file_names = _coot.set_unpathed_backup_file_names

def unpathed_backup_file_names_state():
  return _coot.unpathed_backup_file_names_state()
unpathed_backup_file_names_state = _coot.unpathed_backup_file_names_state

def backup_compress_files_state():
  return _coot.backup_compress_files_state()
backup_compress_files_state = _coot.backup_compress_files_state

def set_backup_compress_files(*args):
  return _coot.set_backup_compress_files(*args)
set_backup_compress_files = _coot.set_backup_compress_files

def recover_session():
  return _coot.recover_session()
recover_session = _coot.recover_session

def execute_recover_session(*args):
  return _coot.execute_recover_session(*args)
execute_recover_session = _coot.execute_recover_session

def calc_phases_generic(*args):
  return _coot.calc_phases_generic(*args)
calc_phases_generic = _coot.calc_phases_generic

def map_from_mtz_by_refmac_calc_phases(*args):
  return _coot.map_from_mtz_by_refmac_calc_phases(*args)
map_from_mtz_by_refmac_calc_phases = _coot.map_from_mtz_by_refmac_calc_phases

def map_from_mtz_by_calc_phases(*args):
  return _coot.map_from_mtz_by_calc_phases(*args)
map_from_mtz_by_calc_phases = _coot.map_from_mtz_by_calc_phases

def get_map_colour(*args):
  return _coot.get_map_colour(*args)
get_map_colour = _coot.get_map_colour

def get_map_colour_py(*args):
  return _coot.get_map_colour_py(*args)
get_map_colour_py = _coot.get_map_colour_py

def add_on_map_colour_choices(*args):
  return _coot.add_on_map_colour_choices(*args)
add_on_map_colour_choices = _coot.add_on_map_colour_choices

def map_colour_mol_selector_activate(*args):
  return _coot.map_colour_mol_selector_activate(*args)
map_colour_mol_selector_activate = _coot.map_colour_mol_selector_activate

def my_delete_menu_items(*args):
  return _coot.my_delete_menu_items(*args)
my_delete_menu_items = _coot.my_delete_menu_items

def add_on_map_scroll_whell_choices(*args):
  return _coot.add_on_map_scroll_whell_choices(*args)
add_on_map_scroll_whell_choices = _coot.add_on_map_scroll_whell_choices

def map_scroll_wheel_mol_selector_activate(*args):
  return _coot.map_scroll_wheel_mol_selector_activate(*args)
map_scroll_wheel_mol_selector_activate = _coot.map_scroll_wheel_mol_selector_activate

def set_scroll_wheel_map(*args):
  return _coot.set_scroll_wheel_map(*args)
set_scroll_wheel_map = _coot.set_scroll_wheel_map

def set_scrollable_map(*args):
  return _coot.set_scrollable_map(*args)
set_scrollable_map = _coot.set_scrollable_map

def scroll_wheel_map():
  return _coot.scroll_wheel_map()
scroll_wheel_map = _coot.scroll_wheel_map

def save_previous_map_colour(*args):
  return _coot.save_previous_map_colour(*args)
save_previous_map_colour = _coot.save_previous_map_colour

def restore_previous_map_colour(*args):
  return _coot.restore_previous_map_colour(*args)
restore_previous_map_colour = _coot.restore_previous_map_colour

def set_active_map_drag_flag(*args):
  return _coot.set_active_map_drag_flag(*args)
set_active_map_drag_flag = _coot.set_active_map_drag_flag

def get_active_map_drag_flag():
  return _coot.get_active_map_drag_flag()
get_active_map_drag_flag = _coot.get_active_map_drag_flag

def set_last_map_colour(*args):
  return _coot.set_last_map_colour(*args)
set_last_map_colour = _coot.set_last_map_colour

def set_map_colour(*args):
  return _coot.set_map_colour(*args)
set_map_colour = _coot.set_map_colour

def handle_map_colour_change(*args):
  return _coot.handle_map_colour_change(*args)
handle_map_colour_change = _coot.handle_map_colour_change

def handle_symmetry_colour_change(*args):
  return _coot.handle_symmetry_colour_change(*args)
handle_symmetry_colour_change = _coot.handle_symmetry_colour_change

def fill_single_map_properties_dialog(*args):
  return _coot.fill_single_map_properties_dialog(*args)
fill_single_map_properties_dialog = _coot.fill_single_map_properties_dialog

def set_contour_level_absolute(*args):
  return _coot.set_contour_level_absolute(*args)
set_contour_level_absolute = _coot.set_contour_level_absolute

def set_contour_level_in_sigma(*args):
  return _coot.set_contour_level_in_sigma(*args)
set_contour_level_in_sigma = _coot.set_contour_level_in_sigma

def set_last_map_sigma_step(*args):
  return _coot.set_last_map_sigma_step(*args)
set_last_map_sigma_step = _coot.set_last_map_sigma_step

def set_contour_sigma_button_and_entry(*args):
  return _coot.set_contour_sigma_button_and_entry(*args)
set_contour_sigma_button_and_entry = _coot.set_contour_sigma_button_and_entry

def set_contour_by_sigma_step_maybe(*args):
  return _coot.set_contour_by_sigma_step_maybe(*args)
set_contour_by_sigma_step_maybe = _coot.set_contour_by_sigma_step_maybe

def set_contour_by_sigma_step_by_mol(*args):
  return _coot.set_contour_by_sigma_step_by_mol(*args)
set_contour_by_sigma_step_by_mol = _coot.set_contour_by_sigma_step_by_mol

def data_resolution(*args):
  return _coot.data_resolution(*args)
data_resolution = _coot.data_resolution

def model_resolution(*args):
  return _coot.model_resolution(*args)
model_resolution = _coot.model_resolution

def export_map(*args):
  return _coot.export_map(*args)
export_map = _coot.export_map

def export_map_fragment(*args):
  return _coot.export_map_fragment(*args)
export_map_fragment = _coot.export_map_fragment

def transform_map_raw(*args):
  return _coot.transform_map_raw(*args)
transform_map_raw = _coot.transform_map_raw

def difference_map(*args):
  return _coot.difference_map(*args)
difference_map = _coot.difference_map

def average_map_py(*args):
  return _coot.average_map_py(*args)
average_map_py = _coot.average_map_py

def get_text_for_iso_level_increment_entry(*args):
  return _coot.get_text_for_iso_level_increment_entry(*args)
get_text_for_iso_level_increment_entry = _coot.get_text_for_iso_level_increment_entry

def get_text_for_diff_map_iso_level_increment_entry(*args):
  return _coot.get_text_for_diff_map_iso_level_increment_entry(*args)
get_text_for_diff_map_iso_level_increment_entry = _coot.get_text_for_diff_map_iso_level_increment_entry

def set_iso_level_increment(*args):
  return _coot.set_iso_level_increment(*args)
set_iso_level_increment = _coot.set_iso_level_increment

def get_iso_level_increment():
  return _coot.get_iso_level_increment()
get_iso_level_increment = _coot.get_iso_level_increment

def set_iso_level_increment_from_text(*args):
  return _coot.set_iso_level_increment_from_text(*args)
set_iso_level_increment_from_text = _coot.set_iso_level_increment_from_text

def set_diff_map_iso_level_increment(*args):
  return _coot.set_diff_map_iso_level_increment(*args)
set_diff_map_iso_level_increment = _coot.set_diff_map_iso_level_increment

def get_diff_map_iso_level_increment():
  return _coot.get_diff_map_iso_level_increment()
get_diff_map_iso_level_increment = _coot.get_diff_map_iso_level_increment

def set_diff_map_iso_level_increment_from_text(*args):
  return _coot.set_diff_map_iso_level_increment_from_text(*args)
set_diff_map_iso_level_increment_from_text = _coot.set_diff_map_iso_level_increment_from_text

def single_map_properties_apply_contour_level_to_map(*args):
  return _coot.single_map_properties_apply_contour_level_to_map(*args)
single_map_properties_apply_contour_level_to_map = _coot.single_map_properties_apply_contour_level_to_map

def set_map_sampling_rate_text(*args):
  return _coot.set_map_sampling_rate_text(*args)
set_map_sampling_rate_text = _coot.set_map_sampling_rate_text

def set_map_sampling_rate(*args):
  return _coot.set_map_sampling_rate(*args)
set_map_sampling_rate = _coot.set_map_sampling_rate

def get_text_for_map_sampling_rate_text():
  return _coot.get_text_for_map_sampling_rate_text()
get_text_for_map_sampling_rate_text = _coot.get_text_for_map_sampling_rate_text

def get_map_sampling_rate():
  return _coot.get_map_sampling_rate()
get_map_sampling_rate = _coot.get_map_sampling_rate

def change_contour_level(*args):
  return _coot.change_contour_level(*args)
change_contour_level = _coot.change_contour_level

def set_last_map_contour_level(*args):
  return _coot.set_last_map_contour_level(*args)
set_last_map_contour_level = _coot.set_last_map_contour_level

def set_last_map_contour_level_by_sigma(*args):
  return _coot.set_last_map_contour_level_by_sigma(*args)
set_last_map_contour_level_by_sigma = _coot.set_last_map_contour_level_by_sigma

def set_stop_scroll_diff_map(*args):
  return _coot.set_stop_scroll_diff_map(*args)
set_stop_scroll_diff_map = _coot.set_stop_scroll_diff_map

def set_stop_scroll_iso_map(*args):
  return _coot.set_stop_scroll_iso_map(*args)
set_stop_scroll_iso_map = _coot.set_stop_scroll_iso_map

def set_stop_scroll_iso_map_level(*args):
  return _coot.set_stop_scroll_iso_map_level(*args)
set_stop_scroll_iso_map_level = _coot.set_stop_scroll_iso_map_level

def set_stop_scroll_diff_map_level(*args):
  return _coot.set_stop_scroll_diff_map_level(*args)
set_stop_scroll_diff_map_level = _coot.set_stop_scroll_diff_map_level

def set_residue_density_fit_scale_factor(*args):
  return _coot.set_residue_density_fit_scale_factor(*args)
set_residue_density_fit_scale_factor = _coot.set_residue_density_fit_scale_factor

def set_map_line_width(*args):
  return _coot.set_map_line_width(*args)
set_map_line_width = _coot.set_map_line_width

def map_line_width_state():
  return _coot.map_line_width_state()
map_line_width_state = _coot.map_line_width_state

def make_and_draw_map(*args):
  return _coot.make_and_draw_map(*args)
make_and_draw_map = _coot.make_and_draw_map

def make_and_draw_map_with_refmac_params(*args):
  return _coot.make_and_draw_map_with_refmac_params(*args)
make_and_draw_map_with_refmac_params = _coot.make_and_draw_map_with_refmac_params

def make_and_draw_map_with_reso_with_refmac_params(*args):
  return _coot.make_and_draw_map_with_reso_with_refmac_params(*args)
make_and_draw_map_with_reso_with_refmac_params = _coot.make_and_draw_map_with_reso_with_refmac_params

def refmac_parameters_py(*args):
  return _coot.refmac_parameters_py(*args)
refmac_parameters_py = _coot.refmac_parameters_py

def valid_labels(*args):
  return _coot.valid_labels(*args)
valid_labels = _coot.valid_labels

def mtz_file_has_phases_p(*args):
  return _coot.mtz_file_has_phases_p(*args)
mtz_file_has_phases_p = _coot.mtz_file_has_phases_p

def is_mtz_file_p(*args):
  return _coot.is_mtz_file_p(*args)
is_mtz_file_p = _coot.is_mtz_file_p

def cns_file_has_phases_p(*args):
  return _coot.cns_file_has_phases_p(*args)
cns_file_has_phases_p = _coot.cns_file_has_phases_p

def auto_read_make_and_draw_maps(*args):
  return _coot.auto_read_make_and_draw_maps(*args)
auto_read_make_and_draw_maps = _coot.auto_read_make_and_draw_maps

def set_auto_read_do_difference_map_too(*args):
  return _coot.set_auto_read_do_difference_map_too(*args)
set_auto_read_do_difference_map_too = _coot.set_auto_read_do_difference_map_too

def auto_read_do_difference_map_too_state():
  return _coot.auto_read_do_difference_map_too_state()
auto_read_do_difference_map_too_state = _coot.auto_read_do_difference_map_too_state

def set_auto_read_column_labels(*args):
  return _coot.set_auto_read_column_labels(*args)
set_auto_read_column_labels = _coot.set_auto_read_column_labels

def get_text_for_density_size_widget():
  return _coot.get_text_for_density_size_widget()
get_text_for_density_size_widget = _coot.get_text_for_density_size_widget

def set_density_size_from_widget(*args):
  return _coot.set_density_size_from_widget(*args)
set_density_size_from_widget = _coot.set_density_size_from_widget

def set_map_radius(*args):
  return _coot.set_map_radius(*args)
set_map_radius = _coot.set_map_radius

def set_density_size(*args):
  return _coot.set_density_size(*args)
set_density_size = _coot.set_density_size

def set_map_radius_slider_max(*args):
  return _coot.set_map_radius_slider_max(*args)
set_map_radius_slider_max = _coot.set_map_radius_slider_max

def set_display_intro_string(*args):
  return _coot.set_display_intro_string(*args)
set_display_intro_string = _coot.set_display_intro_string

def get_map_radius():
  return _coot.get_map_radius()
get_map_radius = _coot.get_map_radius

def set_esoteric_depth_cue(*args):
  return _coot.set_esoteric_depth_cue(*args)
set_esoteric_depth_cue = _coot.set_esoteric_depth_cue

def esoteric_depth_cue_state():
  return _coot.esoteric_depth_cue_state()
esoteric_depth_cue_state = _coot.esoteric_depth_cue_state

def set_swap_difference_map_colours(*args):
  return _coot.set_swap_difference_map_colours(*args)
set_swap_difference_map_colours = _coot.set_swap_difference_map_colours

def swap_difference_map_colours_state():
  return _coot.swap_difference_map_colours_state()
swap_difference_map_colours_state = _coot.swap_difference_map_colours_state

def set_map_is_difference_map(*args):
  return _coot.set_map_is_difference_map(*args)
set_map_is_difference_map = _coot.set_map_is_difference_map

def map_is_difference_map(*args):
  return _coot.map_is_difference_map(*args)
map_is_difference_map = _coot.map_is_difference_map

def another_level():
  return _coot.another_level()
another_level = _coot.another_level

def another_level_from_map_molecule_number(*args):
  return _coot.another_level_from_map_molecule_number(*args)
another_level_from_map_molecule_number = _coot.another_level_from_map_molecule_number

def residue_density_fit_scale_factor():
  return _coot.residue_density_fit_scale_factor()
residue_density_fit_scale_factor = _coot.residue_density_fit_scale_factor

def density_at_point(*args):
  return _coot.density_at_point(*args)
density_at_point = _coot.density_at_point

def map_sigma_py(*args):
  return _coot.map_sigma_py(*args)
map_sigma_py = _coot.map_sigma_py

def mtz_hklin_for_map(*args):
  return _coot.mtz_hklin_for_map(*args)
mtz_hklin_for_map = _coot.mtz_hklin_for_map

def mtz_fp_for_map(*args):
  return _coot.mtz_fp_for_map(*args)
mtz_fp_for_map = _coot.mtz_fp_for_map

def mtz_phi_for_map(*args):
  return _coot.mtz_phi_for_map(*args)
mtz_phi_for_map = _coot.mtz_phi_for_map

def mtz_weight_for_map(*args):
  return _coot.mtz_weight_for_map(*args)
mtz_weight_for_map = _coot.mtz_weight_for_map

def mtz_use_weight_for_map(*args):
  return _coot.mtz_use_weight_for_map(*args)
mtz_use_weight_for_map = _coot.mtz_use_weight_for_map

def map_parameters_py(*args):
  return _coot.map_parameters_py(*args)
map_parameters_py = _coot.map_parameters_py

def cell_py(*args):
  return _coot.cell_py(*args)
cell_py = _coot.cell_py

def write_pdb_file(*args):
  return _coot.write_pdb_file(*args)
write_pdb_file = _coot.write_pdb_file

def write_residue_range_to_pdb_file(*args):
  return _coot.write_residue_range_to_pdb_file(*args)
write_residue_range_to_pdb_file = _coot.write_residue_range_to_pdb_file

def quick_save():
  return _coot.quick_save()
quick_save = _coot.quick_save

def get_write_conect_record_state():
  return _coot.get_write_conect_record_state()
get_write_conect_record_state = _coot.get_write_conect_record_state

def set_write_conect_record_state(*args):
  return _coot.set_write_conect_record_state(*args)
set_write_conect_record_state = _coot.set_write_conect_record_state

def execute_refmac(*args):
  return _coot.execute_refmac(*args)
execute_refmac = _coot.execute_refmac

def refmac_molecule_button_select(*args):
  return _coot.refmac_molecule_button_select(*args)
refmac_molecule_button_select = _coot.refmac_molecule_button_select

def set_refmac_molecule(*args):
  return _coot.set_refmac_molecule(*args)
set_refmac_molecule = _coot.set_refmac_molecule

def fill_option_menu_with_refmac_options(*args):
  return _coot.fill_option_menu_with_refmac_options(*args)
fill_option_menu_with_refmac_options = _coot.fill_option_menu_with_refmac_options

def fill_option_menu_with_refmac_methods_options(*args):
  return _coot.fill_option_menu_with_refmac_methods_options(*args)
fill_option_menu_with_refmac_methods_options = _coot.fill_option_menu_with_refmac_methods_options

def fill_option_menu_with_refmac_phase_input_options(*args):
  return _coot.fill_option_menu_with_refmac_phase_input_options(*args)
fill_option_menu_with_refmac_phase_input_options = _coot.fill_option_menu_with_refmac_phase_input_options

def fill_option_menu_with_refmac_labels_options(*args):
  return _coot.fill_option_menu_with_refmac_labels_options(*args)
fill_option_menu_with_refmac_labels_options = _coot.fill_option_menu_with_refmac_labels_options

def fill_option_menu_with_refmac_file_labels_options(*args):
  return _coot.fill_option_menu_with_refmac_file_labels_options(*args)
fill_option_menu_with_refmac_file_labels_options = _coot.fill_option_menu_with_refmac_file_labels_options

def fill_option_menu_with_refmac_ncycle_options(*args):
  return _coot.fill_option_menu_with_refmac_ncycle_options(*args)
fill_option_menu_with_refmac_ncycle_options = _coot.fill_option_menu_with_refmac_ncycle_options

def update_refmac_column_labels_frame(*args):
  return _coot.update_refmac_column_labels_frame(*args)
update_refmac_column_labels_frame = _coot.update_refmac_column_labels_frame

def free_memory_run_refmac(*args):
  return _coot.free_memory_run_refmac(*args)
free_memory_run_refmac = _coot.free_memory_run_refmac

def set_refmac_counter(*args):
  return _coot.set_refmac_counter(*args)
set_refmac_counter = _coot.set_refmac_counter

def refmac_name(*args):
  return _coot.refmac_name(*args)
refmac_name = _coot.refmac_name

def get_refmac_refinement_method():
  return _coot.get_refmac_refinement_method()
get_refmac_refinement_method = _coot.get_refmac_refinement_method

def set_refmac_refinement_method(*args):
  return _coot.set_refmac_refinement_method(*args)
set_refmac_refinement_method = _coot.set_refmac_refinement_method

def get_refmac_phase_input():
  return _coot.get_refmac_phase_input()
get_refmac_phase_input = _coot.get_refmac_phase_input

def set_refmac_phase_input(*args):
  return _coot.set_refmac_phase_input(*args)
set_refmac_phase_input = _coot.set_refmac_phase_input

def set_refmac_use_tls(*args):
  return _coot.set_refmac_use_tls(*args)
set_refmac_use_tls = _coot.set_refmac_use_tls

def refmac_use_tls_state():
  return _coot.refmac_use_tls_state()
refmac_use_tls_state = _coot.refmac_use_tls_state

def set_refmac_use_twin(*args):
  return _coot.set_refmac_use_twin(*args)
set_refmac_use_twin = _coot.set_refmac_use_twin

def refmac_use_twin_state():
  return _coot.refmac_use_twin_state()
refmac_use_twin_state = _coot.refmac_use_twin_state

def set_refmac_use_sad(*args):
  return _coot.set_refmac_use_sad(*args)
set_refmac_use_sad = _coot.set_refmac_use_sad

def refmac_use_sad_state():
  return _coot.refmac_use_sad_state()
refmac_use_sad_state = _coot.refmac_use_sad_state

def get_refmac_ncycles():
  return _coot.get_refmac_ncycles()
get_refmac_ncycles = _coot.get_refmac_ncycles

def set_refmac_ncycles(*args):
  return _coot.set_refmac_ncycles(*args)
set_refmac_ncycles = _coot.set_refmac_ncycles

def add_refmac_ncycle_no(*args):
  return _coot.add_refmac_ncycle_no(*args)
add_refmac_ncycle_no = _coot.add_refmac_ncycle_no

def set_refmac_use_ncs(*args):
  return _coot.set_refmac_use_ncs(*args)
set_refmac_use_ncs = _coot.set_refmac_use_ncs

def refmac_use_ncs_state():
  return _coot.refmac_use_ncs_state()
refmac_use_ncs_state = _coot.refmac_use_ncs_state

def set_refmac_use_intensities(*args):
  return _coot.set_refmac_use_intensities(*args)
set_refmac_use_intensities = _coot.set_refmac_use_intensities

def refmac_use_intensities_state():
  return _coot.refmac_use_intensities_state()
refmac_use_intensities_state = _coot.refmac_use_intensities_state

def refmac_imol_coords():
  return _coot.refmac_imol_coords()
refmac_imol_coords = _coot.refmac_imol_coords

def add_refmac_sad_atom(*args):
  return _coot.add_refmac_sad_atom(*args)
add_refmac_sad_atom = _coot.add_refmac_sad_atom

def add_refmac_sad_atom_fp(*args):
  return _coot.add_refmac_sad_atom_fp(*args)
add_refmac_sad_atom_fp = _coot.add_refmac_sad_atom_fp

def add_refmac_sad_atom_lambda(*args):
  return _coot.add_refmac_sad_atom_lambda(*args)
add_refmac_sad_atom_lambda = _coot.add_refmac_sad_atom_lambda

def clear_refmac_sad_atoms():
  return _coot.clear_refmac_sad_atoms()
clear_refmac_sad_atoms = _coot.clear_refmac_sad_atoms

def store_refmac_mtz_file_label(*args):
  return _coot.store_refmac_mtz_file_label(*args)
store_refmac_mtz_file_label = _coot.store_refmac_mtz_file_label

def get_refmac_mtz_file_label():
  return _coot.get_refmac_mtz_file_label()
get_refmac_mtz_file_label = _coot.get_refmac_mtz_file_label

def fill_refmac_sad_atom_entry(*args):
  return _coot.fill_refmac_sad_atom_entry(*args)
fill_refmac_sad_atom_entry = _coot.fill_refmac_sad_atom_entry

def get_refmac_used_mtz_file_state():
  return _coot.get_refmac_used_mtz_file_state()
get_refmac_used_mtz_file_state = _coot.get_refmac_used_mtz_file_state

def set_refmac_used_mtz_file(*args):
  return _coot.set_refmac_used_mtz_file(*args)
set_refmac_used_mtz_file = _coot.set_refmac_used_mtz_file

def get_saved_refmac_file_filename():
  return _coot.get_saved_refmac_file_filename()
get_saved_refmac_file_filename = _coot.get_saved_refmac_file_filename

def set_stored_refmac_file_mtz_filename(*args):
  return _coot.set_stored_refmac_file_mtz_filename(*args)
set_stored_refmac_file_mtz_filename = _coot.set_stored_refmac_file_mtz_filename

def save_refmac_params_to_map(*args):
  return _coot.save_refmac_params_to_map(*args)
save_refmac_params_to_map = _coot.save_refmac_params_to_map

def save_refmac_phase_params_to_map(*args):
  return _coot.save_refmac_phase_params_to_map(*args)
save_refmac_phase_params_to_map = _coot.save_refmac_phase_params_to_map

def get_refmac_sad_atom_info_py():
  return _coot.get_refmac_sad_atom_info_py()
get_refmac_sad_atom_info_py = _coot.get_refmac_sad_atom_info_py

def swap_map_colours(*args):
  return _coot.swap_map_colours(*args)
swap_map_colours = _coot.swap_map_colours

def set_keep_map_colour_after_refmac(*args):
  return _coot.set_keep_map_colour_after_refmac(*args)
set_keep_map_colour_after_refmac = _coot.set_keep_map_colour_after_refmac

def keep_map_colour_after_refmac_state():
  return _coot.keep_map_colour_after_refmac_state()
keep_map_colour_after_refmac_state = _coot.keep_map_colour_after_refmac_state

def refmac_runs_with_nolabels():
  return _coot.refmac_runs_with_nolabels()
refmac_runs_with_nolabels = _coot.refmac_runs_with_nolabels

def get_text_for_symmetry_size_widget():
  return _coot.get_text_for_symmetry_size_widget()
get_text_for_symmetry_size_widget = _coot.get_text_for_symmetry_size_widget

def set_symmetry_size_from_widget(*args):
  return _coot.set_symmetry_size_from_widget(*args)
set_symmetry_size_from_widget = _coot.set_symmetry_size_from_widget

def set_symmetry_size(*args):
  return _coot.set_symmetry_size(*args)
set_symmetry_size = _coot.set_symmetry_size

def get_symmetry_bonds_colour(*args):
  return _coot.get_symmetry_bonds_colour(*args)
get_symmetry_bonds_colour = _coot.get_symmetry_bonds_colour

def get_show_symmetry():
  return _coot.get_show_symmetry()
get_show_symmetry = _coot.get_show_symmetry

def set_show_symmetry_master(*args):
  return _coot.set_show_symmetry_master(*args)
set_show_symmetry_master = _coot.set_show_symmetry_master

def set_show_symmetry_molecule(*args):
  return _coot.set_show_symmetry_molecule(*args)
set_show_symmetry_molecule = _coot.set_show_symmetry_molecule

def symmetry_as_calphas(*args):
  return _coot.symmetry_as_calphas(*args)
symmetry_as_calphas = _coot.symmetry_as_calphas

def get_symmetry_as_calphas_state(*args):
  return _coot.get_symmetry_as_calphas_state(*args)
get_symmetry_as_calphas_state = _coot.get_symmetry_as_calphas_state

def set_symmetry_molecule_rotate_colour_map(*args):
  return _coot.set_symmetry_molecule_rotate_colour_map(*args)
set_symmetry_molecule_rotate_colour_map = _coot.set_symmetry_molecule_rotate_colour_map

def symmetry_molecule_rotate_colour_map_state(*args):
  return _coot.symmetry_molecule_rotate_colour_map_state(*args)
symmetry_molecule_rotate_colour_map_state = _coot.symmetry_molecule_rotate_colour_map_state

def set_symmetry_colour_by_symop(*args):
  return _coot.set_symmetry_colour_by_symop(*args)
set_symmetry_colour_by_symop = _coot.set_symmetry_colour_by_symop

def set_symmetry_whole_chain(*args):
  return _coot.set_symmetry_whole_chain(*args)
set_symmetry_whole_chain = _coot.set_symmetry_whole_chain

def set_symmetry_atom_labels_expanded(*args):
  return _coot.set_symmetry_atom_labels_expanded(*args)
set_symmetry_atom_labels_expanded = _coot.set_symmetry_atom_labels_expanded

def wrapped_create_show_symmetry_window():
  return _coot.wrapped_create_show_symmetry_window()
wrapped_create_show_symmetry_window = _coot.wrapped_create_show_symmetry_window

def symmetry_colour_adjustment_changed(*args):
  return _coot.symmetry_colour_adjustment_changed(*args)
symmetry_colour_adjustment_changed = _coot.symmetry_colour_adjustment_changed

def symmetry_molecule_controller_dialog():
  return _coot.symmetry_molecule_controller_dialog()
symmetry_molecule_controller_dialog = _coot.symmetry_molecule_controller_dialog

def set_symmetry_controller_dialog_widget(*args):
  return _coot.set_symmetry_controller_dialog_widget(*args)
set_symmetry_controller_dialog_widget = _coot.set_symmetry_controller_dialog_widget

def has_unit_cell_state(*args):
  return _coot.has_unit_cell_state(*args)
has_unit_cell_state = _coot.has_unit_cell_state

def undo_symmetry_view():
  return _coot.undo_symmetry_view()
undo_symmetry_view = _coot.undo_symmetry_view

def first_molecule_with_symmetry_displayed():
  return _coot.first_molecule_with_symmetry_displayed()
first_molecule_with_symmetry_displayed = _coot.first_molecule_with_symmetry_displayed

def save_symmetry_coords(*args):
  return _coot.save_symmetry_coords(*args)
save_symmetry_coords = _coot.save_symmetry_coords

def new_molecule_by_symmetry(*args):
  return _coot.new_molecule_by_symmetry(*args)
new_molecule_by_symmetry = _coot.new_molecule_by_symmetry

def new_molecule_by_symmetry_with_atom_selection(*args):
  return _coot.new_molecule_by_symmetry_with_atom_selection(*args)
new_molecule_by_symmetry_with_atom_selection = _coot.new_molecule_by_symmetry_with_atom_selection

def new_molecule_by_symop(*args):
  return _coot.new_molecule_by_symop(*args)
new_molecule_by_symop = _coot.new_molecule_by_symop

def n_symops(*args):
  return _coot.n_symops(*args)
n_symops = _coot.n_symops

def origin_pre_shift_py(*args):
  return _coot.origin_pre_shift_py(*args)
origin_pre_shift_py = _coot.origin_pre_shift_py

def setup_save_symmetry_coords():
  return _coot.setup_save_symmetry_coords()
setup_save_symmetry_coords = _coot.setup_save_symmetry_coords

def save_symmetry_coords_from_fileselection(*args):
  return _coot.save_symmetry_coords_from_fileselection(*args)
save_symmetry_coords_from_fileselection = _coot.save_symmetry_coords_from_fileselection

def set_space_group(*args):
  return _coot.set_space_group(*args)
set_space_group = _coot.set_space_group

def set_symmetry_shift_search_size(*args):
  return _coot.set_symmetry_shift_search_size(*args)
set_symmetry_shift_search_size = _coot.set_symmetry_shift_search_size

def set_directory_for_fileselection(*args):
  return _coot.set_directory_for_fileselection(*args)
set_directory_for_fileselection = _coot.set_directory_for_fileselection

def save_directory_from_fileselection(*args):
  return _coot.save_directory_from_fileselection(*args)
save_directory_from_fileselection = _coot.save_directory_from_fileselection

def save_directory_for_saving_from_fileselection(*args):
  return _coot.save_directory_for_saving_from_fileselection(*args)
save_directory_for_saving_from_fileselection = _coot.save_directory_for_saving_from_fileselection

def set_file_for_save_fileselection(*args):
  return _coot.set_file_for_save_fileselection(*args)
set_file_for_save_fileselection = _coot.set_file_for_save_fileselection

def set_directory_for_filechooser(*args):
  return _coot.set_directory_for_filechooser(*args)
set_directory_for_filechooser = _coot.set_directory_for_filechooser

def save_directory_from_filechooser(*args):
  return _coot.save_directory_from_filechooser(*args)
save_directory_from_filechooser = _coot.save_directory_from_filechooser

def save_directory_for_saving_from_filechooser(*args):
  return _coot.save_directory_for_saving_from_filechooser(*args)
save_directory_for_saving_from_filechooser = _coot.save_directory_for_saving_from_filechooser

def save_coords_name_suggestion_py(*args):
  return _coot.save_coords_name_suggestion_py(*args)
save_coords_name_suggestion_py = _coot.save_coords_name_suggestion_py

def add_sort_button_fileselection(*args):
  return _coot.add_sort_button_fileselection(*args)
add_sort_button_fileselection = _coot.add_sort_button_fileselection

def add_ccp4i_project_optionmenu(*args):
  return _coot.add_ccp4i_project_optionmenu(*args)
add_ccp4i_project_optionmenu = _coot.add_ccp4i_project_optionmenu

def add_ccp4i_projects_to_optionmenu(*args):
  return _coot.add_ccp4i_projects_to_optionmenu(*args)
add_ccp4i_projects_to_optionmenu = _coot.add_ccp4i_projects_to_optionmenu

def add_ccp4i_project_shortcut(*args):
  return _coot.add_ccp4i_project_shortcut(*args)
add_ccp4i_project_shortcut = _coot.add_ccp4i_project_shortcut

def option_menu_refmac_ccp4i_project_signal_func(*args):
  return _coot.option_menu_refmac_ccp4i_project_signal_func(*args)
option_menu_refmac_ccp4i_project_signal_func = _coot.option_menu_refmac_ccp4i_project_signal_func

def run_refmac_ccp4i_option_menu_signal_func(*args):
  return _coot.run_refmac_ccp4i_option_menu_signal_func(*args)
run_refmac_ccp4i_option_menu_signal_func = _coot.run_refmac_ccp4i_option_menu_signal_func

def clear_refmac_ccp4i_project():
  return _coot.clear_refmac_ccp4i_project()
clear_refmac_ccp4i_project = _coot.clear_refmac_ccp4i_project

def lookup_file_selection_widgets(*args):
  return _coot.lookup_file_selection_widgets(*args)
lookup_file_selection_widgets = _coot.lookup_file_selection_widgets

def fileselection_sort_button_clicked(*args):
  return _coot.fileselection_sort_button_clicked(*args)
fileselection_sort_button_clicked = _coot.fileselection_sort_button_clicked

def push_the_buttons_on_fileselection(*args):
  return _coot.push_the_buttons_on_fileselection(*args)
push_the_buttons_on_fileselection = _coot.push_the_buttons_on_fileselection

def print_all_history_in_scheme():
  return _coot.print_all_history_in_scheme()
print_all_history_in_scheme = _coot.print_all_history_in_scheme

def print_all_history_in_python():
  return _coot.print_all_history_in_python()
print_all_history_in_python = _coot.print_all_history_in_python

def set_console_display_commands_state(*args):
  return _coot.set_console_display_commands_state(*args)
set_console_display_commands_state = _coot.set_console_display_commands_state

def set_console_display_commands_hilights(*args):
  return _coot.set_console_display_commands_hilights(*args)
set_console_display_commands_hilights = _coot.set_console_display_commands_hilights

def save_state():
  return _coot.save_state()
save_state = _coot.save_state

def save_state_file(*args):
  return _coot.save_state_file(*args)
save_state_file = _coot.save_state_file

def set_save_state_file_name(*args):
  return _coot.set_save_state_file_name(*args)
set_save_state_file_name = _coot.set_save_state_file_name

def save_state_file_name_py():
  return _coot.save_state_file_name_py()
save_state_file_name_py = _coot.save_state_file_name_py

def save_state_file_name_raw():
  return _coot.save_state_file_name_raw()
save_state_file_name_raw = _coot.save_state_file_name_raw

def set_run_state_file_status(*args):
  return _coot.set_run_state_file_status(*args)
set_run_state_file_status = _coot.set_run_state_file_status

def run_state_file():
  return _coot.run_state_file()
run_state_file = _coot.run_state_file

def run_state_file_py():
  return _coot.run_state_file_py()
run_state_file_py = _coot.run_state_file_py

def run_state_file_maybe():
  return _coot.run_state_file_maybe()
run_state_file_maybe = _coot.run_state_file_maybe

def wrapped_create_run_state_file_dialog():
  return _coot.wrapped_create_run_state_file_dialog()
wrapped_create_run_state_file_dialog = _coot.wrapped_create_run_state_file_dialog

def wrapped_create_run_state_file_dialog_py():
  return _coot.wrapped_create_run_state_file_dialog_py()
wrapped_create_run_state_file_dialog_py = _coot.wrapped_create_run_state_file_dialog_py
VT_FLAT = _coot.VT_FLAT
VT_SPHERICAL = _coot.VT_SPHERICAL

def vt_surface(*args):
  return _coot.vt_surface(*args)
vt_surface = _coot.vt_surface

def vt_surface_status():
  return _coot.vt_surface_status()
vt_surface_status = _coot.vt_surface_status

def do_clipping1_activate():
  return _coot.do_clipping1_activate()
do_clipping1_activate = _coot.do_clipping1_activate

def clipping_adjustment_changed(*args):
  return _coot.clipping_adjustment_changed(*args)
clipping_adjustment_changed = _coot.clipping_adjustment_changed

def set_clipping_back(*args):
  return _coot.set_clipping_back(*args)
set_clipping_back = _coot.set_clipping_back

def set_clipping_front(*args):
  return _coot.set_clipping_front(*args)
set_clipping_front = _coot.set_clipping_front

def get_show_unit_cell(*args):
  return _coot.get_show_unit_cell(*args)
get_show_unit_cell = _coot.get_show_unit_cell

def set_show_unit_cells_all(*args):
  return _coot.set_show_unit_cells_all(*args)
set_show_unit_cells_all = _coot.set_show_unit_cells_all

def set_show_unit_cell(*args):
  return _coot.set_show_unit_cell(*args)
set_show_unit_cell = _coot.set_show_unit_cell

def set_unit_cell_colour(*args):
  return _coot.set_unit_cell_colour(*args)
set_unit_cell_colour = _coot.set_unit_cell_colour

def set_symmetry_colour_merge(*args):
  return _coot.set_symmetry_colour_merge(*args)
set_symmetry_colour_merge = _coot.set_symmetry_colour_merge

def set_colour_map_rotation_on_read_pdb(*args):
  return _coot.set_colour_map_rotation_on_read_pdb(*args)
set_colour_map_rotation_on_read_pdb = _coot.set_colour_map_rotation_on_read_pdb

def set_colour_map_rotation_on_read_pdb_flag(*args):
  return _coot.set_colour_map_rotation_on_read_pdb_flag(*args)
set_colour_map_rotation_on_read_pdb_flag = _coot.set_colour_map_rotation_on_read_pdb_flag

def set_colour_map_rotation_on_read_pdb_c_only_flag(*args):
  return _coot.set_colour_map_rotation_on_read_pdb_c_only_flag(*args)
set_colour_map_rotation_on_read_pdb_c_only_flag = _coot.set_colour_map_rotation_on_read_pdb_c_only_flag

def set_colour_by_chain(*args):
  return _coot.set_colour_by_chain(*args)
set_colour_by_chain = _coot.set_colour_by_chain

def set_colour_by_molecule(*args):
  return _coot.set_colour_by_molecule(*args)
set_colour_by_molecule = _coot.set_colour_by_molecule

def get_colour_map_rotation_on_read_pdb_c_only_flag():
  return _coot.get_colour_map_rotation_on_read_pdb_c_only_flag()
get_colour_map_rotation_on_read_pdb_c_only_flag = _coot.get_colour_map_rotation_on_read_pdb_c_only_flag

def set_symmetry_colour(*args):
  return _coot.set_symmetry_colour(*args)
set_symmetry_colour = _coot.set_symmetry_colour

def set_colour_map_rotation_for_map(*args):
  return _coot.set_colour_map_rotation_for_map(*args)
set_colour_map_rotation_for_map = _coot.set_colour_map_rotation_for_map

def wrapped_create_coords_colour_control_dialog():
  return _coot.wrapped_create_coords_colour_control_dialog()
wrapped_create_coords_colour_control_dialog = _coot.wrapped_create_coords_colour_control_dialog

def set_molecule_bonds_colour_map_rotation(*args):
  return _coot.set_molecule_bonds_colour_map_rotation(*args)
set_molecule_bonds_colour_map_rotation = _coot.set_molecule_bonds_colour_map_rotation

def get_molecule_bonds_colour_map_rotation(*args):
  return _coot.get_molecule_bonds_colour_map_rotation(*args)
get_molecule_bonds_colour_map_rotation = _coot.get_molecule_bonds_colour_map_rotation

def get_limit_aniso():
  return _coot.get_limit_aniso()
get_limit_aniso = _coot.get_limit_aniso

def get_show_limit_aniso():
  return _coot.get_show_limit_aniso()
get_show_limit_aniso = _coot.get_show_limit_aniso

def get_show_aniso():
  return _coot.get_show_aniso()
get_show_aniso = _coot.get_show_aniso

def set_limit_aniso(*args):
  return _coot.set_limit_aniso(*args)
set_limit_aniso = _coot.set_limit_aniso

def set_aniso_limit_size_from_widget(*args):
  return _coot.set_aniso_limit_size_from_widget(*args)
set_aniso_limit_size_from_widget = _coot.set_aniso_limit_size_from_widget

def set_show_aniso(*args):
  return _coot.set_show_aniso(*args)
set_show_aniso = _coot.set_show_aniso

def get_text_for_aniso_limit_radius_entry():
  return _coot.get_text_for_aniso_limit_radius_entry()
get_text_for_aniso_limit_radius_entry = _coot.get_text_for_aniso_limit_radius_entry

def set_aniso_probability(*args):
  return _coot.set_aniso_probability(*args)
set_aniso_probability = _coot.set_aniso_probability

def get_aniso_probability():
  return _coot.get_aniso_probability()
get_aniso_probability = _coot.get_aniso_probability

def set_graphics_window_size(*args):
  return _coot.set_graphics_window_size(*args)
set_graphics_window_size = _coot.set_graphics_window_size

def set_graphics_window_position(*args):
  return _coot.set_graphics_window_position(*args)
set_graphics_window_position = _coot.set_graphics_window_position

def store_graphics_window_position(*args):
  return _coot.store_graphics_window_position(*args)
store_graphics_window_position = _coot.store_graphics_window_position

def store_window_position(*args):
  return _coot.store_window_position(*args)
store_window_position = _coot.store_window_position

def store_window_size(*args):
  return _coot.store_window_size(*args)
store_window_size = _coot.store_window_size

def graphics_draw():
  return _coot.graphics_draw()
graphics_draw = _coot.graphics_draw

def zalman_stereo_mode():
  return _coot.zalman_stereo_mode()
zalman_stereo_mode = _coot.zalman_stereo_mode

def hardware_stereo_mode():
  return _coot.hardware_stereo_mode()
hardware_stereo_mode = _coot.hardware_stereo_mode

def stereo_mode_state():
  return _coot.stereo_mode_state()
stereo_mode_state = _coot.stereo_mode_state

def mono_mode():
  return _coot.mono_mode()
mono_mode = _coot.mono_mode

def side_by_side_stereo_mode(*args):
  return _coot.side_by_side_stereo_mode(*args)
side_by_side_stereo_mode = _coot.side_by_side_stereo_mode

def set_dti_stereo_mode(*args):
  return _coot.set_dti_stereo_mode(*args)
set_dti_stereo_mode = _coot.set_dti_stereo_mode

def set_hardware_stereo_angle_factor(*args):
  return _coot.set_hardware_stereo_angle_factor(*args)
set_hardware_stereo_angle_factor = _coot.set_hardware_stereo_angle_factor

def hardware_stereo_angle_factor_state():
  return _coot.hardware_stereo_angle_factor_state()
hardware_stereo_angle_factor_state = _coot.hardware_stereo_angle_factor_state

def set_model_fit_refine_dialog_position(*args):
  return _coot.set_model_fit_refine_dialog_position(*args)
set_model_fit_refine_dialog_position = _coot.set_model_fit_refine_dialog_position

def set_display_control_dialog_position(*args):
  return _coot.set_display_control_dialog_position(*args)
set_display_control_dialog_position = _coot.set_display_control_dialog_position

def set_go_to_atom_window_position(*args):
  return _coot.set_go_to_atom_window_position(*args)
set_go_to_atom_window_position = _coot.set_go_to_atom_window_position

def set_delete_dialog_position(*args):
  return _coot.set_delete_dialog_position(*args)
set_delete_dialog_position = _coot.set_delete_dialog_position

def set_rotate_translate_dialog_position(*args):
  return _coot.set_rotate_translate_dialog_position(*args)
set_rotate_translate_dialog_position = _coot.set_rotate_translate_dialog_position

def set_accept_reject_dialog_position(*args):
  return _coot.set_accept_reject_dialog_position(*args)
set_accept_reject_dialog_position = _coot.set_accept_reject_dialog_position

def set_ramachandran_plot_dialog_position(*args):
  return _coot.set_ramachandran_plot_dialog_position(*args)
set_ramachandran_plot_dialog_position = _coot.set_ramachandran_plot_dialog_position

def set_edit_chi_angles_dialog_position(*args):
  return _coot.set_edit_chi_angles_dialog_position(*args)
set_edit_chi_angles_dialog_position = _coot.set_edit_chi_angles_dialog_position

def set_rotamer_selection_dialog_position(*args):
  return _coot.set_rotamer_selection_dialog_position(*args)
set_rotamer_selection_dialog_position = _coot.set_rotamer_selection_dialog_position

def set_smooth_scroll_flag(*args):
  return _coot.set_smooth_scroll_flag(*args)
set_smooth_scroll_flag = _coot.set_smooth_scroll_flag

def get_smooth_scroll():
  return _coot.get_smooth_scroll()
get_smooth_scroll = _coot.get_smooth_scroll

def set_smooth_scroll_steps_str(*args):
  return _coot.set_smooth_scroll_steps_str(*args)
set_smooth_scroll_steps_str = _coot.set_smooth_scroll_steps_str

def set_smooth_scroll_steps(*args):
  return _coot.set_smooth_scroll_steps(*args)
set_smooth_scroll_steps = _coot.set_smooth_scroll_steps

def get_text_for_smooth_scroll_steps():
  return _coot.get_text_for_smooth_scroll_steps()
get_text_for_smooth_scroll_steps = _coot.get_text_for_smooth_scroll_steps

def set_smooth_scroll_limit_str(*args):
  return _coot.set_smooth_scroll_limit_str(*args)
set_smooth_scroll_limit_str = _coot.set_smooth_scroll_limit_str

def set_smooth_scroll_limit(*args):
  return _coot.set_smooth_scroll_limit(*args)
set_smooth_scroll_limit = _coot.set_smooth_scroll_limit

def get_text_for_smooth_scroll_limit():
  return _coot.get_text_for_smooth_scroll_limit()
get_text_for_smooth_scroll_limit = _coot.get_text_for_smooth_scroll_limit

def set_font_size(*args):
  return _coot.set_font_size(*args)
set_font_size = _coot.set_font_size

def get_font_size():
  return _coot.get_font_size()
get_font_size = _coot.get_font_size

def set_font_colour(*args):
  return _coot.set_font_colour(*args)
set_font_colour = _coot.set_font_colour

def set_rotation_centre_size_from_widget(*args):
  return _coot.set_rotation_centre_size_from_widget(*args)
set_rotation_centre_size_from_widget = _coot.set_rotation_centre_size_from_widget

def set_rotation_centre_size(*args):
  return _coot.set_rotation_centre_size(*args)
set_rotation_centre_size = _coot.set_rotation_centre_size

def get_text_for_rotation_centre_cube_size():
  return _coot.get_text_for_rotation_centre_cube_size()
get_text_for_rotation_centre_cube_size = _coot.get_text_for_rotation_centre_cube_size

def recentre_on_read_pdb():
  return _coot.recentre_on_read_pdb()
recentre_on_read_pdb = _coot.recentre_on_read_pdb

def set_recentre_on_read_pdb(*args):
  return _coot.set_recentre_on_read_pdb(*args)
set_recentre_on_read_pdb = _coot.set_recentre_on_read_pdb

def set_rotation_centre(*args):
  return _coot.set_rotation_centre(*args)
set_rotation_centre = _coot.set_rotation_centre

def set_rotation_centre_internal(*args):
  return _coot.set_rotation_centre_internal(*args)
set_rotation_centre_internal = _coot.set_rotation_centre_internal

def rotation_centre_position(*args):
  return _coot.rotation_centre_position(*args)
rotation_centre_position = _coot.rotation_centre_position

def go_to_ligand():
  return _coot.go_to_ligand()
go_to_ligand = _coot.go_to_ligand

def set_go_to_ligand_n_atoms_limit(*args):
  return _coot.set_go_to_ligand_n_atoms_limit(*args)
set_go_to_ligand_n_atoms_limit = _coot.set_go_to_ligand_n_atoms_limit

def set_draw_axes(*args):
  return _coot.set_draw_axes(*args)
set_draw_axes = _coot.set_draw_axes

def atom_index(*args):
  return _coot.atom_index(*args)
atom_index = _coot.atom_index

def atom_index_full(*args):
  return _coot.atom_index_full(*args)
atom_index_full = _coot.atom_index_full

def atom_index_first_atom_in_residue(*args):
  return _coot.atom_index_first_atom_in_residue(*args)
atom_index_first_atom_in_residue = _coot.atom_index_first_atom_in_residue

def atom_index_first_atom_in_residue_with_altconf(*args):
  return _coot.atom_index_first_atom_in_residue_with_altconf(*args)
atom_index_first_atom_in_residue_with_altconf = _coot.atom_index_first_atom_in_residue_with_altconf

def median_temperature_factor(*args):
  return _coot.median_temperature_factor(*args)
median_temperature_factor = _coot.median_temperature_factor

def average_temperature_factor(*args):
  return _coot.average_temperature_factor(*args)
average_temperature_factor = _coot.average_temperature_factor

def standard_deviation_temperature_factor(*args):
  return _coot.standard_deviation_temperature_factor(*args)
standard_deviation_temperature_factor = _coot.standard_deviation_temperature_factor

def clear_pending_picks():
  return _coot.clear_pending_picks()
clear_pending_picks = _coot.clear_pending_picks

def centre_of_mass_string(*args):
  return _coot.centre_of_mass_string(*args)
centre_of_mass_string = _coot.centre_of_mass_string

def centre_of_mass_string_py(*args):
  return _coot.centre_of_mass_string_py(*args)
centre_of_mass_string_py = _coot.centre_of_mass_string_py

def set_default_temperature_factor_for_new_atoms(*args):
  return _coot.set_default_temperature_factor_for_new_atoms(*args)
set_default_temperature_factor_for_new_atoms = _coot.set_default_temperature_factor_for_new_atoms

def default_new_atoms_b_factor():
  return _coot.default_new_atoms_b_factor()
default_new_atoms_b_factor = _coot.default_new_atoms_b_factor

def set_reset_b_factor_moved_atoms(*args):
  return _coot.set_reset_b_factor_moved_atoms(*args)
set_reset_b_factor_moved_atoms = _coot.set_reset_b_factor_moved_atoms

def get_reset_b_factor_moved_atoms_state():
  return _coot.get_reset_b_factor_moved_atoms_state()
get_reset_b_factor_moved_atoms_state = _coot.get_reset_b_factor_moved_atoms_state

def set_atom_attribute(*args):
  return _coot.set_atom_attribute(*args)
set_atom_attribute = _coot.set_atom_attribute

def set_atom_string_attribute(*args):
  return _coot.set_atom_string_attribute(*args)
set_atom_string_attribute = _coot.set_atom_string_attribute

def set_atom_attributes_py(*args):
  return _coot.set_atom_attributes_py(*args)
set_atom_attributes_py = _coot.set_atom_attributes_py

def set_residue_name(*args):
  return _coot.set_residue_name(*args)
set_residue_name = _coot.set_residue_name

def skel_greer_on():
  return _coot.skel_greer_on()
skel_greer_on = _coot.skel_greer_on

def skel_greer_off():
  return _coot.skel_greer_off()
skel_greer_off = _coot.skel_greer_off

def skel_foadi_on():
  return _coot.skel_foadi_on()
skel_foadi_on = _coot.skel_foadi_on

def skel_foadi_off():
  return _coot.skel_foadi_off()
skel_foadi_off = _coot.skel_foadi_off

def skeletonize_map_by_optionmenu(*args):
  return _coot.skeletonize_map_by_optionmenu(*args)
skeletonize_map_by_optionmenu = _coot.skeletonize_map_by_optionmenu

def skeletonize_map_single_map_maybe(*args):
  return _coot.skeletonize_map_single_map_maybe(*args)
skeletonize_map_single_map_maybe = _coot.skeletonize_map_single_map_maybe

def wrapped_create_skeleton_dialog():
  return _coot.wrapped_create_skeleton_dialog()
wrapped_create_skeleton_dialog = _coot.wrapped_create_skeleton_dialog

def skeletonize_map(*args):
  return _coot.skeletonize_map(*args)
skeletonize_map = _coot.skeletonize_map

def unskeletonize_map(*args):
  return _coot.unskeletonize_map(*args)
unskeletonize_map = _coot.unskeletonize_map

def set_initial_map_for_skeletonize():
  return _coot.set_initial_map_for_skeletonize()
set_initial_map_for_skeletonize = _coot.set_initial_map_for_skeletonize

def set_max_skeleton_search_depth(*args):
  return _coot.set_max_skeleton_search_depth(*args)
set_max_skeleton_search_depth = _coot.set_max_skeleton_search_depth

def set_on_off_skeleton_radio_buttons(*args):
  return _coot.set_on_off_skeleton_radio_buttons(*args)
set_on_off_skeleton_radio_buttons = _coot.set_on_off_skeleton_radio_buttons

def set_on_off_single_map_skeleton_radio_buttons(*args):
  return _coot.set_on_off_single_map_skeleton_radio_buttons(*args)
set_on_off_single_map_skeleton_radio_buttons = _coot.set_on_off_single_map_skeleton_radio_buttons

def get_text_for_skeletonization_level_entry():
  return _coot.get_text_for_skeletonization_level_entry()
get_text_for_skeletonization_level_entry = _coot.get_text_for_skeletonization_level_entry

def set_skeletonization_level_from_widget(*args):
  return _coot.set_skeletonization_level_from_widget(*args)
set_skeletonization_level_from_widget = _coot.set_skeletonization_level_from_widget

def get_text_for_skeleton_box_size_entry():
  return _coot.get_text_for_skeleton_box_size_entry()
get_text_for_skeleton_box_size_entry = _coot.get_text_for_skeleton_box_size_entry

def set_skeleton_box_size_from_widget(*args):
  return _coot.set_skeleton_box_size_from_widget(*args)
set_skeleton_box_size_from_widget = _coot.set_skeleton_box_size_from_widget

def set_skeleton_box_size(*args):
  return _coot.set_skeleton_box_size(*args)
set_skeleton_box_size = _coot.set_skeleton_box_size

def handle_skeleton_colour_change(*args):
  return _coot.handle_skeleton_colour_change(*args)
handle_skeleton_colour_change = _coot.handle_skeleton_colour_change

def set_skeleton_colour(*args):
  return _coot.set_skeleton_colour(*args)
set_skeleton_colour = _coot.set_skeleton_colour

def get_skeleton_colour():
  return _coot.get_skeleton_colour()
get_skeleton_colour = _coot.get_skeleton_colour

def handle_read_ccp4_map(*args):
  return _coot.handle_read_ccp4_map(*args)
handle_read_ccp4_map = _coot.handle_read_ccp4_map

def save_coordinates_using_widget(*args):
  return _coot.save_coordinates_using_widget(*args)
save_coordinates_using_widget = _coot.save_coordinates_using_widget

def save_coordinates(*args):
  return _coot.save_coordinates(*args)
save_coordinates = _coot.save_coordinates

def set_save_coordinates_in_original_directory(*args):
  return _coot.set_save_coordinates_in_original_directory(*args)
set_save_coordinates_in_original_directory = _coot.set_save_coordinates_in_original_directory

def save_molecule_coords_button_select(*args):
  return _coot.save_molecule_coords_button_select(*args)
save_molecule_coords_button_select = _coot.save_molecule_coords_button_select

def save_molecule_number_from_option_menu():
  return _coot.save_molecule_number_from_option_menu()
save_molecule_number_from_option_menu = _coot.save_molecule_number_from_option_menu

def set_save_molecule_number(*args):
  return _coot.set_save_molecule_number(*args)
set_save_molecule_number = _coot.set_save_molecule_number

def read_phs_and_coords_and_make_map(*args):
  return _coot.read_phs_and_coords_and_make_map(*args)
read_phs_and_coords_and_make_map = _coot.read_phs_and_coords_and_make_map

def read_phs_and_make_map_using_cell_symm_from_previous_mol(*args):
  return _coot.read_phs_and_make_map_using_cell_symm_from_previous_mol(*args)
read_phs_and_make_map_using_cell_symm_from_previous_mol = _coot.read_phs_and_make_map_using_cell_symm_from_previous_mol

def read_phs_and_make_map_using_cell_symm_from_mol(*args):
  return _coot.read_phs_and_make_map_using_cell_symm_from_mol(*args)
read_phs_and_make_map_using_cell_symm_from_mol = _coot.read_phs_and_make_map_using_cell_symm_from_mol

def read_phs_and_make_map_using_cell_symm_from_mol_using_implicit_phs_filename(*args):
  return _coot.read_phs_and_make_map_using_cell_symm_from_mol_using_implicit_phs_filename(*args)
read_phs_and_make_map_using_cell_symm_from_mol_using_implicit_phs_filename = _coot.read_phs_and_make_map_using_cell_symm_from_mol_using_implicit_phs_filename

def read_phs_and_make_map_using_cell_symm(*args):
  return _coot.read_phs_and_make_map_using_cell_symm(*args)
read_phs_and_make_map_using_cell_symm = _coot.read_phs_and_make_map_using_cell_symm

def read_phs_and_make_map_with_reso_limits(*args):
  return _coot.read_phs_and_make_map_with_reso_limits(*args)
read_phs_and_make_map_with_reso_limits = _coot.read_phs_and_make_map_with_reso_limits

def graphics_store_phs_filename(*args):
  return _coot.graphics_store_phs_filename(*args)
graphics_store_phs_filename = _coot.graphics_store_phs_filename

def graphics_get_phs_filename():
  return _coot.graphics_get_phs_filename()
graphics_get_phs_filename = _coot.graphics_get_phs_filename

def possible_cell_symm_for_phs_file():
  return _coot.possible_cell_symm_for_phs_file()
possible_cell_symm_for_phs_file = _coot.possible_cell_symm_for_phs_file

def get_text_for_phs_cell_chooser(*args):
  return _coot.get_text_for_phs_cell_chooser(*args)
get_text_for_phs_cell_chooser = _coot.get_text_for_phs_cell_chooser

def undo_last_move():
  return _coot.undo_last_move()
undo_last_move = _coot.undo_last_move

def translate_molecule_by(*args):
  return _coot.translate_molecule_by(*args)
translate_molecule_by = _coot.translate_molecule_by

def transform_molecule_by(*args):
  return _coot.transform_molecule_by(*args)
transform_molecule_by = _coot.transform_molecule_by

def transform_zone(*args):
  return _coot.transform_zone(*args)
transform_zone = _coot.transform_zone

def wrapped_create_goto_atom_window():
  return _coot.wrapped_create_goto_atom_window()
wrapped_create_goto_atom_window = _coot.wrapped_create_goto_atom_window

def post_go_to_atom_window():
  return _coot.post_go_to_atom_window()
post_go_to_atom_window = _coot.post_go_to_atom_window

def fill_go_to_atom_window(*args):
  return _coot.fill_go_to_atom_window(*args)
fill_go_to_atom_window = _coot.fill_go_to_atom_window

def go_to_atom_molecule_number():
  return _coot.go_to_atom_molecule_number()
go_to_atom_molecule_number = _coot.go_to_atom_molecule_number

def go_to_atom_chain_id():
  return _coot.go_to_atom_chain_id()
go_to_atom_chain_id = _coot.go_to_atom_chain_id

def go_to_atom_atom_name():
  return _coot.go_to_atom_atom_name()
go_to_atom_atom_name = _coot.go_to_atom_atom_name

def go_to_atom_residue_number():
  return _coot.go_to_atom_residue_number()
go_to_atom_residue_number = _coot.go_to_atom_residue_number

def go_to_atom_ins_code():
  return _coot.go_to_atom_ins_code()
go_to_atom_ins_code = _coot.go_to_atom_ins_code

def go_to_atom_alt_conf():
  return _coot.go_to_atom_alt_conf()
go_to_atom_alt_conf = _coot.go_to_atom_alt_conf

def set_go_to_atom_chain_residue_atom_name(*args):
  return _coot.set_go_to_atom_chain_residue_atom_name(*args)
set_go_to_atom_chain_residue_atom_name = _coot.set_go_to_atom_chain_residue_atom_name

def set_go_to_atom_chain_residue_atom_name_full(*args):
  return _coot.set_go_to_atom_chain_residue_atom_name_full(*args)
set_go_to_atom_chain_residue_atom_name_full = _coot.set_go_to_atom_chain_residue_atom_name_full

def set_go_to_atom_chain_residue_atom_name_no_redraw(*args):
  return _coot.set_go_to_atom_chain_residue_atom_name_no_redraw(*args)
set_go_to_atom_chain_residue_atom_name_no_redraw = _coot.set_go_to_atom_chain_residue_atom_name_no_redraw

def set_go_to_atom_chain_residue_atom_name_strings(*args):
  return _coot.set_go_to_atom_chain_residue_atom_name_strings(*args)
set_go_to_atom_chain_residue_atom_name_strings = _coot.set_go_to_atom_chain_residue_atom_name_strings

def goto_next_atom_maybe_new(*args):
  return _coot.goto_next_atom_maybe_new(*args)
goto_next_atom_maybe_new = _coot.goto_next_atom_maybe_new

def goto_previous_atom_maybe_new(*args):
  return _coot.goto_previous_atom_maybe_new(*args)
goto_previous_atom_maybe_new = _coot.goto_previous_atom_maybe_new

def update_go_to_atom_from_current_position():
  return _coot.update_go_to_atom_from_current_position()
update_go_to_atom_from_current_position = _coot.update_go_to_atom_from_current_position

def apply_go_to_atom_values(*args):
  return _coot.apply_go_to_atom_values(*args)
apply_go_to_atom_values = _coot.apply_go_to_atom_values

def update_go_to_atom_residue_list(*args):
  return _coot.update_go_to_atom_residue_list(*args)
update_go_to_atom_residue_list = _coot.update_go_to_atom_residue_list

def atom_spec_to_atom_index(*args):
  return _coot.atom_spec_to_atom_index(*args)
atom_spec_to_atom_index = _coot.atom_spec_to_atom_index

def full_atom_spec_to_atom_index(*args):
  return _coot.full_atom_spec_to_atom_index(*args)
full_atom_spec_to_atom_index = _coot.full_atom_spec_to_atom_index

def update_go_to_atom_window_on_changed_mol(*args):
  return _coot.update_go_to_atom_window_on_changed_mol(*args)
update_go_to_atom_window_on_changed_mol = _coot.update_go_to_atom_window_on_changed_mol

def update_go_to_atom_window_on_new_mol():
  return _coot.update_go_to_atom_window_on_new_mol()
update_go_to_atom_window_on_new_mol = _coot.update_go_to_atom_window_on_new_mol

def update_go_to_atom_window_on_other_molecule_chosen(*args):
  return _coot.update_go_to_atom_window_on_other_molecule_chosen(*args)
update_go_to_atom_window_on_other_molecule_chosen = _coot.update_go_to_atom_window_on_other_molecule_chosen

def set_go_to_atom_molecule(*args):
  return _coot.set_go_to_atom_molecule(*args)
set_go_to_atom_molecule = _coot.set_go_to_atom_molecule

def go_to_atom_molecule_optionmenu_active_molecule(*args):
  return _coot.go_to_atom_molecule_optionmenu_active_molecule(*args)
go_to_atom_molecule_optionmenu_active_molecule = _coot.go_to_atom_molecule_optionmenu_active_molecule

def save_go_to_atom_widget(*args):
  return _coot.save_go_to_atom_widget(*args)
save_go_to_atom_widget = _coot.save_go_to_atom_widget

def unset_go_to_atom_widget():
  return _coot.unset_go_to_atom_widget()
unset_go_to_atom_widget = _coot.unset_go_to_atom_widget

def clear_atom_list(*args):
  return _coot.clear_atom_list(*args)
clear_atom_list = _coot.clear_atom_list

def apply_go_to_atom_from_widget(*args):
  return _coot.apply_go_to_atom_from_widget(*args)
apply_go_to_atom_from_widget = _coot.apply_go_to_atom_from_widget

def on_go_to_atom_residue_list_select_child(*args):
  return _coot.on_go_to_atom_residue_list_select_child(*args)
on_go_to_atom_residue_list_select_child = _coot.on_go_to_atom_residue_list_select_child

def autobuild_ca_off():
  return _coot.autobuild_ca_off()
autobuild_ca_off = _coot.autobuild_ca_off

def test_fragment():
  return _coot.test_fragment()
test_fragment = _coot.test_fragment

def do_skeleton_prune():
  return _coot.do_skeleton_prune()
do_skeleton_prune = _coot.do_skeleton_prune

def test_function(*args):
  return _coot.test_function(*args)
test_function = _coot.test_function

def test_function_py(*args):
  return _coot.test_function_py(*args)
test_function_py = _coot.test_function_py

def glyco_tree_test():
  return _coot.glyco_tree_test()
glyco_tree_test = _coot.glyco_tree_test

def save_display_control_widget_in_graphics(*args):
  return _coot.save_display_control_widget_in_graphics(*args)
save_display_control_widget_in_graphics = _coot.save_display_control_widget_in_graphics

def wrapped_create_display_control_window():
  return _coot.wrapped_create_display_control_window()
wrapped_create_display_control_window = _coot.wrapped_create_display_control_window

def post_display_control_window():
  return _coot.post_display_control_window()
post_display_control_window = _coot.post_display_control_window

def add_map_display_control_widgets():
  return _coot.add_map_display_control_widgets()
add_map_display_control_widgets = _coot.add_map_display_control_widgets

def add_mol_display_control_widgets():
  return _coot.add_mol_display_control_widgets()
add_mol_display_control_widgets = _coot.add_mol_display_control_widgets

def add_map_and_mol_display_control_widgets():
  return _coot.add_map_and_mol_display_control_widgets()
add_map_and_mol_display_control_widgets = _coot.add_map_and_mol_display_control_widgets

def reset_graphics_display_control_window():
  return _coot.reset_graphics_display_control_window()
reset_graphics_display_control_window = _coot.reset_graphics_display_control_window

def close_graphics_display_control_window():
  return _coot.close_graphics_display_control_window()
close_graphics_display_control_window = _coot.close_graphics_display_control_window

def set_map_displayed(*args):
  return _coot.set_map_displayed(*args)
set_map_displayed = _coot.set_map_displayed

def set_mol_displayed(*args):
  return _coot.set_mol_displayed(*args)
set_mol_displayed = _coot.set_mol_displayed

def set_mol_active(*args):
  return _coot.set_mol_active(*args)
set_mol_active = _coot.set_mol_active

def display_maps_py(*args):
  return _coot.display_maps_py(*args)
display_maps_py = _coot.display_maps_py

def mol_is_displayed(*args):
  return _coot.mol_is_displayed(*args)
mol_is_displayed = _coot.mol_is_displayed

def mol_is_active(*args):
  return _coot.mol_is_active(*args)
mol_is_active = _coot.mol_is_active

def map_is_displayed(*args):
  return _coot.map_is_displayed(*args)
map_is_displayed = _coot.map_is_displayed

def set_all_maps_displayed(*args):
  return _coot.set_all_maps_displayed(*args)
set_all_maps_displayed = _coot.set_all_maps_displayed

def set_all_models_displayed_and_active(*args):
  return _coot.set_all_models_displayed_and_active(*args)
set_all_models_displayed_and_active = _coot.set_all_models_displayed_and_active

def space_group_py(*args):
  return _coot.space_group_py(*args)
space_group_py = _coot.space_group_py

def show_spacegroup(*args):
  return _coot.show_spacegroup(*args)
show_spacegroup = _coot.show_spacegroup

def symmetry_operators_py(*args):
  return _coot.symmetry_operators_py(*args)
symmetry_operators_py = _coot.symmetry_operators_py

def symmetry_operators_to_xHM_py(*args):
  return _coot.symmetry_operators_to_xHM_py(*args)
symmetry_operators_to_xHM_py = _coot.symmetry_operators_to_xHM_py

def wrapped_create_merge_molecules_dialog():
  return _coot.wrapped_create_merge_molecules_dialog()
wrapped_create_merge_molecules_dialog = _coot.wrapped_create_merge_molecules_dialog

def do_merge_molecules_gui():
  return _coot.do_merge_molecules_gui()
do_merge_molecules_gui = _coot.do_merge_molecules_gui

def do_merge_molecules(*args):
  return _coot.do_merge_molecules(*args)
do_merge_molecules = _coot.do_merge_molecules

def fill_vbox_with_coordinates_options(*args):
  return _coot.fill_vbox_with_coordinates_options(*args)
fill_vbox_with_coordinates_options = _coot.fill_vbox_with_coordinates_options

def merge_molecules_menu_item_activate(*args):
  return _coot.merge_molecules_menu_item_activate(*args)
merge_molecules_menu_item_activate = _coot.merge_molecules_menu_item_activate

def on_merge_molecules_check_button_toggled(*args):
  return _coot.on_merge_molecules_check_button_toggled(*args)
on_merge_molecules_check_button_toggled = _coot.on_merge_molecules_check_button_toggled

def merge_molecules_py(*args):
  return _coot.merge_molecules_py(*args)
merge_molecules_py = _coot.merge_molecules_py

def wrapped_create_mutate_sequence_dialog():
  return _coot.wrapped_create_mutate_sequence_dialog()
wrapped_create_mutate_sequence_dialog = _coot.wrapped_create_mutate_sequence_dialog

def do_mutate_sequence(*args):
  return _coot.do_mutate_sequence(*args)
do_mutate_sequence = _coot.do_mutate_sequence

def mutate_sequence_molecule_menu_item_activate(*args):
  return _coot.mutate_sequence_molecule_menu_item_activate(*args)
mutate_sequence_molecule_menu_item_activate = _coot.mutate_sequence_molecule_menu_item_activate

def mutate_sequence_chain_option_menu_item_activate(*args):
  return _coot.mutate_sequence_chain_option_menu_item_activate(*args)
mutate_sequence_chain_option_menu_item_activate = _coot.mutate_sequence_chain_option_menu_item_activate

def wrapped_fit_loop_dialog():
  return _coot.wrapped_fit_loop_dialog()
wrapped_fit_loop_dialog = _coot.wrapped_fit_loop_dialog

def fit_loop_from_widget(*args):
  return _coot.fit_loop_from_widget(*args)
fit_loop_from_widget = _coot.fit_loop_from_widget

def wrapped_create_align_and_mutate_dialog():
  return _coot.wrapped_create_align_and_mutate_dialog()
wrapped_create_align_and_mutate_dialog = _coot.wrapped_create_align_and_mutate_dialog

def do_align_mutate_sequence(*args):
  return _coot.do_align_mutate_sequence(*args)
do_align_mutate_sequence = _coot.do_align_mutate_sequence

def align_and_mutate_molecule_menu_item_activate(*args):
  return _coot.align_and_mutate_molecule_menu_item_activate(*args)
align_and_mutate_molecule_menu_item_activate = _coot.align_and_mutate_molecule_menu_item_activate

def align_and_mutate_chain_option_menu_item_activate(*args):
  return _coot.align_and_mutate_chain_option_menu_item_activate(*args)
align_and_mutate_chain_option_menu_item_activate = _coot.align_and_mutate_chain_option_menu_item_activate

def align_and_mutate(*args):
  return _coot.align_and_mutate(*args)
align_and_mutate = _coot.align_and_mutate

def set_alignment_gap_and_space_penalty(*args):
  return _coot.set_alignment_gap_and_space_penalty(*args)
set_alignment_gap_and_space_penalty = _coot.set_alignment_gap_and_space_penalty

def align_to_closest_chain(*args):
  return _coot.align_to_closest_chain(*args)
align_to_closest_chain = _coot.align_to_closest_chain

def alignment_results_py(*args):
  return _coot.alignment_results_py(*args)
alignment_results_py = _coot.alignment_results_py

def nearest_residue_by_sequence_py(*args):
  return _coot.nearest_residue_by_sequence_py(*args)
nearest_residue_by_sequence_py = _coot.nearest_residue_by_sequence_py

def renumber_residue_range(*args):
  return _coot.renumber_residue_range(*args)
renumber_residue_range = _coot.renumber_residue_range

def wrapped_create_renumber_residue_range_dialog():
  return _coot.wrapped_create_renumber_residue_range_dialog()
wrapped_create_renumber_residue_range_dialog = _coot.wrapped_create_renumber_residue_range_dialog

def renumber_residues_from_widget(*args):
  return _coot.renumber_residues_from_widget(*args)
renumber_residues_from_widget = _coot.renumber_residues_from_widget

def change_residue_number(*args):
  return _coot.change_residue_number(*args)
change_residue_number = _coot.change_residue_number

def wrapped_create_change_chain_id_dialog():
  return _coot.wrapped_create_change_chain_id_dialog()
wrapped_create_change_chain_id_dialog = _coot.wrapped_create_change_chain_id_dialog

def change_chain_id_by_widget(*args):
  return _coot.change_chain_id_by_widget(*args)
change_chain_id_by_widget = _coot.change_chain_id_by_widget

def change_chain_ids_mol_option_menu_item_activate(*args):
  return _coot.change_chain_ids_mol_option_menu_item_activate(*args)
change_chain_ids_mol_option_menu_item_activate = _coot.change_chain_ids_mol_option_menu_item_activate

def change_chain_ids_chain_menu_item_activate(*args):
  return _coot.change_chain_ids_chain_menu_item_activate(*args)
change_chain_ids_chain_menu_item_activate = _coot.change_chain_ids_chain_menu_item_activate

def change_chain_id(*args):
  return _coot.change_chain_id(*args)
change_chain_id = _coot.change_chain_id

def change_chain_id_with_result_py(*args):
  return _coot.change_chain_id_with_result_py(*args)
change_chain_id_with_result_py = _coot.change_chain_id_with_result_py

def probe_available_p():
  return _coot.probe_available_p()
probe_available_p = _coot.probe_available_p

def probe_available_p_py():
  return _coot.probe_available_p_py()
probe_available_p_py = _coot.probe_available_p_py

def post_scripting_window():
  return _coot.post_scripting_window()
post_scripting_window = _coot.post_scripting_window

def post_scheme_scripting_window():
  return _coot.post_scheme_scripting_window()
post_scheme_scripting_window = _coot.post_scheme_scripting_window

def post_python_scripting_window():
  return _coot.post_python_scripting_window()
post_python_scripting_window = _coot.post_python_scripting_window

def run_command_line_scripts():
  return _coot.run_command_line_scripts()
run_command_line_scripts = _coot.run_command_line_scripts

def setup_guile_window_entry(*args):
  return _coot.setup_guile_window_entry(*args)
setup_guile_window_entry = _coot.setup_guile_window_entry

def setup_python_window_entry(*args):
  return _coot.setup_python_window_entry(*args)
setup_python_window_entry = _coot.setup_python_window_entry

def python_window_enter_callback(*args):
  return _coot.python_window_enter_callback(*args)
python_window_enter_callback = _coot.python_window_enter_callback

def set_guile_gui_loaded_flag():
  return _coot.set_guile_gui_loaded_flag()
set_guile_gui_loaded_flag = _coot.set_guile_gui_loaded_flag

def set_python_gui_loaded_flag():
  return _coot.set_python_gui_loaded_flag()
set_python_gui_loaded_flag = _coot.set_python_gui_loaded_flag

def set_found_coot_gui():
  return _coot.set_found_coot_gui()
set_found_coot_gui = _coot.set_found_coot_gui

def set_found_coot_python_gui():
  return _coot.set_found_coot_python_gui()
set_found_coot_python_gui = _coot.set_found_coot_python_gui

def handle_get_accession_code(*args):
  return _coot.handle_get_accession_code(*args)
handle_get_accession_code = _coot.handle_get_accession_code

def get_coords_for_accession_code(*args):
  return _coot.get_coords_for_accession_code(*args)
get_coords_for_accession_code = _coot.get_coords_for_accession_code

def wrapped_create_libcheck_monomer_dialog():
  return _coot.wrapped_create_libcheck_monomer_dialog()
wrapped_create_libcheck_monomer_dialog = _coot.wrapped_create_libcheck_monomer_dialog

def handle_get_libcheck_monomer_code(*args):
  return _coot.handle_get_libcheck_monomer_code(*args)
handle_get_libcheck_monomer_code = _coot.handle_get_libcheck_monomer_code

def get_monomer(*args):
  return _coot.get_monomer(*args)
get_monomer = _coot.get_monomer

def get_monomer_from_dictionary(*args):
  return _coot.get_monomer_from_dictionary(*args)
get_monomer_from_dictionary = _coot.get_monomer_from_dictionary

def handle_make_monomer_search(*args):
  return _coot.handle_make_monomer_search(*args)
handle_make_monomer_search = _coot.handle_make_monomer_search

def run_script(*args):
  return _coot.run_script(*args)
run_script = _coot.run_script

def run_guile_script(*args):
  return _coot.run_guile_script(*args)
run_guile_script = _coot.run_guile_script

def run_python_script(*args):
  return _coot.run_python_script(*args)
run_python_script = _coot.run_python_script

def import_python_module(*args):
  return _coot.import_python_module(*args)
import_python_module = _coot.import_python_module

def auto_load_dictionary(*args):
  return _coot.auto_load_dictionary(*args)
auto_load_dictionary = _coot.auto_load_dictionary

def reload_dictionary(*args):
  return _coot.reload_dictionary(*args)
reload_dictionary = _coot.reload_dictionary

def add_non_auto_load_residue_name(*args):
  return _coot.add_non_auto_load_residue_name(*args)
add_non_auto_load_residue_name = _coot.add_non_auto_load_residue_name

def remove_non_auto_load_residue_name(*args):
  return _coot.remove_non_auto_load_residue_name(*args)
remove_non_auto_load_residue_name = _coot.remove_non_auto_load_residue_name

def matching_compound_names_from_dictionary_py(*args):
  return _coot.matching_compound_names_from_dictionary_py(*args)
matching_compound_names_from_dictionary_py = _coot.matching_compound_names_from_dictionary_py

def comp_id_to_name_py(*args):
  return _coot.comp_id_to_name_py(*args)
comp_id_to_name_py = _coot.comp_id_to_name_py

def do_regularize(*args):
  return _coot.do_regularize(*args)
do_regularize = _coot.do_regularize

def do_refine(*args):
  return _coot.do_refine(*args)
do_refine = _coot.do_refine

def do_regularize_kill_delete_dialog():
  return _coot.do_regularize_kill_delete_dialog()
do_regularize_kill_delete_dialog = _coot.do_regularize_kill_delete_dialog

def add_planar_peptide_restraints():
  return _coot.add_planar_peptide_restraints()
add_planar_peptide_restraints = _coot.add_planar_peptide_restraints

def remove_planar_peptide_restraints():
  return _coot.remove_planar_peptide_restraints()
remove_planar_peptide_restraints = _coot.remove_planar_peptide_restraints

def planar_peptide_restraints_state():
  return _coot.planar_peptide_restraints_state()
planar_peptide_restraints_state = _coot.planar_peptide_restraints_state

def add_omega_torsion_restriants():
  return _coot.add_omega_torsion_restriants()
add_omega_torsion_restriants = _coot.add_omega_torsion_restriants

def remove_omega_torsion_restriants():
  return _coot.remove_omega_torsion_restriants()
remove_omega_torsion_restriants = _coot.remove_omega_torsion_restriants

def set_refinement_immediate_replacement(*args):
  return _coot.set_refinement_immediate_replacement(*args)
set_refinement_immediate_replacement = _coot.set_refinement_immediate_replacement

def refinement_immediate_replacement_state():
  return _coot.refinement_immediate_replacement_state()
refinement_immediate_replacement_state = _coot.refinement_immediate_replacement_state

def set_residue_selection_flash_frames_number(*args):
  return _coot.set_residue_selection_flash_frames_number(*args)
set_residue_selection_flash_frames_number = _coot.set_residue_selection_flash_frames_number

def accept_regularizement():
  return _coot.accept_regularizement()
accept_regularizement = _coot.accept_regularizement

def clear_up_moving_atoms():
  return _coot.clear_up_moving_atoms()
clear_up_moving_atoms = _coot.clear_up_moving_atoms

def clear_moving_atoms_object():
  return _coot.clear_moving_atoms_object()
clear_moving_atoms_object = _coot.clear_moving_atoms_object

def fill_option_menu_with_refine_options(*args):
  return _coot.fill_option_menu_with_refine_options(*args)
fill_option_menu_with_refine_options = _coot.fill_option_menu_with_refine_options

def wrapped_create_refine_params_dialog():
  return _coot.wrapped_create_refine_params_dialog()
wrapped_create_refine_params_dialog = _coot.wrapped_create_refine_params_dialog

def do_torsions_toggle(*args):
  return _coot.do_torsions_toggle(*args)
do_torsions_toggle = _coot.do_torsions_toggle

def refine_residues_py(*args):
  return _coot.refine_residues_py(*args)
refine_residues_py = _coot.refine_residues_py

def refine_residues_with_alt_conf_py(*args):
  return _coot.refine_residues_with_alt_conf_py(*args)
refine_residues_with_alt_conf_py = _coot.refine_residues_with_alt_conf_py

def regularize_residues_py(*args):
  return _coot.regularize_residues_py(*args)
regularize_residues_py = _coot.regularize_residues_py

def regularize_residues_with_alt_conf_py(*args):
  return _coot.regularize_residues_with_alt_conf_py(*args)
regularize_residues_with_alt_conf_py = _coot.regularize_residues_with_alt_conf_py

def set_refine_with_torsion_restraints(*args):
  return _coot.set_refine_with_torsion_restraints(*args)
set_refine_with_torsion_restraints = _coot.set_refine_with_torsion_restraints

def refine_with_torsion_restraints_state():
  return _coot.refine_with_torsion_restraints_state()
refine_with_torsion_restraints_state = _coot.refine_with_torsion_restraints_state

def set_refine_params_toggle_buttons(*args):
  return _coot.set_refine_params_toggle_buttons(*args)
set_refine_params_toggle_buttons = _coot.set_refine_params_toggle_buttons

def set_matrix(*args):
  return _coot.set_matrix(*args)
set_matrix = _coot.set_matrix

def matrix_state():
  return _coot.matrix_state()
matrix_state = _coot.matrix_state

def set_refinemenent_weight_from_entry(*args):
  return _coot.set_refinemenent_weight_from_entry(*args)
set_refinemenent_weight_from_entry = _coot.set_refinemenent_weight_from_entry

def set_refine_auto_range_step(*args):
  return _coot.set_refine_auto_range_step(*args)
set_refine_auto_range_step = _coot.set_refine_auto_range_step

def set_refine_max_residues(*args):
  return _coot.set_refine_max_residues(*args)
set_refine_max_residues = _coot.set_refine_max_residues

def refine_zone_atom_index_define(*args):
  return _coot.refine_zone_atom_index_define(*args)
refine_zone_atom_index_define = _coot.refine_zone_atom_index_define

def refine_zone(*args):
  return _coot.refine_zone(*args)
refine_zone = _coot.refine_zone

def refine_zone_with_score_py(*args):
  return _coot.refine_zone_with_score_py(*args)
refine_zone_with_score_py = _coot.refine_zone_with_score_py

def regularize_zone_with_score_py(*args):
  return _coot.regularize_zone_with_score_py(*args)
regularize_zone_with_score_py = _coot.regularize_zone_with_score_py

def refine_auto_range(*args):
  return _coot.refine_auto_range(*args)
refine_auto_range = _coot.refine_auto_range

def regularize_zone(*args):
  return _coot.regularize_zone(*args)
regularize_zone = _coot.regularize_zone

def set_dragged_refinement_steps_per_frame(*args):
  return _coot.set_dragged_refinement_steps_per_frame(*args)
set_dragged_refinement_steps_per_frame = _coot.set_dragged_refinement_steps_per_frame

def dragged_refinement_steps_per_frame():
  return _coot.dragged_refinement_steps_per_frame()
dragged_refinement_steps_per_frame = _coot.dragged_refinement_steps_per_frame

def set_refinement_refine_per_frame(*args):
  return _coot.set_refinement_refine_per_frame(*args)
set_refinement_refine_per_frame = _coot.set_refinement_refine_per_frame

def refinement_refine_per_frame_state():
  return _coot.refinement_refine_per_frame_state()
refinement_refine_per_frame_state = _coot.refinement_refine_per_frame_state

def set_refine_ramachandran_angles(*args):
  return _coot.set_refine_ramachandran_angles(*args)
set_refine_ramachandran_angles = _coot.set_refine_ramachandran_angles

def refine_ramachandran_angles_state():
  return _coot.refine_ramachandran_angles_state()
refine_ramachandran_angles_state = _coot.refine_ramachandran_angles_state

def set_numerical_gradients(*args):
  return _coot.set_numerical_gradients(*args)
set_numerical_gradients = _coot.set_numerical_gradients

def set_fix_chiral_volumes_before_refinement(*args):
  return _coot.set_fix_chiral_volumes_before_refinement(*args)
set_fix_chiral_volumes_before_refinement = _coot.set_fix_chiral_volumes_before_refinement

def check_chiral_volumes(*args):
  return _coot.check_chiral_volumes(*args)
check_chiral_volumes = _coot.check_chiral_volumes

def check_chiral_volumes_from_widget(*args):
  return _coot.check_chiral_volumes_from_widget(*args)
check_chiral_volumes_from_widget = _coot.check_chiral_volumes_from_widget

def fill_chiral_volume_molecule_option_menu(*args):
  return _coot.fill_chiral_volume_molecule_option_menu(*args)
fill_chiral_volume_molecule_option_menu = _coot.fill_chiral_volume_molecule_option_menu

def chiral_volume_molecule_option_menu_item_select(*args):
  return _coot.chiral_volume_molecule_option_menu_item_select(*args)
chiral_volume_molecule_option_menu_item_select = _coot.chiral_volume_molecule_option_menu_item_select

def set_show_chiral_volume_errors_dialog(*args):
  return _coot.set_show_chiral_volume_errors_dialog(*args)
set_show_chiral_volume_errors_dialog = _coot.set_show_chiral_volume_errors_dialog

def set_secondary_structure_restraints_type(*args):
  return _coot.set_secondary_structure_restraints_type(*args)
set_secondary_structure_restraints_type = _coot.set_secondary_structure_restraints_type

def secondary_structure_restraints_type():
  return _coot.secondary_structure_restraints_type()
secondary_structure_restraints_type = _coot.secondary_structure_restraints_type

def imol_refinement_map():
  return _coot.imol_refinement_map()
imol_refinement_map = _coot.imol_refinement_map

def set_imol_refinement_map(*args):
  return _coot.set_imol_refinement_map(*args)
set_imol_refinement_map = _coot.set_imol_refinement_map

def does_residue_exist_p(*args):
  return _coot.does_residue_exist_p(*args)
does_residue_exist_p = _coot.does_residue_exist_p

def delete_restraints(*args):
  return _coot.delete_restraints(*args)
delete_restraints = _coot.delete_restraints

def add_extra_bond_restraint(*args):
  return _coot.add_extra_bond_restraint(*args)
add_extra_bond_restraint = _coot.add_extra_bond_restraint

def add_extra_angle_restraint(*args):
  return _coot.add_extra_angle_restraint(*args)
add_extra_angle_restraint = _coot.add_extra_angle_restraint

def add_extra_torsion_restraint(*args):
  return _coot.add_extra_torsion_restraint(*args)
add_extra_torsion_restraint = _coot.add_extra_torsion_restraint

def add_extra_start_pos_restraint(*args):
  return _coot.add_extra_start_pos_restraint(*args)
add_extra_start_pos_restraint = _coot.add_extra_start_pos_restraint

def delete_all_extra_restraints(*args):
  return _coot.delete_all_extra_restraints(*args)
delete_all_extra_restraints = _coot.delete_all_extra_restraints

def delete_extra_restraints_for_residue(*args):
  return _coot.delete_extra_restraints_for_residue(*args)
delete_extra_restraints_for_residue = _coot.delete_extra_restraints_for_residue

def delete_extra_restraints_worse_than(*args):
  return _coot.delete_extra_restraints_worse_than(*args)
delete_extra_restraints_worse_than = _coot.delete_extra_restraints_worse_than

def add_refmac_extra_restraints(*args):
  return _coot.add_refmac_extra_restraints(*args)
add_refmac_extra_restraints = _coot.add_refmac_extra_restraints

def set_show_extra_restraints(*args):
  return _coot.set_show_extra_restraints(*args)
set_show_extra_restraints = _coot.set_show_extra_restraints

def extra_restraints_are_shown(*args):
  return _coot.extra_restraints_are_shown(*args)
extra_restraints_are_shown = _coot.extra_restraints_are_shown

def delete_extra_restraint_py(*args):
  return _coot.delete_extra_restraint_py(*args)
delete_extra_restraint_py = _coot.delete_extra_restraint_py

def list_extra_restraints_py(*args):
  return _coot.list_extra_restraints_py(*args)
list_extra_restraints_py = _coot.list_extra_restraints_py

def set_use_only_extra_torsion_restraints_for_torsions(*args):
  return _coot.set_use_only_extra_torsion_restraints_for_torsions(*args)
set_use_only_extra_torsion_restraints_for_torsions = _coot.set_use_only_extra_torsion_restraints_for_torsions

def use_only_extra_torsion_restraints_for_torsions_state():
  return _coot.use_only_extra_torsion_restraints_for_torsions_state()
use_only_extra_torsion_restraints_for_torsions_state = _coot.use_only_extra_torsion_restraints_for_torsions_state

def write_restraints_cif_dictionary(*args):
  return _coot.write_restraints_cif_dictionary(*args)
write_restraints_cif_dictionary = _coot.write_restraints_cif_dictionary

def fit_residue_range_to_map_by_simplex(*args):
  return _coot.fit_residue_range_to_map_by_simplex(*args)
fit_residue_range_to_map_by_simplex = _coot.fit_residue_range_to_map_by_simplex

def score_residue_range_fit_to_map(*args):
  return _coot.score_residue_range_fit_to_map(*args)
score_residue_range_fit_to_map = _coot.score_residue_range_fit_to_map

def fix_nomenclature_errors(*args):
  return _coot.fix_nomenclature_errors(*args)
fix_nomenclature_errors = _coot.fix_nomenclature_errors

def set_nomenclature_errors_on_read(*args):
  return _coot.set_nomenclature_errors_on_read(*args)
set_nomenclature_errors_on_read = _coot.set_nomenclature_errors_on_read

def wrapped_create_move_molecule_here_dialog():
  return _coot.wrapped_create_move_molecule_here_dialog()
wrapped_create_move_molecule_here_dialog = _coot.wrapped_create_move_molecule_here_dialog

def move_molecule_here_by_widget(*args):
  return _coot.move_molecule_here_by_widget(*args)
move_molecule_here_by_widget = _coot.move_molecule_here_by_widget

def move_molecule_to_screen_centre_internal(*args):
  return _coot.move_molecule_to_screen_centre_internal(*args)
move_molecule_to_screen_centre_internal = _coot.move_molecule_to_screen_centre_internal

def fill_move_molecule_here_dialog(*args):
  return _coot.fill_move_molecule_here_dialog(*args)
fill_move_molecule_here_dialog = _coot.fill_move_molecule_here_dialog

def output_atom_info_as_text(*args):
  return _coot.output_atom_info_as_text(*args)
output_atom_info_as_text = _coot.output_atom_info_as_text

def do_residue_info_dialog():
  return _coot.do_residue_info_dialog()
do_residue_info_dialog = _coot.do_residue_info_dialog

def output_residue_info_dialog(*args):
  return _coot.output_residue_info_dialog(*args)
output_residue_info_dialog = _coot.output_residue_info_dialog

def residue_info_dialog(*args):
  return _coot.residue_info_dialog(*args)
residue_info_dialog = _coot.residue_info_dialog

def residue_info_dialog_is_displayed():
  return _coot.residue_info_dialog_is_displayed()
residue_info_dialog_is_displayed = _coot.residue_info_dialog_is_displayed

def output_residue_info_as_text(*args):
  return _coot.output_residue_info_as_text(*args)
output_residue_info_as_text = _coot.output_residue_info_as_text

def apply_residue_info_changes(*args):
  return _coot.apply_residue_info_changes(*args)
apply_residue_info_changes = _coot.apply_residue_info_changes

def do_distance_define():
  return _coot.do_distance_define()
do_distance_define = _coot.do_distance_define

def do_angle_define():
  return _coot.do_angle_define()
do_angle_define = _coot.do_angle_define

def do_torsion_define():
  return _coot.do_torsion_define()
do_torsion_define = _coot.do_torsion_define

def residue_info_apply_all_checkbutton_toggled():
  return _coot.residue_info_apply_all_checkbutton_toggled()
residue_info_apply_all_checkbutton_toggled = _coot.residue_info_apply_all_checkbutton_toggled

def wrapped_create_residue_info_dialog():
  return _coot.wrapped_create_residue_info_dialog()
wrapped_create_residue_info_dialog = _coot.wrapped_create_residue_info_dialog

def clear_residue_info_edit_list():
  return _coot.clear_residue_info_edit_list()
clear_residue_info_edit_list = _coot.clear_residue_info_edit_list

def residue_info_release_memory(*args):
  return _coot.residue_info_release_memory(*args)
residue_info_release_memory = _coot.residue_info_release_memory

def unset_residue_info_widget():
  return _coot.unset_residue_info_widget()
unset_residue_info_widget = _coot.unset_residue_info_widget

def clear_simple_distances():
  return _coot.clear_simple_distances()
clear_simple_distances = _coot.clear_simple_distances

def clear_last_simple_distance():
  return _coot.clear_last_simple_distance()
clear_last_simple_distance = _coot.clear_last_simple_distance

def wrapped_create_geometry_dialog():
  return _coot.wrapped_create_geometry_dialog()
wrapped_create_geometry_dialog = _coot.wrapped_create_geometry_dialog

def store_geometry_dialog(*args):
  return _coot.store_geometry_dialog(*args)
store_geometry_dialog = _coot.store_geometry_dialog

def fill_environment_widget(*args):
  return _coot.fill_environment_widget(*args)
fill_environment_widget = _coot.fill_environment_widget

def execute_environment_settings(*args):
  return _coot.execute_environment_settings(*args)
execute_environment_settings = _coot.execute_environment_settings

def toggle_environment_show_distances(*args):
  return _coot.toggle_environment_show_distances(*args)
toggle_environment_show_distances = _coot.toggle_environment_show_distances

def set_show_environment_distances(*args):
  return _coot.set_show_environment_distances(*args)
set_show_environment_distances = _coot.set_show_environment_distances

def set_show_environment_distances_bumps(*args):
  return _coot.set_show_environment_distances_bumps(*args)
set_show_environment_distances_bumps = _coot.set_show_environment_distances_bumps

def set_show_environment_distances_h_bonds(*args):
  return _coot.set_show_environment_distances_h_bonds(*args)
set_show_environment_distances_h_bonds = _coot.set_show_environment_distances_h_bonds

def show_environment_distances_state():
  return _coot.show_environment_distances_state()
show_environment_distances_state = _coot.show_environment_distances_state

def set_environment_distances_distance_limits(*args):
  return _coot.set_environment_distances_distance_limits(*args)
set_environment_distances_distance_limits = _coot.set_environment_distances_distance_limits

def set_show_environment_distances_as_solid(*args):
  return _coot.set_show_environment_distances_as_solid(*args)
set_show_environment_distances_as_solid = _coot.set_show_environment_distances_as_solid

def set_environment_distance_label_atom(*args):
  return _coot.set_environment_distance_label_atom(*args)
set_environment_distance_label_atom = _coot.set_environment_distance_label_atom

def add_geometry_distance(*args):
  return _coot.add_geometry_distance(*args)
add_geometry_distance = _coot.add_geometry_distance

def add_atom_geometry_distance_py(*args):
  return _coot.add_atom_geometry_distance_py(*args)
add_atom_geometry_distance_py = _coot.add_atom_geometry_distance_py

def fill_pointer_distances_widget(*args):
  return _coot.fill_pointer_distances_widget(*args)
fill_pointer_distances_widget = _coot.fill_pointer_distances_widget

def execute_pointer_distances_settings(*args):
  return _coot.execute_pointer_distances_settings(*args)
execute_pointer_distances_settings = _coot.execute_pointer_distances_settings

def toggle_pointer_distances_show_distances(*args):
  return _coot.toggle_pointer_distances_show_distances(*args)
toggle_pointer_distances_show_distances = _coot.toggle_pointer_distances_show_distances

def set_show_pointer_distances(*args):
  return _coot.set_show_pointer_distances(*args)
set_show_pointer_distances = _coot.set_show_pointer_distances

def show_pointer_distances_state():
  return _coot.show_pointer_distances_state()
show_pointer_distances_state = _coot.show_pointer_distances_state

def scale_zoom(*args):
  return _coot.scale_zoom(*args)
scale_zoom = _coot.scale_zoom

def scale_zoom_internal(*args):
  return _coot.scale_zoom_internal(*args)
scale_zoom_internal = _coot.scale_zoom_internal

def zoom_factor():
  return _coot.zoom_factor()
zoom_factor = _coot.zoom_factor

def set_smooth_scroll_do_zoom(*args):
  return _coot.set_smooth_scroll_do_zoom(*args)
set_smooth_scroll_do_zoom = _coot.set_smooth_scroll_do_zoom

def smooth_scroll_do_zoom():
  return _coot.smooth_scroll_do_zoom()
smooth_scroll_do_zoom = _coot.smooth_scroll_do_zoom

def smooth_scroll_zoom_limit():
  return _coot.smooth_scroll_zoom_limit()
smooth_scroll_zoom_limit = _coot.smooth_scroll_zoom_limit

def set_smooth_scroll_zoom_limit(*args):
  return _coot.set_smooth_scroll_zoom_limit(*args)
set_smooth_scroll_zoom_limit = _coot.set_smooth_scroll_zoom_limit

def set_zoom_adjustment(*args):
  return _coot.set_zoom_adjustment(*args)
set_zoom_adjustment = _coot.set_zoom_adjustment

def set_zoom(*args):
  return _coot.set_zoom(*args)
set_zoom = _coot.set_zoom

def handle_cns_data_file(*args):
  return _coot.handle_cns_data_file(*args)
handle_cns_data_file = _coot.handle_cns_data_file

def handle_cns_data_file_with_cell(*args):
  return _coot.handle_cns_data_file_with_cell(*args)
handle_cns_data_file_with_cell = _coot.handle_cns_data_file_with_cell

def auto_read_cif_data_with_phases(*args):
  return _coot.auto_read_cif_data_with_phases(*args)
auto_read_cif_data_with_phases = _coot.auto_read_cif_data_with_phases

def read_cif_data_with_phases_sigmaa(*args):
  return _coot.read_cif_data_with_phases_sigmaa(*args)
read_cif_data_with_phases_sigmaa = _coot.read_cif_data_with_phases_sigmaa

def read_cif_data_with_phases_diff_sigmaa(*args):
  return _coot.read_cif_data_with_phases_diff_sigmaa(*args)
read_cif_data_with_phases_diff_sigmaa = _coot.read_cif_data_with_phases_diff_sigmaa

def read_cif_data(*args):
  return _coot.read_cif_data(*args)
read_cif_data = _coot.read_cif_data

def read_cif_data_2fofc_map(*args):
  return _coot.read_cif_data_2fofc_map(*args)
read_cif_data_2fofc_map = _coot.read_cif_data_2fofc_map

def read_cif_data_fofc_map(*args):
  return _coot.read_cif_data_fofc_map(*args)
read_cif_data_fofc_map = _coot.read_cif_data_fofc_map

def read_cif_data_with_phases_fo_fc(*args):
  return _coot.read_cif_data_with_phases_fo_fc(*args)
read_cif_data_with_phases_fo_fc = _coot.read_cif_data_with_phases_fo_fc

def read_cif_data_with_phases_2fo_fc(*args):
  return _coot.read_cif_data_with_phases_2fo_fc(*args)
read_cif_data_with_phases_2fo_fc = _coot.read_cif_data_with_phases_2fo_fc

def read_cif_data_with_phases_nfo_fc(*args):
  return _coot.read_cif_data_with_phases_nfo_fc(*args)
read_cif_data_with_phases_nfo_fc = _coot.read_cif_data_with_phases_nfo_fc

def read_cif_data_with_phases_fo_alpha_calc(*args):
  return _coot.read_cif_data_with_phases_fo_alpha_calc(*args)
read_cif_data_with_phases_fo_alpha_calc = _coot.read_cif_data_with_phases_fo_alpha_calc

def handle_cif_dictionary(*args):
  return _coot.handle_cif_dictionary(*args)
handle_cif_dictionary = _coot.handle_cif_dictionary

def read_cif_dictionary(*args):
  return _coot.read_cif_dictionary(*args)
read_cif_dictionary = _coot.read_cif_dictionary

def write_connectivity(*args):
  return _coot.write_connectivity(*args)
write_connectivity = _coot.write_connectivity

def open_cif_dictionary_file_selector_dialog():
  return _coot.open_cif_dictionary_file_selector_dialog()
open_cif_dictionary_file_selector_dialog = _coot.open_cif_dictionary_file_selector_dialog

def non_standard_residue_names_py(*args):
  return _coot.non_standard_residue_names_py(*args)
non_standard_residue_names_py = _coot.non_standard_residue_names_py

def import_all_refmac_cifs():
  return _coot.import_all_refmac_cifs()
import_all_refmac_cifs = _coot.import_all_refmac_cifs

def read_small_molecule_cif(*args):
  return _coot.read_small_molecule_cif(*args)
read_small_molecule_cif = _coot.read_small_molecule_cif

def read_small_molecule_data_cif(*args):
  return _coot.read_small_molecule_data_cif(*args)
read_small_molecule_data_cif = _coot.read_small_molecule_data_cif

def read_shelx_ins_file(*args):
  return _coot.read_shelx_ins_file(*args)
read_shelx_ins_file = _coot.read_shelx_ins_file

def write_shelx_ins_file(*args):
  return _coot.write_shelx_ins_file(*args)
write_shelx_ins_file = _coot.write_shelx_ins_file

def handle_shelx_fcf_file_internal(*args):
  return _coot.handle_shelx_fcf_file_internal(*args)
handle_shelx_fcf_file_internal = _coot.handle_shelx_fcf_file_internal

def is_shelx_molecule(*args):
  return _coot.is_shelx_molecule(*args)
is_shelx_molecule = _coot.is_shelx_molecule

def chain_id_for_shelxl_residue_number_py(*args):
  return _coot.chain_id_for_shelxl_residue_number_py(*args)
chain_id_for_shelxl_residue_number_py = _coot.chain_id_for_shelxl_residue_number_py

def add_shelx_string_to_molecule(*args):
  return _coot.add_shelx_string_to_molecule(*args)
add_shelx_string_to_molecule = _coot.add_shelx_string_to_molecule

def deviant_geometry(*args):
  return _coot.deviant_geometry(*args)
deviant_geometry = _coot.deviant_geometry

def is_valid_model_molecule(*args):
  return _coot.is_valid_model_molecule(*args)
is_valid_model_molecule = _coot.is_valid_model_molecule

def is_valid_map_molecule(*args):
  return _coot.is_valid_map_molecule(*args)
is_valid_map_molecule = _coot.is_valid_map_molecule

def free_geometry_graph(*args):
  return _coot.free_geometry_graph(*args)
free_geometry_graph = _coot.free_geometry_graph

def unset_geometry_graph(*args):
  return _coot.unset_geometry_graph(*args)
unset_geometry_graph = _coot.unset_geometry_graph

def add_on_validation_graph_mol_options(*args):
  return _coot.add_on_validation_graph_mol_options(*args)
add_on_validation_graph_mol_options = _coot.add_on_validation_graph_mol_options

def my_delete_validaton_graph_mol_option(*args):
  return _coot.my_delete_validaton_graph_mol_option(*args)
my_delete_validaton_graph_mol_option = _coot.my_delete_validaton_graph_mol_option

def validation_graph_b_factor_mol_selector_activate(*args):
  return _coot.validation_graph_b_factor_mol_selector_activate(*args)
validation_graph_b_factor_mol_selector_activate = _coot.validation_graph_b_factor_mol_selector_activate

def validation_graph_geometry_mol_selector_activate(*args):
  return _coot.validation_graph_geometry_mol_selector_activate(*args)
validation_graph_geometry_mol_selector_activate = _coot.validation_graph_geometry_mol_selector_activate

def validation_graph_omega_mol_selector_activate(*args):
  return _coot.validation_graph_omega_mol_selector_activate(*args)
validation_graph_omega_mol_selector_activate = _coot.validation_graph_omega_mol_selector_activate

def validation_graph_rotamer_mol_selector_activate(*args):
  return _coot.validation_graph_rotamer_mol_selector_activate(*args)
validation_graph_rotamer_mol_selector_activate = _coot.validation_graph_rotamer_mol_selector_activate

def validation_graph_density_fit_mol_selector_activate(*args):
  return _coot.validation_graph_density_fit_mol_selector_activate(*args)
validation_graph_density_fit_mol_selector_activate = _coot.validation_graph_density_fit_mol_selector_activate

def gln_and_asn_b_factor_outlier_mol_selector_activate(*args):
  return _coot.gln_and_asn_b_factor_outlier_mol_selector_activate(*args)
gln_and_asn_b_factor_outlier_mol_selector_activate = _coot.gln_and_asn_b_factor_outlier_mol_selector_activate

def validation_graph_ncs_diffs_mol_selector_activate(*args):
  return _coot.validation_graph_ncs_diffs_mol_selector_activate(*args)
validation_graph_ncs_diffs_mol_selector_activate = _coot.validation_graph_ncs_diffs_mol_selector_activate

def probe_mol_selector_activate(*args):
  return _coot.probe_mol_selector_activate(*args)
probe_mol_selector_activate = _coot.probe_mol_selector_activate

def difference_map_peaks(*args):
  return _coot.difference_map_peaks(*args)
difference_map_peaks = _coot.difference_map_peaks

def difference_map_peaks_by_widget(*args):
  return _coot.difference_map_peaks_by_widget(*args)
difference_map_peaks_by_widget = _coot.difference_map_peaks_by_widget

def set_difference_map_peaks_widget(*args):
  return _coot.set_difference_map_peaks_widget(*args)
set_difference_map_peaks_widget = _coot.set_difference_map_peaks_widget

def set_difference_map_peaks_max_closeness(*args):
  return _coot.set_difference_map_peaks_max_closeness(*args)
set_difference_map_peaks_max_closeness = _coot.set_difference_map_peaks_max_closeness

def difference_map_peaks_max_closeness():
  return _coot.difference_map_peaks_max_closeness()
difference_map_peaks_max_closeness = _coot.difference_map_peaks_max_closeness

def clear_diff_map_peaks():
  return _coot.clear_diff_map_peaks()
clear_diff_map_peaks = _coot.clear_diff_map_peaks

def wrapped_create_generate_diff_map_peaks_dialog():
  return _coot.wrapped_create_generate_diff_map_peaks_dialog()
wrapped_create_generate_diff_map_peaks_dialog = _coot.wrapped_create_generate_diff_map_peaks_dialog

def gln_asn_b_factor_outliers(*args):
  return _coot.gln_asn_b_factor_outliers(*args)
gln_asn_b_factor_outliers = _coot.gln_asn_b_factor_outliers

def gln_asn_b_factor_outliers_py(*args):
  return _coot.gln_asn_b_factor_outliers_py(*args)
gln_asn_b_factor_outliers_py = _coot.gln_asn_b_factor_outliers_py

def map_peaks_py(*args):
  return _coot.map_peaks_py(*args)
map_peaks_py = _coot.map_peaks_py

def map_peaks_near_point_py(*args):
  return _coot.map_peaks_near_point_py(*args)
map_peaks_near_point_py = _coot.map_peaks_near_point_py

def map_peaks_near_point_from_list_py(*args):
  return _coot.map_peaks_near_point_from_list_py(*args)
map_peaks_near_point_from_list_py = _coot.map_peaks_near_point_from_list_py

def screen_vectors_py():
  return _coot.screen_vectors_py()
screen_vectors_py = _coot.screen_vectors_py

def setup_multi_residue_torsion():
  return _coot.setup_multi_residue_torsion()
setup_multi_residue_torsion = _coot.setup_multi_residue_torsion

def show_multi_residue_torsion_dialog():
  return _coot.show_multi_residue_torsion_dialog()
show_multi_residue_torsion_dialog = _coot.show_multi_residue_torsion_dialog

def clear_multi_residue_torsion_mode():
  return _coot.clear_multi_residue_torsion_mode()
clear_multi_residue_torsion_mode = _coot.clear_multi_residue_torsion_mode

def set_multi_residue_torsion_reverse_mode(*args):
  return _coot.set_multi_residue_torsion_reverse_mode(*args)
set_multi_residue_torsion_reverse_mode = _coot.set_multi_residue_torsion_reverse_mode

def get_torsion_py(*args):
  return _coot.get_torsion_py(*args)
get_torsion_py = _coot.get_torsion_py

def set_torsion_py(*args):
  return _coot.set_torsion_py(*args)
set_torsion_py = _coot.set_torsion_py

def multi_residue_torsion_py(*args):
  return _coot.multi_residue_torsion_py(*args)
multi_residue_torsion_py = _coot.multi_residue_torsion_py

def do_ramachandran_plot(*args):
  return _coot.do_ramachandran_plot(*args)
do_ramachandran_plot = _coot.do_ramachandran_plot

def set_kleywegt_plot_n_diffs(*args):
  return _coot.set_kleywegt_plot_n_diffs(*args)
set_kleywegt_plot_n_diffs = _coot.set_kleywegt_plot_n_diffs

def add_on_rama_choices():
  return _coot.add_on_rama_choices()
add_on_rama_choices = _coot.add_on_rama_choices

def set_ramachandran_plot_contour_levels(*args):
  return _coot.set_ramachandran_plot_contour_levels(*args)
set_ramachandran_plot_contour_levels = _coot.set_ramachandran_plot_contour_levels

def set_ramachandran_plot_background_block_size(*args):
  return _coot.set_ramachandran_plot_background_block_size(*args)
set_ramachandran_plot_background_block_size = _coot.set_ramachandran_plot_background_block_size

def my_delete_ramachandran_mol_option(*args):
  return _coot.my_delete_ramachandran_mol_option(*args)
my_delete_ramachandran_mol_option = _coot.my_delete_ramachandran_mol_option

def set_dynarama_is_displayed(*args):
  return _coot.set_dynarama_is_displayed(*args)
set_dynarama_is_displayed = _coot.set_dynarama_is_displayed

def dynarama_is_displayed_state(*args):
  return _coot.dynarama_is_displayed_state(*args)
dynarama_is_displayed_state = _coot.dynarama_is_displayed_state

def get_mol_from_dynarama(*args):
  return _coot.get_mol_from_dynarama(*args)
get_mol_from_dynarama = _coot.get_mol_from_dynarama

def resize_rama_canvas(*args):
  return _coot.resize_rama_canvas(*args)
resize_rama_canvas = _coot.resize_rama_canvas

def set_moving_atoms(*args):
  return _coot.set_moving_atoms(*args)
set_moving_atoms = _coot.set_moving_atoms

def accept_phi_psi_moving_atoms():
  return _coot.accept_phi_psi_moving_atoms()
accept_phi_psi_moving_atoms = _coot.accept_phi_psi_moving_atoms

def setup_edit_phi_psi(*args):
  return _coot.setup_edit_phi_psi(*args)
setup_edit_phi_psi = _coot.setup_edit_phi_psi

def setup_dynamic_distances(*args):
  return _coot.setup_dynamic_distances(*args)
setup_dynamic_distances = _coot.setup_dynamic_distances

def destroy_edit_backbone_rama_plot():
  return _coot.destroy_edit_backbone_rama_plot()
destroy_edit_backbone_rama_plot = _coot.destroy_edit_backbone_rama_plot

def ramachandran_plot_differences(*args):
  return _coot.ramachandran_plot_differences(*args)
ramachandran_plot_differences = _coot.ramachandran_plot_differences

def ramachandran_plot_differences_by_chain(*args):
  return _coot.ramachandran_plot_differences_by_chain(*args)
ramachandran_plot_differences_by_chain = _coot.ramachandran_plot_differences_by_chain

def wrapped_ramachandran_plot_differences_dialog():
  return _coot.wrapped_ramachandran_plot_differences_dialog()
wrapped_ramachandran_plot_differences_dialog = _coot.wrapped_ramachandran_plot_differences_dialog

def do_ramachandran_plot_differences_by_widget(*args):
  return _coot.do_ramachandran_plot_differences_by_widget(*args)
do_ramachandran_plot_differences_by_widget = _coot.do_ramachandran_plot_differences_by_widget

def fill_ramachandran_plot_differences_option_menu_with_chain_options(*args):
  return _coot.fill_ramachandran_plot_differences_option_menu_with_chain_options(*args)
fill_ramachandran_plot_differences_option_menu_with_chain_options = _coot.fill_ramachandran_plot_differences_option_menu_with_chain_options

def ramachandran_plot_differences_mol_option_menu_activate_first(*args):
  return _coot.ramachandran_plot_differences_mol_option_menu_activate_first(*args)
ramachandran_plot_differences_mol_option_menu_activate_first = _coot.ramachandran_plot_differences_mol_option_menu_activate_first

def ramachandran_plot_differences_mol_option_menu_activate_second(*args):
  return _coot.ramachandran_plot_differences_mol_option_menu_activate_second(*args)
ramachandran_plot_differences_mol_option_menu_activate_second = _coot.ramachandran_plot_differences_mol_option_menu_activate_second

def ramachandran_plot_differences_chain_option_menu_activate_first(*args):
  return _coot.ramachandran_plot_differences_chain_option_menu_activate_first(*args)
ramachandran_plot_differences_chain_option_menu_activate_first = _coot.ramachandran_plot_differences_chain_option_menu_activate_first

def ramachandran_plot_differences_chain_option_menu_activate_second(*args):
  return _coot.ramachandran_plot_differences_chain_option_menu_activate_second(*args)
ramachandran_plot_differences_chain_option_menu_activate_second = _coot.ramachandran_plot_differences_chain_option_menu_activate_second

def do_sequence_view(*args):
  return _coot.do_sequence_view(*args)
do_sequence_view = _coot.do_sequence_view

def add_on_sequence_view_choices():
  return _coot.add_on_sequence_view_choices()
add_on_sequence_view_choices = _coot.add_on_sequence_view_choices

def set_sequence_view_is_displayed(*args):
  return _coot.set_sequence_view_is_displayed(*args)
set_sequence_view_is_displayed = _coot.set_sequence_view_is_displayed

def change_peptide_carbonyl_by(*args):
  return _coot.change_peptide_carbonyl_by(*args)
change_peptide_carbonyl_by = _coot.change_peptide_carbonyl_by

def change_peptide_peptide_by(*args):
  return _coot.change_peptide_peptide_by(*args)
change_peptide_peptide_by = _coot.change_peptide_peptide_by

def execute_setup_backbone_torsion_edit(*args):
  return _coot.execute_setup_backbone_torsion_edit(*args)
execute_setup_backbone_torsion_edit = _coot.execute_setup_backbone_torsion_edit

def setup_backbone_torsion_edit(*args):
  return _coot.setup_backbone_torsion_edit(*args)
setup_backbone_torsion_edit = _coot.setup_backbone_torsion_edit

def set_backbone_torsion_peptide_button_start_pos(*args):
  return _coot.set_backbone_torsion_peptide_button_start_pos(*args)
set_backbone_torsion_peptide_button_start_pos = _coot.set_backbone_torsion_peptide_button_start_pos

def change_peptide_peptide_by_current_button_pos(*args):
  return _coot.change_peptide_peptide_by_current_button_pos(*args)
change_peptide_peptide_by_current_button_pos = _coot.change_peptide_peptide_by_current_button_pos

def set_backbone_torsion_carbonyl_button_start_pos(*args):
  return _coot.set_backbone_torsion_carbonyl_button_start_pos(*args)
set_backbone_torsion_carbonyl_button_start_pos = _coot.set_backbone_torsion_carbonyl_button_start_pos

def change_peptide_carbonyl_by_current_button_pos(*args):
  return _coot.change_peptide_carbonyl_by_current_button_pos(*args)
change_peptide_carbonyl_by_current_button_pos = _coot.change_peptide_carbonyl_by_current_button_pos

def add_atom_label(*args):
  return _coot.add_atom_label(*args)
add_atom_label = _coot.add_atom_label

def remove_atom_label(*args):
  return _coot.remove_atom_label(*args)
remove_atom_label = _coot.remove_atom_label

def remove_all_atom_labels():
  return _coot.remove_all_atom_labels()
remove_all_atom_labels = _coot.remove_all_atom_labels

def set_label_on_recentre_flag(*args):
  return _coot.set_label_on_recentre_flag(*args)
set_label_on_recentre_flag = _coot.set_label_on_recentre_flag

def centre_atom_label_status():
  return _coot.centre_atom_label_status()
centre_atom_label_status = _coot.centre_atom_label_status

def set_brief_atom_labels(*args):
  return _coot.set_brief_atom_labels(*args)
set_brief_atom_labels = _coot.set_brief_atom_labels

def brief_atom_labels_state():
  return _coot.brief_atom_labels_state()
brief_atom_labels_state = _coot.brief_atom_labels_state

def rotate_y_scene(*args):
  return _coot.rotate_y_scene(*args)
rotate_y_scene = _coot.rotate_y_scene

def rotate_x_scene(*args):
  return _coot.rotate_x_scene(*args)
rotate_x_scene = _coot.rotate_x_scene

def rotate_z_scene(*args):
  return _coot.rotate_z_scene(*args)
rotate_z_scene = _coot.rotate_z_scene

def spin_zoom_trans(*args):
  return _coot.spin_zoom_trans(*args)
spin_zoom_trans = _coot.spin_zoom_trans

def add_view_here(*args):
  return _coot.add_view_here(*args)
add_view_here = _coot.add_view_here

def add_view_raw(*args):
  return _coot.add_view_raw(*args)
add_view_raw = _coot.add_view_raw

def play_views():
  return _coot.play_views()
play_views = _coot.play_views

def remove_this_view():
  return _coot.remove_this_view()
remove_this_view = _coot.remove_this_view

def remove_named_view(*args):
  return _coot.remove_named_view(*args)
remove_named_view = _coot.remove_named_view

def remove_view(*args):
  return _coot.remove_view(*args)
remove_view = _coot.remove_view

def go_to_first_view(*args):
  return _coot.go_to_first_view(*args)
go_to_first_view = _coot.go_to_first_view

def go_to_view_number(*args):
  return _coot.go_to_view_number(*args)
go_to_view_number = _coot.go_to_view_number

def add_spin_view(*args):
  return _coot.add_spin_view(*args)
add_spin_view = _coot.add_spin_view

def add_view_description(*args):
  return _coot.add_view_description(*args)
add_view_description = _coot.add_view_description

def add_action_view(*args):
  return _coot.add_action_view(*args)
add_action_view = _coot.add_action_view

def insert_action_view_after_view(*args):
  return _coot.insert_action_view_after_view(*args)
insert_action_view_after_view = _coot.insert_action_view_after_view

def n_views():
  return _coot.n_views()
n_views = _coot.n_views

def save_views(*args):
  return _coot.save_views(*args)
save_views = _coot.save_views

def views_play_speed():
  return _coot.views_play_speed()
views_play_speed = _coot.views_play_speed

def set_views_play_speed(*args):
  return _coot.set_views_play_speed(*args)
set_views_play_speed = _coot.set_views_play_speed

def view_name_py(*args):
  return _coot.view_name_py(*args)
view_name_py = _coot.view_name_py

def view_description_py(*args):
  return _coot.view_description_py(*args)
view_description_py = _coot.view_description_py

def go_to_view_py(*args):
  return _coot.go_to_view_py(*args)
go_to_view_py = _coot.go_to_view_py

def clear_all_views():
  return _coot.clear_all_views()
clear_all_views = _coot.clear_all_views

def set_movie_file_name_prefix(*args):
  return _coot.set_movie_file_name_prefix(*args)
set_movie_file_name_prefix = _coot.set_movie_file_name_prefix

def set_movie_frame_number(*args):
  return _coot.set_movie_frame_number(*args)
set_movie_frame_number = _coot.set_movie_frame_number

def movie_file_name_prefix_py():
  return _coot.movie_file_name_prefix_py()
movie_file_name_prefix_py = _coot.movie_file_name_prefix_py

def movie_frame_number():
  return _coot.movie_frame_number()
movie_frame_number = _coot.movie_frame_number

def set_make_movie_mode(*args):
  return _coot.set_make_movie_mode(*args)
set_make_movie_mode = _coot.set_make_movie_mode

def set_background_colour(*args):
  return _coot.set_background_colour(*args)
set_background_colour = _coot.set_background_colour

def redraw_background():
  return _coot.redraw_background()
redraw_background = _coot.redraw_background

def background_is_black_p():
  return _coot.background_is_black_p()
background_is_black_p = _coot.background_is_black_p

def set_ligand_acceptable_fit_fraction(*args):
  return _coot.set_ligand_acceptable_fit_fraction(*args)
set_ligand_acceptable_fit_fraction = _coot.set_ligand_acceptable_fit_fraction

def set_ligand_cluster_sigma_level(*args):
  return _coot.set_ligand_cluster_sigma_level(*args)
set_ligand_cluster_sigma_level = _coot.set_ligand_cluster_sigma_level

def set_ligand_flexible_ligand_n_samples(*args):
  return _coot.set_ligand_flexible_ligand_n_samples(*args)
set_ligand_flexible_ligand_n_samples = _coot.set_ligand_flexible_ligand_n_samples

def set_ligand_verbose_reporting(*args):
  return _coot.set_ligand_verbose_reporting(*args)
set_ligand_verbose_reporting = _coot.set_ligand_verbose_reporting

def set_find_ligand_n_top_ligands(*args):
  return _coot.set_find_ligand_n_top_ligands(*args)
set_find_ligand_n_top_ligands = _coot.set_find_ligand_n_top_ligands

def set_find_ligand_multi_solutions_per_cluster(*args):
  return _coot.set_find_ligand_multi_solutions_per_cluster(*args)
set_find_ligand_multi_solutions_per_cluster = _coot.set_find_ligand_multi_solutions_per_cluster

def set_find_ligand_mask_waters(*args):
  return _coot.set_find_ligand_mask_waters(*args)
set_find_ligand_mask_waters = _coot.set_find_ligand_mask_waters

def set_ligand_cluster_sigma_level_from_widget(*args):
  return _coot.set_ligand_cluster_sigma_level_from_widget(*args)
set_ligand_cluster_sigma_level_from_widget = _coot.set_ligand_cluster_sigma_level_from_widget

def set_ligand_search_protein_molecule(*args):
  return _coot.set_ligand_search_protein_molecule(*args)
set_ligand_search_protein_molecule = _coot.set_ligand_search_protein_molecule

def set_ligand_search_map_molecule(*args):
  return _coot.set_ligand_search_map_molecule(*args)
set_ligand_search_map_molecule = _coot.set_ligand_search_map_molecule

def add_ligand_search_ligand_molecule(*args):
  return _coot.add_ligand_search_ligand_molecule(*args)
add_ligand_search_ligand_molecule = _coot.add_ligand_search_ligand_molecule

def add_ligand_search_wiggly_ligand_molecule(*args):
  return _coot.add_ligand_search_wiggly_ligand_molecule(*args)
add_ligand_search_wiggly_ligand_molecule = _coot.add_ligand_search_wiggly_ligand_molecule

def execute_ligand_search_py():
  return _coot.execute_ligand_search_py()
execute_ligand_search_py = _coot.execute_ligand_search_py

def free_ligand_search_user_data(*args):
  return _coot.free_ligand_search_user_data(*args)
free_ligand_search_user_data = _coot.free_ligand_search_user_data

def add_ligand_clear_ligands():
  return _coot.add_ligand_clear_ligands()
add_ligand_clear_ligands = _coot.add_ligand_clear_ligands

def ligand_expert():
  return _coot.ligand_expert()
ligand_expert = _coot.ligand_expert

def do_find_ligands_dialog():
  return _coot.do_find_ligands_dialog()
do_find_ligands_dialog = _coot.do_find_ligands_dialog

def fill_ligands_dialog(*args):
  return _coot.fill_ligands_dialog(*args)
fill_ligands_dialog = _coot.fill_ligands_dialog

def fill_ligands_dialog_map_bits(*args):
  return _coot.fill_ligands_dialog_map_bits(*args)
fill_ligands_dialog_map_bits = _coot.fill_ligands_dialog_map_bits

def fill_ligands_dialog_protein_bits(*args):
  return _coot.fill_ligands_dialog_protein_bits(*args)
fill_ligands_dialog_protein_bits = _coot.fill_ligands_dialog_protein_bits

def fill_ligands_dialog_ligands_bits(*args):
  return _coot.fill_ligands_dialog_ligands_bits(*args)
fill_ligands_dialog_ligands_bits = _coot.fill_ligands_dialog_ligands_bits

def do_find_ligand_many_atoms_in_ligands(*args):
  return _coot.do_find_ligand_many_atoms_in_ligands(*args)
do_find_ligand_many_atoms_in_ligands = _coot.do_find_ligand_many_atoms_in_ligands

def fill_ligands_dialog_map_bits_by_dialog_name(*args):
  return _coot.fill_ligands_dialog_map_bits_by_dialog_name(*args)
fill_ligands_dialog_map_bits_by_dialog_name = _coot.fill_ligands_dialog_map_bits_by_dialog_name

def fill_ligands_dialog_protein_bits_by_dialog_name(*args):
  return _coot.fill_ligands_dialog_protein_bits_by_dialog_name(*args)
fill_ligands_dialog_protein_bits_by_dialog_name = _coot.fill_ligands_dialog_protein_bits_by_dialog_name

def fill_vbox_with_coords_options_by_dialog_name(*args):
  return _coot.fill_vbox_with_coords_options_by_dialog_name(*args)
fill_vbox_with_coords_options_by_dialog_name = _coot.fill_vbox_with_coords_options_by_dialog_name

def fill_ligands_sigma_level_entry(*args):
  return _coot.fill_ligands_sigma_level_entry(*args)
fill_ligands_sigma_level_entry = _coot.fill_ligands_sigma_level_entry

def fill_ligands_expert_options(*args):
  return _coot.fill_ligands_expert_options(*args)
fill_ligands_expert_options = _coot.fill_ligands_expert_options

def set_ligand_expert_options_from_widget(*args):
  return _coot.set_ligand_expert_options_from_widget(*args)
set_ligand_expert_options_from_widget = _coot.set_ligand_expert_options_from_widget

def match_ligand_torsions(*args):
  return _coot.match_ligand_torsions(*args)
match_ligand_torsions = _coot.match_ligand_torsions

def overlap_ligands_py(*args):
  return _coot.overlap_ligands_py(*args)
overlap_ligands_py = _coot.overlap_ligands_py

def analyse_ligand_differences_py(*args):
  return _coot.analyse_ligand_differences_py(*args)
analyse_ligand_differences_py = _coot.analyse_ligand_differences_py

def match_ligand_atom_names(*args):
  return _coot.match_ligand_atom_names(*args)
match_ligand_atom_names = _coot.match_ligand_atom_names

def exchange_ligand(*args):
  return _coot.exchange_ligand(*args)
exchange_ligand = _coot.exchange_ligand

def execute_get_mols_ligand_search(*args):
  return _coot.execute_get_mols_ligand_search(*args)
execute_get_mols_ligand_search = _coot.execute_get_mols_ligand_search

def free_blob_dialog_memory(*args):
  return _coot.free_blob_dialog_memory(*args)
free_blob_dialog_memory = _coot.free_blob_dialog_memory

def flip_ligand(*args):
  return _coot.flip_ligand(*args)
flip_ligand = _coot.flip_ligand

def renumber_waters(*args):
  return _coot.renumber_waters(*args)
renumber_waters = _coot.renumber_waters

def wrapped_create_find_waters_dialog():
  return _coot.wrapped_create_find_waters_dialog()
wrapped_create_find_waters_dialog = _coot.wrapped_create_find_waters_dialog

def fill_find_waters_dialog(*args):
  return _coot.fill_find_waters_dialog(*args)
fill_find_waters_dialog = _coot.fill_find_waters_dialog

def execute_find_waters(*args):
  return _coot.execute_find_waters(*args)
execute_find_waters = _coot.execute_find_waters

def execute_find_waters_real(*args):
  return _coot.execute_find_waters_real(*args)
execute_find_waters_real = _coot.execute_find_waters_real

def find_waters(*args):
  return _coot.find_waters(*args)
find_waters = _coot.find_waters

def move_waters_to_around_protein(*args):
  return _coot.move_waters_to_around_protein(*args)
move_waters_to_around_protein = _coot.move_waters_to_around_protein

def move_hetgroups_to_around_protein(*args):
  return _coot.move_hetgroups_to_around_protein(*args)
move_hetgroups_to_around_protein = _coot.move_hetgroups_to_around_protein

def max_water_distance(*args):
  return _coot.max_water_distance(*args)
max_water_distance = _coot.max_water_distance

def get_text_for_find_waters_sigma_cut_off():
  return _coot.get_text_for_find_waters_sigma_cut_off()
get_text_for_find_waters_sigma_cut_off = _coot.get_text_for_find_waters_sigma_cut_off

def set_value_for_find_waters_sigma_cut_off(*args):
  return _coot.set_value_for_find_waters_sigma_cut_off(*args)
set_value_for_find_waters_sigma_cut_off = _coot.set_value_for_find_waters_sigma_cut_off

def on_big_blob_button_clicked(*args):
  return _coot.on_big_blob_button_clicked(*args)
on_big_blob_button_clicked = _coot.on_big_blob_button_clicked

def set_water_check_spherical_variance_limit(*args):
  return _coot.set_water_check_spherical_variance_limit(*args)
set_water_check_spherical_variance_limit = _coot.set_water_check_spherical_variance_limit

def set_ligand_water_to_protein_distance_limits(*args):
  return _coot.set_ligand_water_to_protein_distance_limits(*args)
set_ligand_water_to_protein_distance_limits = _coot.set_ligand_water_to_protein_distance_limits

def set_ligand_water_n_cycles(*args):
  return _coot.set_ligand_water_n_cycles(*args)
set_ligand_water_n_cycles = _coot.set_ligand_water_n_cycles

def set_write_peaksearched_waters():
  return _coot.set_write_peaksearched_waters()
set_write_peaksearched_waters = _coot.set_write_peaksearched_waters

def execute_find_blobs(*args):
  return _coot.execute_find_blobs(*args)
execute_find_blobs = _coot.execute_find_blobs

def execute_find_blobs_from_widget(*args):
  return _coot.execute_find_blobs_from_widget(*args)
execute_find_blobs_from_widget = _coot.execute_find_blobs_from_widget

def wrapped_create_unmodelled_blobs_dialog():
  return _coot.wrapped_create_unmodelled_blobs_dialog()
wrapped_create_unmodelled_blobs_dialog = _coot.wrapped_create_unmodelled_blobs_dialog

def split_water(*args):
  return _coot.split_water(*args)
split_water = _coot.split_water

def set_default_bond_thickness(*args):
  return _coot.set_default_bond_thickness(*args)
set_default_bond_thickness = _coot.set_default_bond_thickness

def set_bond_thickness(*args):
  return _coot.set_bond_thickness(*args)
set_bond_thickness = _coot.set_bond_thickness

def set_bond_thickness_intermediate_atoms(*args):
  return _coot.set_bond_thickness_intermediate_atoms(*args)
set_bond_thickness_intermediate_atoms = _coot.set_bond_thickness_intermediate_atoms

def set_unbonded_atom_star_size(*args):
  return _coot.set_unbonded_atom_star_size(*args)
set_unbonded_atom_star_size = _coot.set_unbonded_atom_star_size

def set_default_representation_type(*args):
  return _coot.set_default_representation_type(*args)
set_default_representation_type = _coot.set_default_representation_type

def get_default_bond_thickness():
  return _coot.get_default_bond_thickness()
get_default_bond_thickness = _coot.get_default_bond_thickness

def set_draw_zero_occ_markers(*args):
  return _coot.set_draw_zero_occ_markers(*args)
set_draw_zero_occ_markers = _coot.set_draw_zero_occ_markers

def set_draw_hydrogens(*args):
  return _coot.set_draw_hydrogens(*args)
set_draw_hydrogens = _coot.set_draw_hydrogens

def draw_hydrogens_state(*args):
  return _coot.draw_hydrogens_state(*args)
draw_hydrogens_state = _coot.draw_hydrogens_state

def graphics_to_ca_representation(*args):
  return _coot.graphics_to_ca_representation(*args)
graphics_to_ca_representation = _coot.graphics_to_ca_representation

def graphics_to_ca_plus_ligands_representation(*args):
  return _coot.graphics_to_ca_plus_ligands_representation(*args)
graphics_to_ca_plus_ligands_representation = _coot.graphics_to_ca_plus_ligands_representation

def graphics_to_bonds_no_waters_representation(*args):
  return _coot.graphics_to_bonds_no_waters_representation(*args)
graphics_to_bonds_no_waters_representation = _coot.graphics_to_bonds_no_waters_representation

def graphics_to_bonds_representation(*args):
  return _coot.graphics_to_bonds_representation(*args)
graphics_to_bonds_representation = _coot.graphics_to_bonds_representation

def graphics_to_ca_plus_ligands_sec_struct_representation(*args):
  return _coot.graphics_to_ca_plus_ligands_sec_struct_representation(*args)
graphics_to_ca_plus_ligands_sec_struct_representation = _coot.graphics_to_ca_plus_ligands_sec_struct_representation

def graphics_to_sec_struct_bonds_representation(*args):
  return _coot.graphics_to_sec_struct_bonds_representation(*args)
graphics_to_sec_struct_bonds_representation = _coot.graphics_to_sec_struct_bonds_representation

def graphics_to_rainbow_representation(*args):
  return _coot.graphics_to_rainbow_representation(*args)
graphics_to_rainbow_representation = _coot.graphics_to_rainbow_representation

def graphics_to_b_factor_representation(*args):
  return _coot.graphics_to_b_factor_representation(*args)
graphics_to_b_factor_representation = _coot.graphics_to_b_factor_representation

def graphics_to_b_factor_cas_representation(*args):
  return _coot.graphics_to_b_factor_cas_representation(*args)
graphics_to_b_factor_cas_representation = _coot.graphics_to_b_factor_cas_representation

def graphics_to_occupancy_representation(*args):
  return _coot.graphics_to_occupancy_representation(*args)
graphics_to_occupancy_representation = _coot.graphics_to_occupancy_representation

def graphics_molecule_bond_type(*args):
  return _coot.graphics_molecule_bond_type(*args)
graphics_molecule_bond_type = _coot.graphics_molecule_bond_type

def set_b_factor_bonds_scale_factor(*args):
  return _coot.set_b_factor_bonds_scale_factor(*args)
set_b_factor_bonds_scale_factor = _coot.set_b_factor_bonds_scale_factor

def change_model_molecule_representation_mode(*args):
  return _coot.change_model_molecule_representation_mode(*args)
change_model_molecule_representation_mode = _coot.change_model_molecule_representation_mode

def wrapped_create_bond_parameters_dialog():
  return _coot.wrapped_create_bond_parameters_dialog()
wrapped_create_bond_parameters_dialog = _coot.wrapped_create_bond_parameters_dialog

def apply_bond_parameters(*args):
  return _coot.apply_bond_parameters(*args)
apply_bond_parameters = _coot.apply_bond_parameters

def make_ball_and_stick(*args):
  return _coot.make_ball_and_stick(*args)
make_ball_and_stick = _coot.make_ball_and_stick

def clear_ball_and_stick(*args):
  return _coot.clear_ball_and_stick(*args)
clear_ball_and_stick = _coot.clear_ball_and_stick

def set_show_additional_representation(*args):
  return _coot.set_show_additional_representation(*args)
set_show_additional_representation = _coot.set_show_additional_representation

def set_show_all_additional_representations(*args):
  return _coot.set_show_all_additional_representations(*args)
set_show_all_additional_representations = _coot.set_show_all_additional_representations

def all_additional_representations_off_except(*args):
  return _coot.all_additional_representations_off_except(*args)
all_additional_representations_off_except = _coot.all_additional_representations_off_except

def delete_additional_representation(*args):
  return _coot.delete_additional_representation(*args)
delete_additional_representation = _coot.delete_additional_representation

def additional_representation_by_string(*args):
  return _coot.additional_representation_by_string(*args)
additional_representation_by_string = _coot.additional_representation_by_string

def additional_representation_by_attributes(*args):
  return _coot.additional_representation_by_attributes(*args)
additional_representation_by_attributes = _coot.additional_representation_by_attributes

def wrapped_create_add_additional_representation_gui():
  return _coot.wrapped_create_add_additional_representation_gui()
wrapped_create_add_additional_representation_gui = _coot.wrapped_create_add_additional_representation_gui

def add_additional_representation_by_widget(*args):
  return _coot.add_additional_representation_by_widget(*args)
add_additional_representation_by_widget = _coot.add_additional_representation_by_widget

def add_reps_molecule_option_menu_item_select(*args):
  return _coot.add_reps_molecule_option_menu_item_select(*args)
add_reps_molecule_option_menu_item_select = _coot.add_reps_molecule_option_menu_item_select

def additional_representation_info_py(*args):
  return _coot.additional_representation_info_py(*args)
additional_representation_info_py = _coot.additional_representation_info_py

def set_flev_idle_ligand_interactions(*args):
  return _coot.set_flev_idle_ligand_interactions(*args)
set_flev_idle_ligand_interactions = _coot.set_flev_idle_ligand_interactions

def toggle_flev_idle_ligand_interactions():
  return _coot.toggle_flev_idle_ligand_interactions()
toggle_flev_idle_ligand_interactions = _coot.toggle_flev_idle_ligand_interactions

def dots(*args):
  return _coot.dots(*args)
dots = _coot.dots

def set_dots_colour(*args):
  return _coot.set_dots_colour(*args)
set_dots_colour = _coot.set_dots_colour

def unset_dots_colour(*args):
  return _coot.unset_dots_colour(*args)
unset_dots_colour = _coot.unset_dots_colour

def clear_dots(*args):
  return _coot.clear_dots(*args)
clear_dots = _coot.clear_dots

def clear_dots_by_name(*args):
  return _coot.clear_dots_by_name(*args)
clear_dots_by_name = _coot.clear_dots_by_name

def n_dots_sets(*args):
  return _coot.n_dots_sets(*args)
n_dots_sets = _coot.n_dots_sets

def do_pepflip(*args):
  return _coot.do_pepflip(*args)
do_pepflip = _coot.do_pepflip

def pepflip(*args):
  return _coot.pepflip(*args)
pepflip = _coot.pepflip

def do_rigid_body_refine(*args):
  return _coot.do_rigid_body_refine(*args)
do_rigid_body_refine = _coot.do_rigid_body_refine

def rigid_body_refine_zone(*args):
  return _coot.rigid_body_refine_zone(*args)
rigid_body_refine_zone = _coot.rigid_body_refine_zone

def rigid_body_refine_by_atom_selection(*args):
  return _coot.rigid_body_refine_by_atom_selection(*args)
rigid_body_refine_by_atom_selection = _coot.rigid_body_refine_by_atom_selection

def rigid_body_refine_by_residue_ranges_py(*args):
  return _coot.rigid_body_refine_by_residue_ranges_py(*args)
rigid_body_refine_by_residue_ranges_py = _coot.rigid_body_refine_by_residue_ranges_py

def execute_rigid_body_refine(*args):
  return _coot.execute_rigid_body_refine(*args)
execute_rigid_body_refine = _coot.execute_rigid_body_refine

def set_rigid_body_fit_acceptable_fit_fraction(*args):
  return _coot.set_rigid_body_fit_acceptable_fit_fraction(*args)
set_rigid_body_fit_acceptable_fit_fraction = _coot.set_rigid_body_fit_acceptable_fit_fraction

def toggle_dynamic_map_display_size():
  return _coot.toggle_dynamic_map_display_size()
toggle_dynamic_map_display_size = _coot.toggle_dynamic_map_display_size

def toggle_dynamic_map_sampling():
  return _coot.toggle_dynamic_map_sampling()
toggle_dynamic_map_sampling = _coot.toggle_dynamic_map_sampling

def set_map_dynamic_map_sampling_checkbutton(*args):
  return _coot.set_map_dynamic_map_sampling_checkbutton(*args)
set_map_dynamic_map_sampling_checkbutton = _coot.set_map_dynamic_map_sampling_checkbutton

def set_map_dynamic_map_display_size_checkbutton(*args):
  return _coot.set_map_dynamic_map_display_size_checkbutton(*args)
set_map_dynamic_map_display_size_checkbutton = _coot.set_map_dynamic_map_display_size_checkbutton

def set_dynamic_map_size_display_on():
  return _coot.set_dynamic_map_size_display_on()
set_dynamic_map_size_display_on = _coot.set_dynamic_map_size_display_on

def set_dynamic_map_size_display_off():
  return _coot.set_dynamic_map_size_display_off()
set_dynamic_map_size_display_off = _coot.set_dynamic_map_size_display_off

def get_dynamic_map_size_display():
  return _coot.get_dynamic_map_size_display()
get_dynamic_map_size_display = _coot.get_dynamic_map_size_display

def set_dynamic_map_sampling_on():
  return _coot.set_dynamic_map_sampling_on()
set_dynamic_map_sampling_on = _coot.set_dynamic_map_sampling_on

def set_dynamic_map_sampling_off():
  return _coot.set_dynamic_map_sampling_off()
set_dynamic_map_sampling_off = _coot.set_dynamic_map_sampling_off

def get_dynamic_map_sampling():
  return _coot.get_dynamic_map_sampling()
get_dynamic_map_sampling = _coot.get_dynamic_map_sampling

def set_dynamic_map_zoom_offset(*args):
  return _coot.set_dynamic_map_zoom_offset(*args)
set_dynamic_map_zoom_offset = _coot.set_dynamic_map_zoom_offset

def do_add_terminal_residue(*args):
  return _coot.do_add_terminal_residue(*args)
do_add_terminal_residue = _coot.do_add_terminal_residue

def set_add_terminal_residue_n_phi_psi_trials(*args):
  return _coot.set_add_terminal_residue_n_phi_psi_trials(*args)
set_add_terminal_residue_n_phi_psi_trials = _coot.set_add_terminal_residue_n_phi_psi_trials

def set_add_terminal_residue_add_other_residue_flag(*args):
  return _coot.set_add_terminal_residue_add_other_residue_flag(*args)
set_add_terminal_residue_add_other_residue_flag = _coot.set_add_terminal_residue_add_other_residue_flag

def set_terminal_residue_do_rigid_body_refine(*args):
  return _coot.set_terminal_residue_do_rigid_body_refine(*args)
set_terminal_residue_do_rigid_body_refine = _coot.set_terminal_residue_do_rigid_body_refine

def add_terminal_residue_immediate_addition_state():
  return _coot.add_terminal_residue_immediate_addition_state()
add_terminal_residue_immediate_addition_state = _coot.add_terminal_residue_immediate_addition_state

def set_add_terminal_residue_immediate_addition(*args):
  return _coot.set_add_terminal_residue_immediate_addition(*args)
set_add_terminal_residue_immediate_addition = _coot.set_add_terminal_residue_immediate_addition

def add_terminal_residue(*args):
  return _coot.add_terminal_residue(*args)
add_terminal_residue = _coot.add_terminal_residue

def add_terminal_residue_using_phi_psi(*args):
  return _coot.add_terminal_residue_using_phi_psi(*args)
add_terminal_residue_using_phi_psi = _coot.add_terminal_residue_using_phi_psi

def set_add_terminal_residue_default_residue_type(*args):
  return _coot.set_add_terminal_residue_default_residue_type(*args)
set_add_terminal_residue_default_residue_type = _coot.set_add_terminal_residue_default_residue_type

def set_add_terminal_residue_do_post_refine(*args):
  return _coot.set_add_terminal_residue_do_post_refine(*args)
set_add_terminal_residue_do_post_refine = _coot.set_add_terminal_residue_do_post_refine

def add_terminal_residue_do_post_refine_state():
  return _coot.add_terminal_residue_do_post_refine_state()
add_terminal_residue_do_post_refine_state = _coot.add_terminal_residue_do_post_refine_state

def find_terminal_residue_type_py(*args):
  return _coot.find_terminal_residue_type_py(*args)
find_terminal_residue_type_py = _coot.find_terminal_residue_type_py

def delete_atom_by_atom_index(*args):
  return _coot.delete_atom_by_atom_index(*args)
delete_atom_by_atom_index = _coot.delete_atom_by_atom_index

def delete_residue_by_atom_index(*args):
  return _coot.delete_residue_by_atom_index(*args)
delete_residue_by_atom_index = _coot.delete_residue_by_atom_index

def delete_residue_hydrogens_by_atom_index(*args):
  return _coot.delete_residue_hydrogens_by_atom_index(*args)
delete_residue_hydrogens_by_atom_index = _coot.delete_residue_hydrogens_by_atom_index

def delete_residue_range(*args):
  return _coot.delete_residue_range(*args)
delete_residue_range = _coot.delete_residue_range

def delete_residue(*args):
  return _coot.delete_residue(*args)
delete_residue = _coot.delete_residue

def delete_residue_with_full_spec(*args):
  return _coot.delete_residue_with_full_spec(*args)
delete_residue_with_full_spec = _coot.delete_residue_with_full_spec

def delete_residue_hydrogens(*args):
  return _coot.delete_residue_hydrogens(*args)
delete_residue_hydrogens = _coot.delete_residue_hydrogens

def delete_atom(*args):
  return _coot.delete_atom(*args)
delete_atom = _coot.delete_atom

def delete_residue_sidechain(*args):
  return _coot.delete_residue_sidechain(*args)
delete_residue_sidechain = _coot.delete_residue_sidechain

def delete_hydrogens(*args):
  return _coot.delete_hydrogens(*args)
delete_hydrogens = _coot.delete_hydrogens

def set_delete_atom_mode():
  return _coot.set_delete_atom_mode()
set_delete_atom_mode = _coot.set_delete_atom_mode

def set_delete_residue_mode():
  return _coot.set_delete_residue_mode()
set_delete_residue_mode = _coot.set_delete_residue_mode

def set_delete_residue_zone_mode():
  return _coot.set_delete_residue_zone_mode()
set_delete_residue_zone_mode = _coot.set_delete_residue_zone_mode

def set_delete_residue_hydrogens_mode():
  return _coot.set_delete_residue_hydrogens_mode()
set_delete_residue_hydrogens_mode = _coot.set_delete_residue_hydrogens_mode

def set_delete_water_mode():
  return _coot.set_delete_water_mode()
set_delete_water_mode = _coot.set_delete_water_mode

def set_delete_sidechain_mode():
  return _coot.set_delete_sidechain_mode()
set_delete_sidechain_mode = _coot.set_delete_sidechain_mode

def delete_item_mode_is_atom_p():
  return _coot.delete_item_mode_is_atom_p()
delete_item_mode_is_atom_p = _coot.delete_item_mode_is_atom_p

def delete_item_mode_is_residue_p():
  return _coot.delete_item_mode_is_residue_p()
delete_item_mode_is_residue_p = _coot.delete_item_mode_is_residue_p

def delete_item_mode_is_water_p():
  return _coot.delete_item_mode_is_water_p()
delete_item_mode_is_water_p = _coot.delete_item_mode_is_water_p

def delete_item_mode_is_sidechain_p():
  return _coot.delete_item_mode_is_sidechain_p()
delete_item_mode_is_sidechain_p = _coot.delete_item_mode_is_sidechain_p

def store_delete_item_widget(*args):
  return _coot.store_delete_item_widget(*args)
store_delete_item_widget = _coot.store_delete_item_widget

def clear_pending_delete_item():
  return _coot.clear_pending_delete_item()
clear_pending_delete_item = _coot.clear_pending_delete_item

def clear_delete_item_widget():
  return _coot.clear_delete_item_widget()
clear_delete_item_widget = _coot.clear_delete_item_widget

def store_delete_item_widget_position():
  return _coot.store_delete_item_widget_position()
store_delete_item_widget_position = _coot.store_delete_item_widget_position

def delete_item_widget_is_being_shown():
  return _coot.delete_item_widget_is_being_shown()
delete_item_widget_is_being_shown = _coot.delete_item_widget_is_being_shown

def delete_item_widget_keep_active_on():
  return _coot.delete_item_widget_keep_active_on()
delete_item_widget_keep_active_on = _coot.delete_item_widget_keep_active_on

def wrapped_create_delete_item_dialog():
  return _coot.wrapped_create_delete_item_dialog()
wrapped_create_delete_item_dialog = _coot.wrapped_create_delete_item_dialog

def delete_object_handle_delete_dialog(*args):
  return _coot.delete_object_handle_delete_dialog(*args)
delete_object_handle_delete_dialog = _coot.delete_object_handle_delete_dialog

def do_rot_trans_setup(*args):
  return _coot.do_rot_trans_setup(*args)
do_rot_trans_setup = _coot.do_rot_trans_setup

def do_rot_trans_adjustments(*args):
  return _coot.do_rot_trans_adjustments(*args)
do_rot_trans_adjustments = _coot.do_rot_trans_adjustments

def rot_trans_reset_previous():
  return _coot.rot_trans_reset_previous()
rot_trans_reset_previous = _coot.rot_trans_reset_previous

def set_rotate_translate_zone_rotates_about_zone_centre(*args):
  return _coot.set_rotate_translate_zone_rotates_about_zone_centre(*args)
set_rotate_translate_zone_rotates_about_zone_centre = _coot.set_rotate_translate_zone_rotates_about_zone_centre

def set_rot_trans_object_type(*args):
  return _coot.set_rot_trans_object_type(*args)
set_rot_trans_object_type = _coot.set_rot_trans_object_type

def get_rot_trans_object_type():
  return _coot.get_rot_trans_object_type()
get_rot_trans_object_type = _coot.get_rot_trans_object_type

def do_cis_trans_conversion_setup(*args):
  return _coot.do_cis_trans_conversion_setup(*args)
do_cis_trans_conversion_setup = _coot.do_cis_trans_conversion_setup

def cis_trans_convert(*args):
  return _coot.cis_trans_convert(*args)
cis_trans_convert = _coot.cis_trans_convert

def cis_peptides_py(*args):
  return _coot.cis_peptides_py(*args)
cis_peptides_py = _coot.cis_peptides_py

def do_db_main(*args):
  return _coot.do_db_main(*args)
do_db_main = _coot.do_db_main

def db_mainchain(*args):
  return _coot.db_mainchain(*args)
db_mainchain = _coot.db_mainchain

def close_molecule(*args):
  return _coot.close_molecule(*args)
close_molecule = _coot.close_molecule

def close_molecule_by_widget(*args):
  return _coot.close_molecule_by_widget(*args)
close_molecule_by_widget = _coot.close_molecule_by_widget

def fill_close_option_menu_with_all_molecule_options(*args):
  return _coot.fill_close_option_menu_with_all_molecule_options(*args)
fill_close_option_menu_with_all_molecule_options = _coot.fill_close_option_menu_with_all_molecule_options

def close_molecule_item_select(*args):
  return _coot.close_molecule_item_select(*args)
close_molecule_item_select = _coot.close_molecule_item_select

def new_close_molecules(*args):
  return _coot.new_close_molecules(*args)
new_close_molecules = _coot.new_close_molecules

def wrapped_create_new_close_molecules_dialog():
  return _coot.wrapped_create_new_close_molecules_dialog()
wrapped_create_new_close_molecules_dialog = _coot.wrapped_create_new_close_molecules_dialog

def set_rotamer_search_mode(*args):
  return _coot.set_rotamer_search_mode(*args)
set_rotamer_search_mode = _coot.set_rotamer_search_mode

def setup_rotamers(*args):
  return _coot.setup_rotamers(*args)
setup_rotamers = _coot.setup_rotamers

def do_rotamers(*args):
  return _coot.do_rotamers(*args)
do_rotamers = _coot.do_rotamers

def show_rotamers_dialog(*args):
  return _coot.show_rotamers_dialog(*args)
show_rotamers_dialog = _coot.show_rotamers_dialog

def set_rotamer_lowest_probability(*args):
  return _coot.set_rotamer_lowest_probability(*args)
set_rotamer_lowest_probability = _coot.set_rotamer_lowest_probability

def set_rotamer_check_clashes(*args):
  return _coot.set_rotamer_check_clashes(*args)
set_rotamer_check_clashes = _coot.set_rotamer_check_clashes

def auto_fit_best_rotamer(*args):
  return _coot.auto_fit_best_rotamer(*args)
auto_fit_best_rotamer = _coot.auto_fit_best_rotamer

def set_auto_fit_best_rotamer_clash_flag(*args):
  return _coot.set_auto_fit_best_rotamer_clash_flag(*args)
set_auto_fit_best_rotamer_clash_flag = _coot.set_auto_fit_best_rotamer_clash_flag

def rotamer_score(*args):
  return _coot.rotamer_score(*args)
rotamer_score = _coot.rotamer_score

def setup_auto_fit_rotamer(*args):
  return _coot.setup_auto_fit_rotamer(*args)
setup_auto_fit_rotamer = _coot.setup_auto_fit_rotamer

def n_rotamers(*args):
  return _coot.n_rotamers(*args)
n_rotamers = _coot.n_rotamers

def set_residue_to_rotamer_number(*args):
  return _coot.set_residue_to_rotamer_number(*args)
set_residue_to_rotamer_number = _coot.set_residue_to_rotamer_number

def set_residue_to_rotamer_name(*args):
  return _coot.set_residue_to_rotamer_name(*args)
set_residue_to_rotamer_name = _coot.set_residue_to_rotamer_name

def get_rotamer_name_py(*args):
  return _coot.get_rotamer_name_py(*args)
get_rotamer_name_py = _coot.get_rotamer_name_py

def fill_partial_residues(*args):
  return _coot.fill_partial_residues(*args)
fill_partial_residues = _coot.fill_partial_residues

def fill_partial_residue(*args):
  return _coot.fill_partial_residue(*args)
fill_partial_residue = _coot.fill_partial_residue

def missing_atom_info_py(*args):
  return _coot.missing_atom_info_py(*args)
missing_atom_info_py = _coot.missing_atom_info_py

def set_graphics_rotamer_dialog(*args):
  return _coot.set_graphics_rotamer_dialog(*args)
set_graphics_rotamer_dialog = _coot.set_graphics_rotamer_dialog

def rotamer_graphs_py(*args):
  return _coot.rotamer_graphs_py(*args)
rotamer_graphs_py = _coot.rotamer_graphs_py

def do_180_degree_side_chain_flip(*args):
  return _coot.do_180_degree_side_chain_flip(*args)
do_180_degree_side_chain_flip = _coot.do_180_degree_side_chain_flip

def setup_180_degree_flip(*args):
  return _coot.setup_180_degree_flip(*args)
setup_180_degree_flip = _coot.setup_180_degree_flip

def setup_mutate(*args):
  return _coot.setup_mutate(*args)
setup_mutate = _coot.setup_mutate

def setup_mutate_auto_fit(*args):
  return _coot.setup_mutate_auto_fit(*args)
setup_mutate_auto_fit = _coot.setup_mutate_auto_fit

def do_mutation(*args):
  return _coot.do_mutation(*args)
do_mutation = _coot.do_mutation

def progressive_residues_in_chain_check(*args):
  return _coot.progressive_residues_in_chain_check(*args)
progressive_residues_in_chain_check = _coot.progressive_residues_in_chain_check

def mutate(*args):
  return _coot.mutate(*args)
mutate = _coot.mutate

def mutate_base(*args):
  return _coot.mutate_base(*args)
mutate_base = _coot.mutate_base

def set_mutate_auto_fit_do_post_refine(*args):
  return _coot.set_mutate_auto_fit_do_post_refine(*args)
set_mutate_auto_fit_do_post_refine = _coot.set_mutate_auto_fit_do_post_refine

def mutate_auto_fit_do_post_refine_state():
  return _coot.mutate_auto_fit_do_post_refine_state()
mutate_auto_fit_do_post_refine_state = _coot.mutate_auto_fit_do_post_refine_state

def set_rotamer_auto_fit_do_post_refine(*args):
  return _coot.set_rotamer_auto_fit_do_post_refine(*args)
set_rotamer_auto_fit_do_post_refine = _coot.set_rotamer_auto_fit_do_post_refine

def rotamer_auto_fit_do_post_refine_state():
  return _coot.rotamer_auto_fit_do_post_refine_state()
rotamer_auto_fit_do_post_refine_state = _coot.rotamer_auto_fit_do_post_refine_state

def mutate_single_residue_by_serial_number(*args):
  return _coot.mutate_single_residue_by_serial_number(*args)
mutate_single_residue_by_serial_number = _coot.mutate_single_residue_by_serial_number

def mutate_single_residue_by_seqno(*args):
  return _coot.mutate_single_residue_by_seqno(*args)
mutate_single_residue_by_seqno = _coot.mutate_single_residue_by_seqno

def do_base_mutation(*args):
  return _coot.do_base_mutation(*args)
do_base_mutation = _coot.do_base_mutation

def set_residue_type_chooser_stub_state(*args):
  return _coot.set_residue_type_chooser_stub_state(*args)
set_residue_type_chooser_stub_state = _coot.set_residue_type_chooser_stub_state

def alt_conf_split_type_number():
  return _coot.alt_conf_split_type_number()
alt_conf_split_type_number = _coot.alt_conf_split_type_number

def set_add_alt_conf_split_type_number(*args):
  return _coot.set_add_alt_conf_split_type_number(*args)
set_add_alt_conf_split_type_number = _coot.set_add_alt_conf_split_type_number

def add_alt_conf_py(*args):
  return _coot.add_alt_conf_py(*args)
add_alt_conf_py = _coot.add_alt_conf_py

def setup_alt_conf_with_dialog(*args):
  return _coot.setup_alt_conf_with_dialog(*args)
setup_alt_conf_with_dialog = _coot.setup_alt_conf_with_dialog

def unset_add_alt_conf_dialog():
  return _coot.unset_add_alt_conf_dialog()
unset_add_alt_conf_dialog = _coot.unset_add_alt_conf_dialog

def unset_add_alt_conf_define():
  return _coot.unset_add_alt_conf_define()
unset_add_alt_conf_define = _coot.unset_add_alt_conf_define

def altconf():
  return _coot.altconf()
altconf = _coot.altconf

def set_add_alt_conf_new_atoms_occupancy(*args):
  return _coot.set_add_alt_conf_new_atoms_occupancy(*args)
set_add_alt_conf_new_atoms_occupancy = _coot.set_add_alt_conf_new_atoms_occupancy

def set_show_alt_conf_intermediate_atoms(*args):
  return _coot.set_show_alt_conf_intermediate_atoms(*args)
set_show_alt_conf_intermediate_atoms = _coot.set_show_alt_conf_intermediate_atoms

def show_alt_conf_intermediate_atoms_state():
  return _coot.show_alt_conf_intermediate_atoms_state()
show_alt_conf_intermediate_atoms_state = _coot.show_alt_conf_intermediate_atoms_state

def zero_occupancy_residue_range(*args):
  return _coot.zero_occupancy_residue_range(*args)
zero_occupancy_residue_range = _coot.zero_occupancy_residue_range

def fill_occupancy_residue_range(*args):
  return _coot.fill_occupancy_residue_range(*args)
fill_occupancy_residue_range = _coot.fill_occupancy_residue_range

def set_b_factor_residue_range(*args):
  return _coot.set_b_factor_residue_range(*args)
set_b_factor_residue_range = _coot.set_b_factor_residue_range

def reset_b_factor_residue_range(*args):
  return _coot.reset_b_factor_residue_range(*args)
reset_b_factor_residue_range = _coot.reset_b_factor_residue_range

def place_atom_at_pointer():
  return _coot.place_atom_at_pointer()
place_atom_at_pointer = _coot.place_atom_at_pointer

def place_atom_at_pointer_by_window():
  return _coot.place_atom_at_pointer_by_window()
place_atom_at_pointer_by_window = _coot.place_atom_at_pointer_by_window

def place_typed_atom_at_pointer(*args):
  return _coot.place_typed_atom_at_pointer(*args)
place_typed_atom_at_pointer = _coot.place_typed_atom_at_pointer

def set_pointer_atom_is_dummy(*args):
  return _coot.set_pointer_atom_is_dummy(*args)
set_pointer_atom_is_dummy = _coot.set_pointer_atom_is_dummy

def fill_place_atom_molecule_option_menu(*args):
  return _coot.fill_place_atom_molecule_option_menu(*args)
fill_place_atom_molecule_option_menu = _coot.fill_place_atom_molecule_option_menu

def display_where_is_pointer():
  return _coot.display_where_is_pointer()
display_where_is_pointer = _coot.display_where_is_pointer

def create_pointer_atom_molecule_maybe():
  return _coot.create_pointer_atom_molecule_maybe()
create_pointer_atom_molecule_maybe = _coot.create_pointer_atom_molecule_maybe

def pointer_atom_molecule():
  return _coot.pointer_atom_molecule()
pointer_atom_molecule = _coot.pointer_atom_molecule

def set_pointer_atom_molecule(*args):
  return _coot.set_pointer_atom_molecule(*args)
set_pointer_atom_molecule = _coot.set_pointer_atom_molecule

def set_baton_mode(*args):
  return _coot.set_baton_mode(*args)
set_baton_mode = _coot.set_baton_mode

def try_set_draw_baton(*args):
  return _coot.try_set_draw_baton(*args)
try_set_draw_baton = _coot.try_set_draw_baton

def accept_baton_position():
  return _coot.accept_baton_position()
accept_baton_position = _coot.accept_baton_position

def baton_try_another():
  return _coot.baton_try_another()
baton_try_another = _coot.baton_try_another

def shorten_baton():
  return _coot.shorten_baton()
shorten_baton = _coot.shorten_baton

def lengthen_baton():
  return _coot.lengthen_baton()
lengthen_baton = _coot.lengthen_baton

def baton_build_delete_last_residue():
  return _coot.baton_build_delete_last_residue()
baton_build_delete_last_residue = _coot.baton_build_delete_last_residue

def set_baton_build_params(*args):
  return _coot.set_baton_build_params(*args)
set_baton_build_params = _coot.set_baton_build_params

def set_baton_build_params_from_widget(*args):
  return _coot.set_baton_build_params_from_widget(*args)
set_baton_build_params_from_widget = _coot.set_baton_build_params_from_widget

def baton_mode_calculate_skeleton(*args):
  return _coot.baton_mode_calculate_skeleton(*args)
baton_mode_calculate_skeleton = _coot.baton_mode_calculate_skeleton

def reverse_direction_of_fragment(*args):
  return _coot.reverse_direction_of_fragment(*args)
reverse_direction_of_fragment = _coot.reverse_direction_of_fragment

def setup_reverse_direction(*args):
  return _coot.setup_reverse_direction(*args)
setup_reverse_direction = _coot.setup_reverse_direction

def add_OXT_to_residue(*args):
  return _coot.add_OXT_to_residue(*args)
add_OXT_to_residue = _coot.add_OXT_to_residue

def wrapped_create_add_OXT_dialog():
  return _coot.wrapped_create_add_OXT_dialog()
wrapped_create_add_OXT_dialog = _coot.wrapped_create_add_OXT_dialog

def apply_add_OXT_from_widget(*args):
  return _coot.apply_add_OXT_from_widget(*args)
apply_add_OXT_from_widget = _coot.apply_add_OXT_from_widget

def set_draw_crosshairs(*args):
  return _coot.set_draw_crosshairs(*args)
set_draw_crosshairs = _coot.set_draw_crosshairs

def draw_crosshairs_state():
  return _coot.draw_crosshairs_state()
draw_crosshairs_state = _coot.draw_crosshairs_state

def setup_edit_chi_angles(*args):
  return _coot.setup_edit_chi_angles(*args)
setup_edit_chi_angles = _coot.setup_edit_chi_angles

def rotate_chi(*args):
  return _coot.rotate_chi(*args)
rotate_chi = _coot.rotate_chi

def set_find_hydrogen_torsions(*args):
  return _coot.set_find_hydrogen_torsions(*args)
set_find_hydrogen_torsions = _coot.set_find_hydrogen_torsions

def set_graphics_edit_current_chi(*args):
  return _coot.set_graphics_edit_current_chi(*args)
set_graphics_edit_current_chi = _coot.set_graphics_edit_current_chi

def unset_moving_atom_move_chis():
  return _coot.unset_moving_atom_move_chis()
unset_moving_atom_move_chis = _coot.unset_moving_atom_move_chis

def edit_chi_angles(*args):
  return _coot.edit_chi_angles(*args)
edit_chi_angles = _coot.edit_chi_angles

def set_show_chi_angle_bond(*args):
  return _coot.set_show_chi_angle_bond(*args)
set_show_chi_angle_bond = _coot.set_show_chi_angle_bond

def fill_chi_angles_vbox(*args):
  return _coot.fill_chi_angles_vbox(*args)
fill_chi_angles_vbox = _coot.fill_chi_angles_vbox

def set_edit_chi_angles_reverse_fragment_state(*args):
  return _coot.set_edit_chi_angles_reverse_fragment_state(*args)
set_edit_chi_angles_reverse_fragment_state = _coot.set_edit_chi_angles_reverse_fragment_state

def setup_torsion_general(*args):
  return _coot.setup_torsion_general(*args)
setup_torsion_general = _coot.setup_torsion_general

def toggle_torsion_general_reverse():
  return _coot.toggle_torsion_general_reverse()
toggle_torsion_general_reverse = _coot.toggle_torsion_general_reverse

def backrub_rotamer(*args):
  return _coot.backrub_rotamer(*args)
backrub_rotamer = _coot.backrub_rotamer

def mask_map_by_molecule(*args):
  return _coot.mask_map_by_molecule(*args)
mask_map_by_molecule = _coot.mask_map_by_molecule

def mask_map_by_atom_selection(*args):
  return _coot.mask_map_by_atom_selection(*args)
mask_map_by_atom_selection = _coot.mask_map_by_atom_selection

def set_map_mask_atom_radius(*args):
  return _coot.set_map_mask_atom_radius(*args)
set_map_mask_atom_radius = _coot.set_map_mask_atom_radius

def map_mask_atom_radius():
  return _coot.map_mask_atom_radius()
map_mask_atom_radius = _coot.map_mask_atom_radius

def wrapped_create_check_waters_dialog():
  return _coot.wrapped_create_check_waters_dialog()
wrapped_create_check_waters_dialog = _coot.wrapped_create_check_waters_dialog

def set_check_waters_b_factor_limit(*args):
  return _coot.set_check_waters_b_factor_limit(*args)
set_check_waters_b_factor_limit = _coot.set_check_waters_b_factor_limit

def set_check_waters_map_sigma_limit(*args):
  return _coot.set_check_waters_map_sigma_limit(*args)
set_check_waters_map_sigma_limit = _coot.set_check_waters_map_sigma_limit

def set_check_waters_min_dist_limit(*args):
  return _coot.set_check_waters_min_dist_limit(*args)
set_check_waters_min_dist_limit = _coot.set_check_waters_min_dist_limit

def set_check_waters_max_dist_limit(*args):
  return _coot.set_check_waters_max_dist_limit(*args)
set_check_waters_max_dist_limit = _coot.set_check_waters_max_dist_limit

def check_waters_molecule_menu_item_activate(*args):
  return _coot.check_waters_molecule_menu_item_activate(*args)
check_waters_molecule_menu_item_activate = _coot.check_waters_molecule_menu_item_activate

def check_water_by_difference_maps_option_menu_item_select(*args):
  return _coot.check_water_by_difference_maps_option_menu_item_select(*args)
check_water_by_difference_maps_option_menu_item_select = _coot.check_water_by_difference_maps_option_menu_item_select

def do_check_waters_by_widget(*args):
  return _coot.do_check_waters_by_widget(*args)
do_check_waters_by_widget = _coot.do_check_waters_by_widget

def store_checked_waters_baddies_dialog(*args):
  return _coot.store_checked_waters_baddies_dialog(*args)
store_checked_waters_baddies_dialog = _coot.store_checked_waters_baddies_dialog

def wrapped_checked_waters_baddies_dialog(*args):
  return _coot.wrapped_checked_waters_baddies_dialog(*args)
wrapped_checked_waters_baddies_dialog = _coot.wrapped_checked_waters_baddies_dialog

def delete_checked_waters_baddies(*args):
  return _coot.delete_checked_waters_baddies(*args)
delete_checked_waters_baddies = _coot.delete_checked_waters_baddies

def check_waters_by_difference_map(*args):
  return _coot.check_waters_by_difference_map(*args)
check_waters_by_difference_map = _coot.check_waters_by_difference_map

def check_waters_by_difference_map_sigma_level_state():
  return _coot.check_waters_by_difference_map_sigma_level_state()
check_waters_by_difference_map_sigma_level_state = _coot.check_waters_by_difference_map_sigma_level_state

def set_check_waters_by_difference_map_sigma_level(*args):
  return _coot.set_check_waters_by_difference_map_sigma_level(*args)
set_check_waters_by_difference_map_sigma_level = _coot.set_check_waters_by_difference_map_sigma_level

def highly_coordinated_waters_py(*args):
  return _coot.highly_coordinated_waters_py(*args)
highly_coordinated_waters_py = _coot.highly_coordinated_waters_py

def clear_lsq_matches():
  return _coot.clear_lsq_matches()
clear_lsq_matches = _coot.clear_lsq_matches

def add_lsq_match(*args):
  return _coot.add_lsq_match(*args)
add_lsq_match = _coot.add_lsq_match

def add_lsq_atom_pair_py(*args):
  return _coot.add_lsq_atom_pair_py(*args)
add_lsq_atom_pair_py = _coot.add_lsq_atom_pair_py

def apply_lsq_matches_py(*args):
  return _coot.apply_lsq_matches_py(*args)
apply_lsq_matches_py = _coot.apply_lsq_matches_py

def get_lsq_matrix_py(*args):
  return _coot.get_lsq_matrix_py(*args)
get_lsq_matrix_py = _coot.get_lsq_matrix_py

def apply_lsq_matches_simple(*args):
  return _coot.apply_lsq_matches_simple(*args)
apply_lsq_matches_simple = _coot.apply_lsq_matches_simple

def setup_lsq_deviation(*args):
  return _coot.setup_lsq_deviation(*args)
setup_lsq_deviation = _coot.setup_lsq_deviation

def setup_lsq_plane_define(*args):
  return _coot.setup_lsq_plane_define(*args)
setup_lsq_plane_define = _coot.setup_lsq_plane_define

def wrapped_create_lsq_plane_dialog():
  return _coot.wrapped_create_lsq_plane_dialog()
wrapped_create_lsq_plane_dialog = _coot.wrapped_create_lsq_plane_dialog

def unset_lsq_plane_dialog():
  return _coot.unset_lsq_plane_dialog()
unset_lsq_plane_dialog = _coot.unset_lsq_plane_dialog

def remove_last_lsq_plane_atom():
  return _coot.remove_last_lsq_plane_atom()
remove_last_lsq_plane_atom = _coot.remove_last_lsq_plane_atom

def wrapped_create_least_squares_dialog():
  return _coot.wrapped_create_least_squares_dialog()
wrapped_create_least_squares_dialog = _coot.wrapped_create_least_squares_dialog

def apply_lsq_matches_by_widget(*args):
  return _coot.apply_lsq_matches_by_widget(*args)
apply_lsq_matches_by_widget = _coot.apply_lsq_matches_by_widget

def lsq_ref_mol_option_menu_changed(*args):
  return _coot.lsq_ref_mol_option_menu_changed(*args)
lsq_ref_mol_option_menu_changed = _coot.lsq_ref_mol_option_menu_changed

def lsq_mov_mol_option_menu_changed(*args):
  return _coot.lsq_mov_mol_option_menu_changed(*args)
lsq_mov_mol_option_menu_changed = _coot.lsq_mov_mol_option_menu_changed

def lsq_reference_chain_option_menu_item_activate(*args):
  return _coot.lsq_reference_chain_option_menu_item_activate(*args)
lsq_reference_chain_option_menu_item_activate = _coot.lsq_reference_chain_option_menu_item_activate

def lsq_moving_chain_option_menu_item_activate(*args):
  return _coot.lsq_moving_chain_option_menu_item_activate(*args)
lsq_moving_chain_option_menu_item_activate = _coot.lsq_moving_chain_option_menu_item_activate

def fill_lsq_option_menu_with_chain_options(*args):
  return _coot.fill_lsq_option_menu_with_chain_options(*args)
fill_lsq_option_menu_with_chain_options = _coot.fill_lsq_option_menu_with_chain_options

def trim_molecule_by_map(*args):
  return _coot.trim_molecule_by_map(*args)
trim_molecule_by_map = _coot.trim_molecule_by_map

def raster3d(*args):
  return _coot.raster3d(*args)
raster3d = _coot.raster3d

def povray(*args):
  return _coot.povray(*args)
povray = _coot.povray

def renderman(*args):
  return _coot.renderman(*args)
renderman = _coot.renderman

def make_image_raster3d(*args):
  return _coot.make_image_raster3d(*args)
make_image_raster3d = _coot.make_image_raster3d

def make_image_povray(*args):
  return _coot.make_image_povray(*args)
make_image_povray = _coot.make_image_povray

def make_image_raster3d_py(*args):
  return _coot.make_image_raster3d_py(*args)
make_image_raster3d_py = _coot.make_image_raster3d_py

def make_image_povray_py(*args):
  return _coot.make_image_povray_py(*args)
make_image_povray_py = _coot.make_image_povray_py

def set_raster3d_bond_thickness(*args):
  return _coot.set_raster3d_bond_thickness(*args)
set_raster3d_bond_thickness = _coot.set_raster3d_bond_thickness

def set_raster3d_atom_radius(*args):
  return _coot.set_raster3d_atom_radius(*args)
set_raster3d_atom_radius = _coot.set_raster3d_atom_radius

def set_raster3d_density_thickness(*args):
  return _coot.set_raster3d_density_thickness(*args)
set_raster3d_density_thickness = _coot.set_raster3d_density_thickness

def set_renderer_show_atoms(*args):
  return _coot.set_renderer_show_atoms(*args)
set_renderer_show_atoms = _coot.set_renderer_show_atoms

def set_raster3d_bone_thickness(*args):
  return _coot.set_raster3d_bone_thickness(*args)
set_raster3d_bone_thickness = _coot.set_raster3d_bone_thickness

def set_raster3d_shadows_enabled(*args):
  return _coot.set_raster3d_shadows_enabled(*args)
set_raster3d_shadows_enabled = _coot.set_raster3d_shadows_enabled

def set_raster3d_water_sphere(*args):
  return _coot.set_raster3d_water_sphere(*args)
set_raster3d_water_sphere = _coot.set_raster3d_water_sphere

def raster_screen_shot():
  return _coot.raster_screen_shot()
raster_screen_shot = _coot.raster_screen_shot

def raster_screen_shot_py():
  return _coot.raster_screen_shot_py()
raster_screen_shot_py = _coot.raster_screen_shot_py

def citation_notice_off():
  return _coot.citation_notice_off()
citation_notice_off = _coot.citation_notice_off

def superpose(*args):
  return _coot.superpose(*args)
superpose = _coot.superpose

def superpose_with_chain_selection(*args):
  return _coot.superpose_with_chain_selection(*args)
superpose_with_chain_selection = _coot.superpose_with_chain_selection

def superpose_with_atom_selection(*args):
  return _coot.superpose_with_atom_selection(*args)
superpose_with_atom_selection = _coot.superpose_with_atom_selection

def execute_superpose(*args):
  return _coot.execute_superpose(*args)
execute_superpose = _coot.execute_superpose

def wrapped_create_superpose_dialog():
  return _coot.wrapped_create_superpose_dialog()
wrapped_create_superpose_dialog = _coot.wrapped_create_superpose_dialog

def fill_superpose_option_menu_with_chain_options(*args):
  return _coot.fill_superpose_option_menu_with_chain_options(*args)
fill_superpose_option_menu_with_chain_options = _coot.fill_superpose_option_menu_with_chain_options

def set_draw_ncs_ghosts(*args):
  return _coot.set_draw_ncs_ghosts(*args)
set_draw_ncs_ghosts = _coot.set_draw_ncs_ghosts

def draw_ncs_ghosts_state(*args):
  return _coot.draw_ncs_ghosts_state(*args)
draw_ncs_ghosts_state = _coot.draw_ncs_ghosts_state

def set_ncs_ghost_bond_thickness(*args):
  return _coot.set_ncs_ghost_bond_thickness(*args)
set_ncs_ghost_bond_thickness = _coot.set_ncs_ghost_bond_thickness

def ncs_update_ghosts(*args):
  return _coot.ncs_update_ghosts(*args)
ncs_update_ghosts = _coot.ncs_update_ghosts

def make_dynamically_transformed_ncs_maps(*args):
  return _coot.make_dynamically_transformed_ncs_maps(*args)
make_dynamically_transformed_ncs_maps = _coot.make_dynamically_transformed_ncs_maps

def make_dynamically_transformed_ncs_maps_by_widget(*args):
  return _coot.make_dynamically_transformed_ncs_maps_by_widget(*args)
make_dynamically_transformed_ncs_maps_by_widget = _coot.make_dynamically_transformed_ncs_maps_by_widget

def wrapped_create_ncs_maps_dialog():
  return _coot.wrapped_create_ncs_maps_dialog()
wrapped_create_ncs_maps_dialog = _coot.wrapped_create_ncs_maps_dialog

def make_ncs_ghosts_maybe(*args):
  return _coot.make_ncs_ghosts_maybe(*args)
make_ncs_ghosts_maybe = _coot.make_ncs_ghosts_maybe

def add_ncs_matrix(*args):
  return _coot.add_ncs_matrix(*args)
add_ncs_matrix = _coot.add_ncs_matrix

def clear_ncs_ghost_matrices(*args):
  return _coot.clear_ncs_ghost_matrices(*args)
clear_ncs_ghost_matrices = _coot.clear_ncs_ghost_matrices

def add_strict_ncs_matrix(*args):
  return _coot.add_strict_ncs_matrix(*args)
add_strict_ncs_matrix = _coot.add_strict_ncs_matrix

def show_strict_ncs_state(*args):
  return _coot.show_strict_ncs_state(*args)
show_strict_ncs_state = _coot.show_strict_ncs_state

def set_show_strict_ncs(*args):
  return _coot.set_show_strict_ncs(*args)
set_show_strict_ncs = _coot.set_show_strict_ncs

def set_ncs_homology_level(*args):
  return _coot.set_ncs_homology_level(*args)
set_ncs_homology_level = _coot.set_ncs_homology_level

def copy_chain(*args):
  return _coot.copy_chain(*args)
copy_chain = _coot.copy_chain

def copy_from_ncs_master_to_others(*args):
  return _coot.copy_from_ncs_master_to_others(*args)
copy_from_ncs_master_to_others = _coot.copy_from_ncs_master_to_others

def copy_residue_range_from_ncs_master_to_others(*args):
  return _coot.copy_residue_range_from_ncs_master_to_others(*args)
copy_residue_range_from_ncs_master_to_others = _coot.copy_residue_range_from_ncs_master_to_others

def copy_residue_range_from_ncs_master_to_chains_py(*args):
  return _coot.copy_residue_range_from_ncs_master_to_chains_py(*args)
copy_residue_range_from_ncs_master_to_chains_py = _coot.copy_residue_range_from_ncs_master_to_chains_py

def ncs_master_chains_py(*args):
  return _coot.ncs_master_chains_py(*args)
ncs_master_chains_py = _coot.ncs_master_chains_py

def wrapped_create_ncs_control_dialog():
  return _coot.wrapped_create_ncs_control_dialog()
wrapped_create_ncs_control_dialog = _coot.wrapped_create_ncs_control_dialog

def ncs_control_change_ncs_master_to_chain(*args):
  return _coot.ncs_control_change_ncs_master_to_chain(*args)
ncs_control_change_ncs_master_to_chain = _coot.ncs_control_change_ncs_master_to_chain

def ncs_control_change_ncs_master_to_chain_id(*args):
  return _coot.ncs_control_change_ncs_master_to_chain_id(*args)
ncs_control_change_ncs_master_to_chain_id = _coot.ncs_control_change_ncs_master_to_chain_id

def ncs_control_change_ncs_master_to_chain_update_widget(*args):
  return _coot.ncs_control_change_ncs_master_to_chain_update_widget(*args)
ncs_control_change_ncs_master_to_chain_update_widget = _coot.ncs_control_change_ncs_master_to_chain_update_widget

def ncs_control_display_chain(*args):
  return _coot.ncs_control_display_chain(*args)
ncs_control_display_chain = _coot.ncs_control_display_chain

def set_ncs_matrix_type(*args):
  return _coot.set_ncs_matrix_type(*args)
set_ncs_matrix_type = _coot.set_ncs_matrix_type

def get_ncs_matrix_state():
  return _coot.get_ncs_matrix_state()
get_ncs_matrix_state = _coot.get_ncs_matrix_state

def ncs_chain_differences_py(*args):
  return _coot.ncs_chain_differences_py(*args)
ncs_chain_differences_py = _coot.ncs_chain_differences_py

def ncs_chain_ids_py(*args):
  return _coot.ncs_chain_ids_py(*args)
ncs_chain_ids_py = _coot.ncs_chain_ids_py

def ncs_ghosts_py(*args):
  return _coot.ncs_ghosts_py(*args)
ncs_ghosts_py = _coot.ncs_ghosts_py
FIND_SECSTRUC_NORMAL = _coot.FIND_SECSTRUC_NORMAL
FIND_SECSTRUC_STRICT = _coot.FIND_SECSTRUC_STRICT
FIND_SECSTRUC_HI_RES = _coot.FIND_SECSTRUC_HI_RES
FIND_SECSTRUC_LO_RES = _coot.FIND_SECSTRUC_LO_RES

def place_helix_here():
  return _coot.place_helix_here()
place_helix_here = _coot.place_helix_here

def place_strand_here(*args):
  return _coot.place_strand_here(*args)
place_strand_here = _coot.place_strand_here

def place_strand_here_dialog():
  return _coot.place_strand_here_dialog()
place_strand_here_dialog = _coot.place_strand_here_dialog

def find_helices():
  return _coot.find_helices()
find_helices = _coot.find_helices

def find_strands():
  return _coot.find_strands()
find_strands = _coot.find_strands

def find_secondary_structure(*args):
  return _coot.find_secondary_structure(*args)
find_secondary_structure = _coot.find_secondary_structure

def find_secondary_structure_local(*args):
  return _coot.find_secondary_structure_local(*args)
find_secondary_structure_local = _coot.find_secondary_structure_local

def find_nucleic_acids_local(*args):
  return _coot.find_nucleic_acids_local(*args)
find_nucleic_acids_local = _coot.find_nucleic_acids_local

def new_molecule_by_residue_type_selection(*args):
  return _coot.new_molecule_by_residue_type_selection(*args)
new_molecule_by_residue_type_selection = _coot.new_molecule_by_residue_type_selection

def new_molecule_by_atom_selection(*args):
  return _coot.new_molecule_by_atom_selection(*args)
new_molecule_by_atom_selection = _coot.new_molecule_by_atom_selection

def new_molecule_by_sphere_selection(*args):
  return _coot.new_molecule_by_sphere_selection(*args)
new_molecule_by_sphere_selection = _coot.new_molecule_by_sphere_selection

def set_axis_orientation_matrix(*args):
  return _coot.set_axis_orientation_matrix(*args)
set_axis_orientation_matrix = _coot.set_axis_orientation_matrix

def set_axis_orientation_matrix_usage(*args):
  return _coot.set_axis_orientation_matrix_usage(*args)
set_axis_orientation_matrix_usage = _coot.set_axis_orientation_matrix_usage

def ideal_nucleic_acid(*args):
  return _coot.ideal_nucleic_acid(*args)
ideal_nucleic_acid = _coot.ideal_nucleic_acid

def wrapped_nucleotide_builder_dialog():
  return _coot.wrapped_nucleotide_builder_dialog()
wrapped_nucleotide_builder_dialog = _coot.wrapped_nucleotide_builder_dialog

def ideal_nucleic_acid_by_widget(*args):
  return _coot.ideal_nucleic_acid_by_widget(*args)
ideal_nucleic_acid_by_widget = _coot.ideal_nucleic_acid_by_widget

def pucker_info_py(*args):
  return _coot.pucker_info_py(*args)
pucker_info_py = _coot.pucker_info_py

def watson_crick_pair(*args):
  return _coot.watson_crick_pair(*args)
watson_crick_pair = _coot.watson_crick_pair

def watson_crick_pair_for_residue_range(*args):
  return _coot.watson_crick_pair_for_residue_range(*args)
watson_crick_pair_for_residue_range = _coot.watson_crick_pair_for_residue_range

def setup_base_pairing(*args):
  return _coot.setup_base_pairing(*args)
setup_base_pairing = _coot.setup_base_pairing

def print_sequence_chain(*args):
  return _coot.print_sequence_chain(*args)
print_sequence_chain = _coot.print_sequence_chain

def assign_fasta_sequence(*args):
  return _coot.assign_fasta_sequence(*args)
assign_fasta_sequence = _coot.assign_fasta_sequence

def assign_pir_sequence(*args):
  return _coot.assign_pir_sequence(*args)
assign_pir_sequence = _coot.assign_pir_sequence

def assign_sequence(*args):
  return _coot.assign_sequence(*args)
assign_sequence = _coot.assign_sequence

def assign_sequence_from_file(*args):
  return _coot.assign_sequence_from_file(*args)
assign_sequence_from_file = _coot.assign_sequence_from_file

def assign_sequence_from_string(*args):
  return _coot.assign_sequence_from_string(*args)
assign_sequence_from_string = _coot.assign_sequence_from_string

def delete_all_sequences_from_molecule(*args):
  return _coot.delete_all_sequences_from_molecule(*args)
delete_all_sequences_from_molecule = _coot.delete_all_sequences_from_molecule

def delete_sequence_by_chain_id(*args):
  return _coot.delete_sequence_by_chain_id(*args)
delete_sequence_by_chain_id = _coot.delete_sequence_by_chain_id

def sequence_info_py(*args):
  return _coot.sequence_info_py(*args)
sequence_info_py = _coot.sequence_info_py

def alignment_mismatches_py(*args):
  return _coot.alignment_mismatches_py(*args)
alignment_mismatches_py = _coot.alignment_mismatches_py

def do_surface(*args):
  return _coot.do_surface(*args)
do_surface = _coot.do_surface

def molecule_is_drawn_as_surface_int(*args):
  return _coot.molecule_is_drawn_as_surface_int(*args)
molecule_is_drawn_as_surface_int = _coot.molecule_is_drawn_as_surface_int

def do_clipped_surface_py(*args):
  return _coot.do_clipped_surface_py(*args)
do_clipped_surface_py = _coot.do_clipped_surface_py

def set_electrostatic_surface_charge_range(*args):
  return _coot.set_electrostatic_surface_charge_range(*args)
set_electrostatic_surface_charge_range = _coot.set_electrostatic_surface_charge_range

def get_electrostatic_surface_charge_range():
  return _coot.get_electrostatic_surface_charge_range()
get_electrostatic_surface_charge_range = _coot.get_electrostatic_surface_charge_range

def set_transparent_electrostatic_surface(*args):
  return _coot.set_transparent_electrostatic_surface(*args)
set_transparent_electrostatic_surface = _coot.set_transparent_electrostatic_surface

def get_electrostatic_surface_opacity(*args):
  return _coot.get_electrostatic_surface_opacity(*args)
get_electrostatic_surface_opacity = _coot.get_electrostatic_surface_opacity

def fffear_search(*args):
  return _coot.fffear_search(*args)
fffear_search = _coot.fffear_search

def set_fffear_angular_resolution(*args):
  return _coot.set_fffear_angular_resolution(*args)
set_fffear_angular_resolution = _coot.set_fffear_angular_resolution

def fffear_angular_resolution():
  return _coot.fffear_angular_resolution()
fffear_angular_resolution = _coot.fffear_angular_resolution

def make_socket_listener_maybe():
  return _coot.make_socket_listener_maybe()
make_socket_listener_maybe = _coot.make_socket_listener_maybe

def coot_socket_listener_idle_func(*args):
  return _coot.coot_socket_listener_idle_func(*args)
coot_socket_listener_idle_func = _coot.coot_socket_listener_idle_func

def set_coot_listener_socket_state_internal(*args):
  return _coot.set_coot_listener_socket_state_internal(*args)
set_coot_listener_socket_state_internal = _coot.set_coot_listener_socket_state_internal

def set_socket_string_waiting(*args):
  return _coot.set_socket_string_waiting(*args)
set_socket_string_waiting = _coot.set_socket_string_waiting

def set_remote_control_port(*args):
  return _coot.set_remote_control_port(*args)
set_remote_control_port = _coot.set_remote_control_port

def get_remote_control_port_number():
  return _coot.get_remote_control_port_number()
get_remote_control_port_number = _coot.get_remote_control_port_number

def set_tip_of_the_day_flag(*args):
  return _coot.set_tip_of_the_day_flag(*args)
set_tip_of_the_day_flag = _coot.set_tip_of_the_day_flag

def set_display_lists_for_maps(*args):
  return _coot.set_display_lists_for_maps(*args)
set_display_lists_for_maps = _coot.set_display_lists_for_maps

def display_lists_for_maps_state():
  return _coot.display_lists_for_maps_state()
display_lists_for_maps_state = _coot.display_lists_for_maps_state

def update_maps():
  return _coot.update_maps()
update_maps = _coot.update_maps

def preferences():
  return _coot.preferences()
preferences = _coot.preferences

def show_preferences():
  return _coot.show_preferences()
show_preferences = _coot.show_preferences

def clear_preferences():
  return _coot.clear_preferences()
clear_preferences = _coot.clear_preferences

def set_mark_cis_peptides_as_bad(*args):
  return _coot.set_mark_cis_peptides_as_bad(*args)
set_mark_cis_peptides_as_bad = _coot.set_mark_cis_peptides_as_bad

def show_mark_cis_peptides_as_bad_state():
  return _coot.show_mark_cis_peptides_as_bad_state()
show_mark_cis_peptides_as_bad_state = _coot.show_mark_cis_peptides_as_bad_state

def update_preference_gui():
  return _coot.update_preference_gui()
update_preference_gui = _coot.update_preference_gui

def make_preferences_internal():
  return _coot.make_preferences_internal()
make_preferences_internal = _coot.make_preferences_internal

def make_preferences_internal_default():
  return _coot.make_preferences_internal_default()
make_preferences_internal_default = _coot.make_preferences_internal_default

def reset_preferences():
  return _coot.reset_preferences()
reset_preferences = _coot.reset_preferences

def save_preferences():
  return _coot.save_preferences()
save_preferences = _coot.save_preferences

def preferences_internal_change_value_int(*args):
  return _coot.preferences_internal_change_value_int(*args)
preferences_internal_change_value_int = _coot.preferences_internal_change_value_int

def preferences_internal_change_value_int2(*args):
  return _coot.preferences_internal_change_value_int2(*args)
preferences_internal_change_value_int2 = _coot.preferences_internal_change_value_int2

def preferences_internal_change_value_float(*args):
  return _coot.preferences_internal_change_value_float(*args)
preferences_internal_change_value_float = _coot.preferences_internal_change_value_float

def preferences_internal_change_value_float3(*args):
  return _coot.preferences_internal_change_value_float3(*args)
preferences_internal_change_value_float3 = _coot.preferences_internal_change_value_float3

def show_model_toolbar_icon(*args):
  return _coot.show_model_toolbar_icon(*args)
show_model_toolbar_icon = _coot.show_model_toolbar_icon

def hide_model_toolbar_icon(*args):
  return _coot.hide_model_toolbar_icon(*args)
hide_model_toolbar_icon = _coot.hide_model_toolbar_icon

def fill_preferences_model_toolbar_icons(*args):
  return _coot.fill_preferences_model_toolbar_icons(*args)
fill_preferences_model_toolbar_icons = _coot.fill_preferences_model_toolbar_icons

def update_model_toolbar_icons_menu():
  return _coot.update_model_toolbar_icons_menu()
update_model_toolbar_icons_menu = _coot.update_model_toolbar_icons_menu

def show_main_toolbar_icon(*args):
  return _coot.show_main_toolbar_icon(*args)
show_main_toolbar_icon = _coot.show_main_toolbar_icon

def hide_main_toolbar_icon(*args):
  return _coot.hide_main_toolbar_icon(*args)
hide_main_toolbar_icon = _coot.hide_main_toolbar_icon

def fill_preferences_main_toolbar_icons(*args):
  return _coot.fill_preferences_main_toolbar_icons(*args)
fill_preferences_main_toolbar_icons = _coot.fill_preferences_main_toolbar_icons

def update_main_toolbar_icons_menu():
  return _coot.update_main_toolbar_icons_menu()
update_main_toolbar_icons_menu = _coot.update_main_toolbar_icons_menu

def update_toolbar_icons_menu(*args):
  return _coot.update_toolbar_icons_menu(*args)
update_toolbar_icons_menu = _coot.update_toolbar_icons_menu

def browser_url(*args):
  return _coot.browser_url(*args)
browser_url = _coot.browser_url

def set_browser_interface(*args):
  return _coot.set_browser_interface(*args)
set_browser_interface = _coot.set_browser_interface

def handle_online_coot_search_request(*args):
  return _coot.handle_online_coot_search_request(*args)
handle_online_coot_search_request = _coot.handle_online_coot_search_request

def new_generic_object_number(*args):
  return _coot.new_generic_object_number(*args)
new_generic_object_number = _coot.new_generic_object_number

def to_generic_object_add_line(*args):
  return _coot.to_generic_object_add_line(*args)
to_generic_object_add_line = _coot.to_generic_object_add_line

def to_generic_object_add_dashed_line(*args):
  return _coot.to_generic_object_add_dashed_line(*args)
to_generic_object_add_dashed_line = _coot.to_generic_object_add_dashed_line

def to_generic_object_add_point(*args):
  return _coot.to_generic_object_add_point(*args)
to_generic_object_add_point = _coot.to_generic_object_add_point

def to_generic_object_add_arc(*args):
  return _coot.to_generic_object_add_arc(*args)
to_generic_object_add_arc = _coot.to_generic_object_add_arc

def to_generic_object_add_display_list_handle(*args):
  return _coot.to_generic_object_add_display_list_handle(*args)
to_generic_object_add_display_list_handle = _coot.to_generic_object_add_display_list_handle

def set_display_generic_object(*args):
  return _coot.set_display_generic_object(*args)
set_display_generic_object = _coot.set_display_generic_object

def generic_object_is_displayed_p(*args):
  return _coot.generic_object_is_displayed_p(*args)
generic_object_is_displayed_p = _coot.generic_object_is_displayed_p

def generic_object_index(*args):
  return _coot.generic_object_index(*args)
generic_object_index = _coot.generic_object_index

def generic_object_name_py(*args):
  return _coot.generic_object_name_py(*args)
generic_object_name_py = _coot.generic_object_name_py

def number_of_generic_objects():
  return _coot.number_of_generic_objects()
number_of_generic_objects = _coot.number_of_generic_objects

def generic_object_info():
  return _coot.generic_object_info()
generic_object_info = _coot.generic_object_info

def generic_object_has_objects_p(*args):
  return _coot.generic_object_has_objects_p(*args)
generic_object_has_objects_p = _coot.generic_object_has_objects_p

def close_generic_object(*args):
  return _coot.close_generic_object(*args)
close_generic_object = _coot.close_generic_object

def is_closed_generic_object_p(*args):
  return _coot.is_closed_generic_object_p(*args)
is_closed_generic_object_p = _coot.is_closed_generic_object_p

def generic_object_clear(*args):
  return _coot.generic_object_clear(*args)
generic_object_clear = _coot.generic_object_clear

def generic_objects_gui_wrapper():
  return _coot.generic_objects_gui_wrapper()
generic_objects_gui_wrapper = _coot.generic_objects_gui_wrapper

def set_display_generic_objects_as_solid(*args):
  return _coot.set_display_generic_objects_as_solid(*args)
set_display_generic_objects_as_solid = _coot.set_display_generic_objects_as_solid

def handle_read_draw_probe_dots(*args):
  return _coot.handle_read_draw_probe_dots(*args)
handle_read_draw_probe_dots = _coot.handle_read_draw_probe_dots

def handle_read_draw_probe_dots_unformatted(*args):
  return _coot.handle_read_draw_probe_dots_unformatted(*args)
handle_read_draw_probe_dots_unformatted = _coot.handle_read_draw_probe_dots_unformatted

def set_do_probe_dots_on_rotamers_and_chis(*args):
  return _coot.set_do_probe_dots_on_rotamers_and_chis(*args)
set_do_probe_dots_on_rotamers_and_chis = _coot.set_do_probe_dots_on_rotamers_and_chis

def do_probe_dots_on_rotamers_and_chis_state():
  return _coot.do_probe_dots_on_rotamers_and_chis_state()
do_probe_dots_on_rotamers_and_chis_state = _coot.do_probe_dots_on_rotamers_and_chis_state

def set_do_probe_dots_post_refine(*args):
  return _coot.set_do_probe_dots_post_refine(*args)
set_do_probe_dots_post_refine = _coot.set_do_probe_dots_post_refine

def do_probe_dots_post_refine_state():
  return _coot.do_probe_dots_post_refine_state()
do_probe_dots_post_refine_state = _coot.do_probe_dots_post_refine_state

def unmangle_hydrogen_name(*args):
  return _coot.unmangle_hydrogen_name(*args)
unmangle_hydrogen_name = _coot.unmangle_hydrogen_name

def set_interactive_probe_dots_molprobity_radius(*args):
  return _coot.set_interactive_probe_dots_molprobity_radius(*args)
set_interactive_probe_dots_molprobity_radius = _coot.set_interactive_probe_dots_molprobity_radius

def interactive_probe_dots_molprobity_radius():
  return _coot.interactive_probe_dots_molprobity_radius()
interactive_probe_dots_molprobity_radius = _coot.interactive_probe_dots_molprobity_radius

def user_mods_py(*args):
  return _coot.user_mods_py(*args)
user_mods_py = _coot.user_mods_py

def sharpen(*args):
  return _coot.sharpen(*args)
sharpen = _coot.sharpen

def sharpen_with_gompertz_scaling(*args):
  return _coot.sharpen_with_gompertz_scaling(*args)
sharpen_with_gompertz_scaling = _coot.sharpen_with_gompertz_scaling

def wrapped_create_map_shapening_dialog():
  return _coot.wrapped_create_map_shapening_dialog()
wrapped_create_map_shapening_dialog = _coot.wrapped_create_map_shapening_dialog

def map_sharpening_map_select(*args):
  return _coot.map_sharpening_map_select(*args)
map_sharpening_map_select = _coot.map_sharpening_map_select

def map_sharpening_value_changed(*args):
  return _coot.map_sharpening_value_changed(*args)
map_sharpening_value_changed = _coot.map_sharpening_value_changed

def fill_option_menu_with_map_options(*args):
  return _coot.fill_option_menu_with_map_options(*args)
fill_option_menu_with_map_options = _coot.fill_option_menu_with_map_options

def set_map_sharpening_scale_limit(*args):
  return _coot.set_map_sharpening_scale_limit(*args)
set_map_sharpening_scale_limit = _coot.set_map_sharpening_scale_limit

def drag_intermediate_atom_py(*args):
  return _coot.drag_intermediate_atom_py(*args)
drag_intermediate_atom_py = _coot.drag_intermediate_atom_py

def mark_atom_as_fixed_py(*args):
  return _coot.mark_atom_as_fixed_py(*args)
mark_atom_as_fixed_py = _coot.mark_atom_as_fixed_py

def mark_multiple_atoms_as_fixed_py(*args):
  return _coot.mark_multiple_atoms_as_fixed_py(*args)
mark_multiple_atoms_as_fixed_py = _coot.mark_multiple_atoms_as_fixed_py

def setup_fixed_atom_pick(*args):
  return _coot.setup_fixed_atom_pick(*args)
setup_fixed_atom_pick = _coot.setup_fixed_atom_pick

def clear_all_fixed_atoms(*args):
  return _coot.clear_all_fixed_atoms(*args)
clear_all_fixed_atoms = _coot.clear_all_fixed_atoms

def store_fixed_atom_dialog(*args):
  return _coot.store_fixed_atom_dialog(*args)
store_fixed_atom_dialog = _coot.store_fixed_atom_dialog

def wrapped_create_fixed_atom_dialog():
  return _coot.wrapped_create_fixed_atom_dialog()
wrapped_create_fixed_atom_dialog = _coot.wrapped_create_fixed_atom_dialog

def clear_fixed_atoms_all():
  return _coot.clear_fixed_atoms_all()
clear_fixed_atoms_all = _coot.clear_fixed_atoms_all

def set_debug_atom_picking(*args):
  return _coot.set_debug_atom_picking(*args)
set_debug_atom_picking = _coot.set_debug_atom_picking

def show_partial_charge_info(*args):
  return _coot.show_partial_charge_info(*args)
show_partial_charge_info = _coot.show_partial_charge_info

def scale_cell(*args):
  return _coot.scale_cell(*args)
scale_cell = _coot.scale_cell

def segment_map(*args):
  return _coot.segment_map(*args)
segment_map = _coot.segment_map

def segment_map_multi_scale(*args):
  return _coot.segment_map_multi_scale(*args)
segment_map_multi_scale = _coot.segment_map_multi_scale

def ccp4i_projects_py():
  return _coot.ccp4i_projects_py()
ccp4i_projects_py = _coot.ccp4i_projects_py

def write_ccp4mg_picture_description(*args):
  return _coot.write_ccp4mg_picture_description(*args)
write_ccp4mg_picture_description = _coot.write_ccp4mg_picture_description

def get_atom_colour_from_mol_no(*args):
  return _coot.get_atom_colour_from_mol_no(*args)
get_atom_colour_from_mol_no = _coot.get_atom_colour_from_mol_no

def delete_dipole(*args):
  return _coot.delete_dipole(*args)
delete_dipole = _coot.delete_dipole

def add_dipole_py(*args):
  return _coot.add_dipole_py(*args)
add_dipole_py = _coot.add_dipole_py

def add_dipole_for_residues_py(*args):
  return _coot.add_dipole_for_residues_py(*args)
add_dipole_for_residues_py = _coot.add_dipole_for_residues_py

def make_and_draw_patterson(*args):
  return _coot.make_and_draw_patterson(*args)
make_and_draw_patterson = _coot.make_and_draw_patterson

def laplacian(*args):
  return _coot.laplacian(*args)
laplacian = _coot.laplacian

def get_pkgdatadir_py():
  return _coot.get_pkgdatadir_py()
get_pkgdatadir_py = _coot.get_pkgdatadir_py

def do_smiles_gui():
  return _coot.do_smiles_gui()
do_smiles_gui = _coot.do_smiles_gui

def do_tw():
  return _coot.do_tw()
do_tw = _coot.do_tw

def set_button_label_for_external_refinement(*args):
  return _coot.set_button_label_for_external_refinement(*args)
set_button_label_for_external_refinement = _coot.set_button_label_for_external_refinement

def place_text(*args):
  return _coot.place_text(*args)
place_text = _coot.place_text

def remove_text(*args):
  return _coot.remove_text(*args)
remove_text = _coot.remove_text

def edit_text(*args):
  return _coot.edit_text(*args)
edit_text = _coot.edit_text

def text_index_near_position(*args):
  return _coot.text_index_near_position(*args)
text_index_near_position = _coot.text_index_near_position

def pisa_interaction(*args):
  return _coot.pisa_interaction(*args)
pisa_interaction = _coot.pisa_interaction

def handle_pisa_interfaces_py(*args):
  return _coot.handle_pisa_interfaces_py(*args)
handle_pisa_interfaces_py = _coot.handle_pisa_interfaces_py

def add_pisa_interface_bond_py(*args):
  return _coot.add_pisa_interface_bond_py(*args)
add_pisa_interface_bond_py = _coot.add_pisa_interface_bond_py

def pisa_clear_interfaces():
  return _coot.pisa_clear_interfaces()
pisa_clear_interfaces = _coot.pisa_clear_interfaces

def fit_to_map_by_random_jiggle(*args):
  return _coot.fit_to_map_by_random_jiggle(*args)
fit_to_map_by_random_jiggle = _coot.fit_to_map_by_random_jiggle

def matching_compound_names_from_sbase_py(*args):
  return _coot.matching_compound_names_from_sbase_py(*args)
matching_compound_names_from_sbase_py = _coot.matching_compound_names_from_sbase_py

def get_ccp4srs_monomer_and_dictionary(*args):
  return _coot.get_ccp4srs_monomer_and_dictionary(*args)
get_ccp4srs_monomer_and_dictionary = _coot.get_ccp4srs_monomer_and_dictionary

def get_sbase_monomer(*args):
  return _coot.get_sbase_monomer(*args)
get_sbase_monomer = _coot.get_sbase_monomer

def add_linked_residue(*args):
  return _coot.add_linked_residue(*args)
add_linked_residue = _coot.add_linked_residue

def add_linked_residue_py(*args):
  return _coot.add_linked_residue_py(*args)
add_linked_residue_py = _coot.add_linked_residue_py

def fle_view_internal(*args):
  return _coot.fle_view_internal(*args)
fle_view_internal = _coot.fle_view_internal

def fle_view_internal_to_png(*args):
  return _coot.fle_view_internal_to_png(*args)
fle_view_internal_to_png = _coot.fle_view_internal_to_png

def fle_view_with_rdkit(*args):
  return _coot.fle_view_with_rdkit(*args)
fle_view_with_rdkit = _coot.fle_view_with_rdkit

def fle_view_with_rdkit_to_png(*args):
  return _coot.fle_view_with_rdkit_to_png(*args)
fle_view_with_rdkit_to_png = _coot.fle_view_with_rdkit_to_png

def fle_view_with_rdkit_internal(*args):
  return _coot.fle_view_with_rdkit_internal(*args)
fle_view_with_rdkit_internal = _coot.fle_view_with_rdkit_internal

def fle_view_set_water_dist_max(*args):
  return _coot.fle_view_set_water_dist_max(*args)
fle_view_set_water_dist_max = _coot.fle_view_set_water_dist_max

def fle_view_set_h_bond_dist_max(*args):
  return _coot.fle_view_set_h_bond_dist_max(*args)
fle_view_set_h_bond_dist_max = _coot.fle_view_set_h_bond_dist_max

def sprout_hydrogens(*args):
  return _coot.sprout_hydrogens(*args)
sprout_hydrogens = _coot.sprout_hydrogens

def lsq_improve(*args):
  return _coot.lsq_improve(*args)
lsq_improve = _coot.lsq_improve

def toolbar_multi_refine_stop():
  return _coot.toolbar_multi_refine_stop()
toolbar_multi_refine_stop = _coot.toolbar_multi_refine_stop

def toolbar_multi_refine_continue():
  return _coot.toolbar_multi_refine_continue()
toolbar_multi_refine_continue = _coot.toolbar_multi_refine_continue

def toolbar_multi_refine_cancel():
  return _coot.toolbar_multi_refine_cancel()
toolbar_multi_refine_cancel = _coot.toolbar_multi_refine_cancel

def set_visible_toolbar_multi_refine_stop_button(*args):
  return _coot.set_visible_toolbar_multi_refine_stop_button(*args)
set_visible_toolbar_multi_refine_stop_button = _coot.set_visible_toolbar_multi_refine_stop_button

def set_visible_toolbar_multi_refine_continue_button(*args):
  return _coot.set_visible_toolbar_multi_refine_continue_button(*args)
set_visible_toolbar_multi_refine_continue_button = _coot.set_visible_toolbar_multi_refine_continue_button

def set_visible_toolbar_multi_refine_cancel_button(*args):
  return _coot.set_visible_toolbar_multi_refine_cancel_button(*args)
set_visible_toolbar_multi_refine_cancel_button = _coot.set_visible_toolbar_multi_refine_cancel_button

def toolbar_multi_refine_button_set_sensitive(*args):
  return _coot.toolbar_multi_refine_button_set_sensitive(*args)
toolbar_multi_refine_button_set_sensitive = _coot.toolbar_multi_refine_button_set_sensitive

def single_model_view_model_number(*args):
  return _coot.single_model_view_model_number(*args)
single_model_view_model_number = _coot.single_model_view_model_number

def single_model_view_this_model_number(*args):
  return _coot.single_model_view_this_model_number(*args)
single_model_view_this_model_number = _coot.single_model_view_this_model_number

def single_model_view_next_model_number(*args):
  return _coot.single_model_view_next_model_number(*args)
single_model_view_next_model_number = _coot.single_model_view_next_model_number

def single_model_view_prev_model_number(*args):
  return _coot.single_model_view_prev_model_number(*args)
single_model_view_prev_model_number = _coot.single_model_view_prev_model_number

def run_update_self_maybe():
  return _coot.run_update_self_maybe()
run_update_self_maybe = _coot.run_update_self_maybe

def show_go_to_residue_keyboarding_mode_window():
  return _coot.show_go_to_residue_keyboarding_mode_window()
show_go_to_residue_keyboarding_mode_window = _coot.show_go_to_residue_keyboarding_mode_window

def handle_go_to_residue_keyboarding_mode(*args):
  return _coot.handle_go_to_residue_keyboarding_mode(*args)
handle_go_to_residue_keyboarding_mode = _coot.handle_go_to_residue_keyboarding_mode

def set_show_graphics_ligand_view(*args):
  return _coot.set_show_graphics_ligand_view(*args)
set_show_graphics_ligand_view = _coot.set_show_graphics_ligand_view

def nsv(*args):
  return _coot.nsv(*args)
nsv = _coot.nsv

def sequence_view_old_style(*args):
  return _coot.sequence_view_old_style(*args)
sequence_view_old_style = _coot.sequence_view_old_style

def add_ligand_builder_menu_item_maybe():
  return _coot.add_ligand_builder_menu_item_maybe()
add_ligand_builder_menu_item_maybe = _coot.add_ligand_builder_menu_item_maybe

def start_ligand_builder_gui(*args):
  return _coot.start_ligand_builder_gui(*args)
start_ligand_builder_gui = _coot.start_ligand_builder_gui

def all_molecule_rotamer_score_py(*args):
  return _coot.all_molecule_rotamer_score_py(*args)
all_molecule_rotamer_score_py = _coot.all_molecule_rotamer_score_py

def all_molecule_ramachandran_score_py(*args):
  return _coot.all_molecule_ramachandran_score_py(*args)
all_molecule_ramachandran_score_py = _coot.all_molecule_ramachandran_score_py

def all_molecule_ramachandran_region_py(*args):
  return _coot.all_molecule_ramachandran_region_py(*args)
all_molecule_ramachandran_region_py = _coot.all_molecule_ramachandran_region_py

def user_defined_click_py(*args):
  return _coot.user_defined_click_py(*args)
user_defined_click_py = _coot.user_defined_click_py

def full_screen(*args):
  return _coot.full_screen(*args)
full_screen = _coot.full_screen
class alias_path_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, alias_path_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, alias_path_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["index"] = _coot.alias_path_t_index_set
    __swig_getmethods__["index"] = _coot.alias_path_t_index_get
    if _newclass:index = _swig_property(_coot.alias_path_t_index_get, _coot.alias_path_t_index_set)
    __swig_setmethods__["s"] = _coot.alias_path_t_s_set
    __swig_getmethods__["s"] = _coot.alias_path_t_s_get
    if _newclass:s = _swig_property(_coot.alias_path_t_s_get, _coot.alias_path_t_s_set)
    __swig_setmethods__["flag"] = _coot.alias_path_t_flag_set
    __swig_getmethods__["flag"] = _coot.alias_path_t_flag_get
    if _newclass:flag = _swig_property(_coot.alias_path_t_flag_get, _coot.alias_path_t_flag_set)
    def __init__(self, *args): 
        this = _coot.new_alias_path_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coot.delete_alias_path_t
    __del__ = lambda self : None;
alias_path_t_swigregister = _coot.alias_path_t_swigregister
alias_path_t_swigregister(alias_path_t)

class pisa_interface_bond_info_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pisa_interface_bond_info_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pisa_interface_bond_info_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _coot.new_pisa_interface_bond_info_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["n_h_bonds"] = _coot.pisa_interface_bond_info_t_n_h_bonds_set
    __swig_getmethods__["n_h_bonds"] = _coot.pisa_interface_bond_info_t_n_h_bonds_get
    if _newclass:n_h_bonds = _swig_property(_coot.pisa_interface_bond_info_t_n_h_bonds_get, _coot.pisa_interface_bond_info_t_n_h_bonds_set)
    __swig_setmethods__["n_salt_bridges"] = _coot.pisa_interface_bond_info_t_n_salt_bridges_set
    __swig_getmethods__["n_salt_bridges"] = _coot.pisa_interface_bond_info_t_n_salt_bridges_get
    if _newclass:n_salt_bridges = _swig_property(_coot.pisa_interface_bond_info_t_n_salt_bridges_get, _coot.pisa_interface_bond_info_t_n_salt_bridges_set)
    __swig_setmethods__["n_cov_bonds"] = _coot.pisa_interface_bond_info_t_n_cov_bonds_set
    __swig_getmethods__["n_cov_bonds"] = _coot.pisa_interface_bond_info_t_n_cov_bonds_get
    if _newclass:n_cov_bonds = _swig_property(_coot.pisa_interface_bond_info_t_n_cov_bonds_get, _coot.pisa_interface_bond_info_t_n_cov_bonds_set)
    __swig_setmethods__["n_ss_bonds"] = _coot.pisa_interface_bond_info_t_n_ss_bonds_set
    __swig_getmethods__["n_ss_bonds"] = _coot.pisa_interface_bond_info_t_n_ss_bonds_get
    if _newclass:n_ss_bonds = _swig_property(_coot.pisa_interface_bond_info_t_n_ss_bonds_get, _coot.pisa_interface_bond_info_t_n_ss_bonds_set)
    __swig_destroy__ = _coot.delete_pisa_interface_bond_info_t
    __del__ = lambda self : None;
pisa_interface_bond_info_t_swigregister = _coot.pisa_interface_bond_info_t_swigregister
pisa_interface_bond_info_t_swigregister(pisa_interface_bond_info_t)


def get_pisa_interface_bond_info_py(*args):
  return _coot.get_pisa_interface_bond_info_py(*args)
get_pisa_interface_bond_info_py = _coot.get_pisa_interface_bond_info_py

def filtered_by_glob(*args):
  return _coot.filtered_by_glob(*args)
filtered_by_glob = _coot.filtered_by_glob

def string_member(*args):
  return _coot.string_member(*args)
string_member = _coot.string_member

def compare_strings(*args):
  return _coot.compare_strings(*args)
compare_strings = _coot.compare_strings

def pre_directory_file_selection(*args):
  return _coot.pre_directory_file_selection(*args)
pre_directory_file_selection = _coot.pre_directory_file_selection

def filelist_into_fileselection_clist(*args):
  return _coot.filelist_into_fileselection_clist(*args)
filelist_into_fileselection_clist = _coot.filelist_into_fileselection_clist

def wrapped_nothing_bad_dialog(*args):
  return _coot.wrapped_nothing_bad_dialog(*args)
wrapped_nothing_bad_dialog = _coot.wrapped_nothing_bad_dialog

def float_from_entry(*args):
  return _coot.float_from_entry(*args)
float_from_entry = _coot.float_from_entry

def int_from_entry(*args):
  return _coot.int_from_entry(*args)
int_from_entry = _coot.int_from_entry

def add_validation_mol_menu_item(*args):
  return _coot.add_validation_mol_menu_item(*args)
add_validation_mol_menu_item = _coot.add_validation_mol_menu_item

def create_initial_validation_graph_submenu_generic(*args):
  return _coot.create_initial_validation_graph_submenu_generic(*args)
create_initial_validation_graph_submenu_generic = _coot.create_initial_validation_graph_submenu_generic

def probe_dots_short_contact_name_to_expanded_name(*args):
  return _coot.probe_dots_short_contact_name_to_expanded_name(*args)
probe_dots_short_contact_name_to_expanded_name = _coot.probe_dots_short_contact_name_to_expanded_name

def menu_item_label(*args):
  return _coot.menu_item_label(*args)
menu_item_label = _coot.menu_item_label

def goto_next_atom_maybe_py(*args):
  return _coot.goto_next_atom_maybe_py(*args)
goto_next_atom_maybe_py = _coot.goto_next_atom_maybe_py

def goto_prev_atom_maybe_py(*args):
  return _coot.goto_prev_atom_maybe_py(*args)
goto_prev_atom_maybe_py = _coot.goto_prev_atom_maybe_py

def set_go_to_atom_from_spec(*args):
  return _coot.set_go_to_atom_from_spec(*args)
set_go_to_atom_from_spec = _coot.set_go_to_atom_from_spec

def set_go_to_atom_from_res_spec(*args):
  return _coot.set_go_to_atom_from_res_spec(*args)
set_go_to_atom_from_res_spec = _coot.set_go_to_atom_from_res_spec

def set_go_to_atom_from_res_spec_py(*args):
  return _coot.set_go_to_atom_from_res_spec_py(*args)
set_go_to_atom_from_res_spec_py = _coot.set_go_to_atom_from_res_spec_py

def active_atom_spec():
  return _coot.active_atom_spec()
active_atom_spec = _coot.active_atom_spec

def get_symmetry_py(*args):
  return _coot.get_symmetry_py(*args)
get_symmetry_py = _coot.get_symmetry_py

def add_map_colour_mol_menu_item(*args):
  return _coot.add_map_colour_mol_menu_item(*args)
add_map_colour_mol_menu_item = _coot.add_map_colour_mol_menu_item

def add_map_scroll_wheel_mol_menu_item(*args):
  return _coot.add_map_scroll_wheel_mol_menu_item(*args)
add_map_scroll_wheel_mol_menu_item = _coot.add_map_scroll_wheel_mol_menu_item

def map_colour_components_py(*args):
  return _coot.map_colour_components_py(*args)
map_colour_components_py = _coot.map_colour_components_py

def multi_residue_torsion_fit(*args):
  return _coot.multi_residue_torsion_fit(*args)
multi_residue_torsion_fit = _coot.multi_residue_torsion_fit

def multi_residue_torsion_fit_py(*args):
  return _coot.multi_residue_torsion_fit_py(*args)
multi_residue_torsion_fit_py = _coot.multi_residue_torsion_fit_py

def execute_refmac_real(*args):
  return _coot.execute_refmac_real(*args)
execute_refmac_real = _coot.execute_refmac_real
class str_mtime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, str_mtime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, str_mtime, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coot.new_str_mtime(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mtime"] = _coot.str_mtime_mtime_set
    __swig_getmethods__["mtime"] = _coot.str_mtime_mtime_get
    if _newclass:mtime = _swig_property(_coot.str_mtime_mtime_get, _coot.str_mtime_mtime_set)
    __swig_setmethods__["file"] = _coot.str_mtime_file_set
    __swig_getmethods__["file"] = _coot.str_mtime_file_get
    if _newclass:file = _swig_property(_coot.str_mtime_file_get, _coot.str_mtime_file_set)
    __swig_destroy__ = _coot.delete_str_mtime
    __del__ = lambda self : None;
str_mtime_swigregister = _coot.str_mtime_swigregister
str_mtime_swigregister(str_mtime)

class file_attribs_info_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, file_attribs_info_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, file_attribs_info_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["directory_prefix"] = _coot.file_attribs_info_t_directory_prefix_set
    __swig_getmethods__["directory_prefix"] = _coot.file_attribs_info_t_directory_prefix_get
    if _newclass:directory_prefix = _swig_property(_coot.file_attribs_info_t_directory_prefix_get, _coot.file_attribs_info_t_directory_prefix_set)
    __swig_setmethods__["file_mtimes"] = _coot.file_attribs_info_t_file_mtimes_set
    __swig_getmethods__["file_mtimes"] = _coot.file_attribs_info_t_file_mtimes_get
    if _newclass:file_mtimes = _swig_property(_coot.file_attribs_info_t_file_mtimes_get, _coot.file_attribs_info_t_file_mtimes_set)
    def __init__(self): 
        this = _coot.new_file_attribs_info_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coot.delete_file_attribs_info_t
    __del__ = lambda self : None;
file_attribs_info_t_swigregister = _coot.file_attribs_info_t_swigregister
file_attribs_info_t_swigregister(file_attribs_info_t)


def compare_mtimes(*args):
  return _coot.compare_mtimes(*args)
compare_mtimes = _coot.compare_mtimes

def parse_ccp4i_defs(*args):
  return _coot.parse_ccp4i_defs(*args)
parse_ccp4i_defs = _coot.parse_ccp4i_defs

def ccp4_project_directory(*args):
  return _coot.ccp4_project_directory(*args)
ccp4_project_directory = _coot.ccp4_project_directory

def add_to_history(*args):
  return _coot.add_to_history(*args)
add_to_history = _coot.add_to_history

def add_to_history_simple(*args):
  return _coot.add_to_history_simple(*args)
add_to_history_simple = _coot.add_to_history_simple

def add_to_history_typed(*args):
  return _coot.add_to_history_typed(*args)
add_to_history_typed = _coot.add_to_history_typed

def single_quote(*args):
  return _coot.single_quote(*args)
single_quote = _coot.single_quote

def pythonize_command_name(*args):
  return _coot.pythonize_command_name(*args)
pythonize_command_name = _coot.pythonize_command_name

def schemize_command_name(*args):
  return _coot.schemize_command_name(*args)
schemize_command_name = _coot.schemize_command_name

def languagize_command(*args):
  return _coot.languagize_command(*args)
languagize_command = _coot.languagize_command

def add_to_database(*args):
  return _coot.add_to_database(*args)
add_to_database = _coot.add_to_database

def merge_molecules_by_vector(*args):
  return _coot.merge_molecules_by_vector(*args)
merge_molecules_by_vector = _coot.merge_molecules_by_vector

def dictionary_entries():
  return _coot.dictionary_entries()
dictionary_entries = _coot.dictionary_entries

def SMILES_for_comp_id(*args):
  return _coot.SMILES_for_comp_id(*args)
SMILES_for_comp_id = _coot.SMILES_for_comp_id

def dictionaries_read_py():
  return _coot.dictionaries_read_py()
dictionaries_read_py = _coot.dictionaries_read_py

def cif_file_for_comp_id_py(*args):
  return _coot.cif_file_for_comp_id_py(*args)
cif_file_for_comp_id_py = _coot.cif_file_for_comp_id_py

def dictionary_entries_py():
  return _coot.dictionary_entries_py()
dictionary_entries_py = _coot.dictionary_entries_py

def SMILES_for_comp_id_py(*args):
  return _coot.SMILES_for_comp_id_py(*args)
SMILES_for_comp_id_py = _coot.SMILES_for_comp_id_py

def monomer_restraints_py(*args):
  return _coot.monomer_restraints_py(*args)
monomer_restraints_py = _coot.monomer_restraints_py

def set_monomer_restraints_py(*args):
  return _coot.set_monomer_restraints_py(*args)
set_monomer_restraints_py = _coot.set_monomer_restraints_py

def list_nomenclature_errors_py(*args):
  return _coot.list_nomenclature_errors_py(*args)
list_nomenclature_errors_py = _coot.list_nomenclature_errors_py

def show_fix_nomenclature_errors_gui(*args):
  return _coot.show_fix_nomenclature_errors_gui(*args)
show_fix_nomenclature_errors_gui = _coot.show_fix_nomenclature_errors_gui

def dipole_to_py(*args):
  return _coot.dipole_to_py(*args)
dipole_to_py = _coot.dipole_to_py

def safe_scheme_command(*args):
  return _coot.safe_scheme_command(*args)
safe_scheme_command = _coot.safe_scheme_command

def safe_python_command(*args):
  return _coot.safe_python_command(*args)
safe_python_command = _coot.safe_python_command

def safe_python_command_by_char_star(*args):
  return _coot.safe_python_command_by_char_star(*args)
safe_python_command_by_char_star = _coot.safe_python_command_by_char_star

def py_clean_internal(*args):
  return _coot.py_clean_internal(*args)
py_clean_internal = _coot.py_clean_internal

def safe_python_command_with_return(*args):
  return _coot.safe_python_command_with_return(*args)
safe_python_command_with_return = _coot.safe_python_command_with_return

def safe_python_command_test(*args):
  return _coot.safe_python_command_test(*args)
safe_python_command_test = _coot.safe_python_command_test

def safe_python_command_with_unsafe_thread(*args):
  return _coot.safe_python_command_with_unsafe_thread(*args)
safe_python_command_with_unsafe_thread = _coot.safe_python_command_with_unsafe_thread

def run_generic_script(*args):
  return _coot.run_generic_script(*args)
run_generic_script = _coot.run_generic_script

def coot_has_guile():
  return _coot.coot_has_guile()
coot_has_guile = _coot.coot_has_guile

def coot_can_do_lidia_p():
  return _coot.coot_can_do_lidia_p()
coot_can_do_lidia_p = _coot.coot_can_do_lidia_p

def run_scheme_command(*args):
  return _coot.run_scheme_command(*args)
run_scheme_command = _coot.run_scheme_command

def pyrun_simple_string(*args):
  return _coot.pyrun_simple_string(*args)
pyrun_simple_string = _coot.pyrun_simple_string

def py_residue(*args):
  return _coot.py_residue(*args)
py_residue = _coot.py_residue

def residue_spec_from_py(*args):
  return _coot.residue_spec_from_py(*args)
residue_spec_from_py = _coot.residue_spec_from_py

def get_residue_by_type(*args):
  return _coot.get_residue_by_type(*args)
get_residue_by_type = _coot.get_residue_by_type

def get_residue_by_type_py(*args):
  return _coot.get_residue_by_type_py(*args)
get_residue_by_type_py = _coot.get_residue_by_type_py

def hydrogenate_region(*args):
  return _coot.hydrogenate_region(*args)
hydrogenate_region = _coot.hydrogenate_region

def atom_info_string_py(*args):
  return _coot.atom_info_string_py(*args)
atom_info_string_py = _coot.atom_info_string_py

def residue_info_py(*args):
  return _coot.residue_info_py(*args)
residue_info_py = _coot.residue_info_py

def residue_name_py(*args):
  return _coot.residue_name_py(*args)
residue_name_py = _coot.residue_name_py

def clear_and_update_molecule_py(*args):
  return _coot.clear_and_update_molecule_py(*args)
clear_and_update_molecule_py = _coot.clear_and_update_molecule_py

def add_molecule_py(*args):
  return _coot.add_molecule_py(*args)
add_molecule_py = _coot.add_molecule_py

def active_residue_py():
  return _coot.active_residue_py()
active_residue_py = _coot.active_residue_py

def closest_atom_py(*args):
  return _coot.closest_atom_py(*args)
closest_atom_py = _coot.closest_atom_py

def residues_near_residue_py(*args):
  return _coot.residues_near_residue_py(*args)
residues_near_residue_py = _coot.residues_near_residue_py

def residues_near_position_py(*args):
  return _coot.residues_near_position_py(*args)
residues_near_position_py = _coot.residues_near_position_py

def regularize_residues(*args):
  return _coot.regularize_residues(*args)
regularize_residues = _coot.regularize_residues

def refine_zone_with_full_residue_spec_py(*args):
  return _coot.refine_zone_with_full_residue_spec_py(*args)
refine_zone_with_full_residue_spec_py = _coot.refine_zone_with_full_residue_spec_py

def rigid_body_fit_with_residue_ranges(*args):
  return _coot.rigid_body_fit_with_residue_ranges(*args)
rigid_body_fit_with_residue_ranges = _coot.rigid_body_fit_with_residue_ranges

def check_waters_baddies(*args):
  return _coot.check_waters_baddies(*args)
check_waters_baddies = _coot.check_waters_baddies

def water_chain_from_shelx_ins_py(*args):
  return _coot.water_chain_from_shelx_ins_py(*args)
water_chain_from_shelx_ins_py = _coot.water_chain_from_shelx_ins_py

def water_chain_py(*args):
  return _coot.water_chain_py(*args)
water_chain_py = _coot.water_chain_py

def make_variance_map(*args):
  return _coot.make_variance_map(*args)
make_variance_map = _coot.make_variance_map

def make_variance_map_py(*args):
  return _coot.make_variance_map_py(*args)
make_variance_map_py = _coot.make_variance_map_py

def spin_search_by_atom_vectors(*args):
  return _coot.spin_search_by_atom_vectors(*args)
spin_search_by_atom_vectors = _coot.spin_search_by_atom_vectors

def spin_search_py(*args):
  return _coot.spin_search_py(*args)
spin_search_py = _coot.spin_search_py

def monomer_lib_3_letter_codes_matching(*args):
  return _coot.monomer_lib_3_letter_codes_matching(*args)
monomer_lib_3_letter_codes_matching = _coot.monomer_lib_3_letter_codes_matching

def on_monomer_lib_search_results_button_press(*args):
  return _coot.on_monomer_lib_search_results_button_press(*args)
on_monomer_lib_search_results_button_press = _coot.on_monomer_lib_search_results_button_press

def on_monomer_lib_sbase_molecule_button_press(*args):
  return _coot.on_monomer_lib_sbase_molecule_button_press(*args)
on_monomer_lib_sbase_molecule_button_press = _coot.on_monomer_lib_sbase_molecule_button_press

def mutate_internal(*args):
  return _coot.mutate_internal(*args)
mutate_internal = _coot.mutate_internal

def execute_ligand_search_internal():
  return _coot.execute_ligand_search_internal()
execute_ligand_search_internal = _coot.execute_ligand_search_internal

def overlap_ligands_internal(*args):
  return _coot.overlap_ligands_internal(*args)
overlap_ligands_internal = _coot.overlap_ligands_internal

def ligand_search_make_conformers_py():
  return _coot.ligand_search_make_conformers_py()
ligand_search_make_conformers_py = _coot.ligand_search_make_conformers_py

def ligand_search_make_conformers_internal():
  return _coot.ligand_search_make_conformers_internal()
ligand_search_make_conformers_internal = _coot.ligand_search_make_conformers_internal

def add_animated_ligand_interaction(*args):
  return _coot.add_animated_ligand_interaction(*args)
add_animated_ligand_interaction = _coot.add_animated_ligand_interaction

def cootaneer_internal(*args):
  return _coot.cootaneer_internal(*args)
cootaneer_internal = _coot.cootaneer_internal

def cootaneer_py(*args):
  return _coot.cootaneer_py(*args)
cootaneer_py = _coot.cootaneer_py

def is_interesting_dots_object_next_p(*args):
  return _coot.is_interesting_dots_object_next_p(*args)
is_interesting_dots_object_next_p = _coot.is_interesting_dots_object_next_p

def generic_string_vector_to_list_internal_py(*args):
  return _coot.generic_string_vector_to_list_internal_py(*args)
generic_string_vector_to_list_internal_py = _coot.generic_string_vector_to_list_internal_py

def generic_int_vector_to_list_internal_py(*args):
  return _coot.generic_int_vector_to_list_internal_py(*args)
generic_int_vector_to_list_internal_py = _coot.generic_int_vector_to_list_internal_py

def generic_list_to_string_vector_internal_py(*args):
  return _coot.generic_list_to_string_vector_internal_py(*args)
generic_list_to_string_vector_internal_py = _coot.generic_list_to_string_vector_internal_py

def rtop_to_python(*args):
  return _coot.rtop_to_python(*args)
rtop_to_python = _coot.rtop_to_python

def inverse_rtop_py(*args):
  return _coot.inverse_rtop_py(*args)
inverse_rtop_py = _coot.inverse_rtop_py

def atom_spec_from_python_expression(*args):
  return _coot.atom_spec_from_python_expression(*args)
atom_spec_from_python_expression = _coot.atom_spec_from_python_expression

def atom_spec_to_py(*args):
  return _coot.atom_spec_to_py(*args)
atom_spec_to_py = _coot.atom_spec_to_py

def set_display_control_button_state(*args):
  return _coot.set_display_control_button_state(*args)
set_display_control_button_state = _coot.set_display_control_button_state

def new_molecule_by_symmetry_matrix_from_molecule(*args):
  return _coot.new_molecule_by_symmetry_matrix_from_molecule(*args)
new_molecule_by_symmetry_matrix_from_molecule = _coot.new_molecule_by_symmetry_matrix_from_molecule

def coot_get_url(*args):
  return _coot.coot_get_url(*args)
coot_get_url = _coot.coot_get_url

def coot_get_url_and_activate_curl_hook(*args):
  return _coot.coot_get_url_and_activate_curl_hook(*args)
coot_get_url_and_activate_curl_hook = _coot.coot_get_url_and_activate_curl_hook

def coot_get_url_as_string_py(*args):
  return _coot.coot_get_url_as_string_py(*args)
coot_get_url_as_string_py = _coot.coot_get_url_as_string_py

def curl_progress_info_py(*args):
  return _coot.curl_progress_info_py(*args)
curl_progress_info_py = _coot.curl_progress_info_py

def write_coot_curl_data(*args):
  return _coot.write_coot_curl_data(*args)
write_coot_curl_data = _coot.write_coot_curl_data

def write_coot_curl_data_to_file(*args):
  return _coot.write_coot_curl_data_to_file(*args)
write_coot_curl_data_to_file = _coot.write_coot_curl_data_to_file

def coot_get_url_as_string_internal(*args):
  return _coot.coot_get_url_as_string_internal(*args)
coot_get_url_as_string_internal = _coot.coot_get_url_as_string_internal

def wrapped_curl_easy_perform(*args):
  return _coot.wrapped_curl_easy_perform(*args)
wrapped_curl_easy_perform = _coot.wrapped_curl_easy_perform

def stop_curl_download(*args):
  return _coot.stop_curl_download(*args)
stop_curl_download = _coot.stop_curl_download

def get_drug_mdl_via_wikipedia_and_drugbank(*args):
  return _coot.get_drug_mdl_via_wikipedia_and_drugbank(*args)
get_drug_mdl_via_wikipedia_and_drugbank = _coot.get_drug_mdl_via_wikipedia_and_drugbank

def orient_view(*args):
  return _coot.orient_view(*args)
orient_view = _coot.orient_view

def topological_equivalence_chiral_centres(*args):
  return _coot.topological_equivalence_chiral_centres(*args)
topological_equivalence_chiral_centres = _coot.topological_equivalence_chiral_centres

def make_complementary_dotted_surfaces(*args):
  return _coot.make_complementary_dotted_surfaces(*args)
make_complementary_dotted_surfaces = _coot.make_complementary_dotted_surfaces

def residue_records_list_py_to_residue_specs(*args):
  return _coot.residue_records_list_py_to_residue_specs(*args)
residue_records_list_py_to_residue_specs = _coot.residue_records_list_py_to_residue_specs

def add_generic_object_bond(*args):
  return _coot.add_generic_object_bond(*args)
add_generic_object_bond = _coot.add_generic_object_bond

def pisa_interfaces_display_only(*args):
  return _coot.pisa_interfaces_display_only(*args)
pisa_interfaces_display_only = _coot.pisa_interfaces_display_only

def untangle_mmdb_chain_id_string(*args):
  return _coot.untangle_mmdb_chain_id_string(*args)
untangle_mmdb_chain_id_string = _coot.untangle_mmdb_chain_id_string

def score_rotamers(*args):
  return _coot.score_rotamers(*args)
score_rotamers = _coot.score_rotamers

def score_rotamers_py(*args):
  return _coot.score_rotamers_py(*args)
score_rotamers_py = _coot.score_rotamers_py

def protein_db_loops(*args):
  return _coot.protein_db_loops(*args)
protein_db_loops = _coot.protein_db_loops

def protein_db_loop_specs_to_atom_selection_string(*args):
  return _coot.protein_db_loop_specs_to_atom_selection_string(*args)
protein_db_loop_specs_to_atom_selection_string = _coot.protein_db_loop_specs_to_atom_selection_string

def protein_db_loops_py(*args):
  return _coot.protein_db_loops_py(*args)
protein_db_loops_py = _coot.protein_db_loops_py

def hole(*args):
  return _coot.hole(*args)
hole = _coot.hole

def probe_radius_graph_close_callback(*args):
  return _coot.probe_radius_graph_close_callback(*args)
probe_radius_graph_close_callback = _coot.probe_radius_graph_close_callback

def show_hole_probe_radius_graph(*args):
  return _coot.show_hole_probe_radius_graph(*args)
show_hole_probe_radius_graph = _coot.show_hole_probe_radius_graph

def show_hole_probe_radius_graph_basic(*args):
  return _coot.show_hole_probe_radius_graph_basic(*args)
show_hole_probe_radius_graph_basic = _coot.show_hole_probe_radius_graph_basic

def show_hole_probe_radius_graph_goocanvas(*args):
  return _coot.show_hole_probe_radius_graph_goocanvas(*args)
show_hole_probe_radius_graph_goocanvas = _coot.show_hole_probe_radius_graph_goocanvas

def make_link(*args):
  return _coot.make_link(*args)
make_link = _coot.make_link

def make_link_py(*args):
  return _coot.make_link_py(*args)
make_link_py = _coot.make_link_py

def link_info_py(*args):
  return _coot.link_info_py(*args)
link_info_py = _coot.link_info_py

def handle_drag_and_drop_string(*args):
  return _coot.handle_drag_and_drop_string(*args)
handle_drag_and_drop_string = _coot.handle_drag_and_drop_string

def map_to_model_correlation_py(*args):
  return _coot.map_to_model_correlation_py(*args)
map_to_model_correlation_py = _coot.map_to_model_correlation_py

def map_to_model_correlation(*args):
  return _coot.map_to_model_correlation(*args)
map_to_model_correlation = _coot.map_to_model_correlation

def map_to_model_correlation_per_residue(*args):
  return _coot.map_to_model_correlation_per_residue(*args)
map_to_model_correlation_per_residue = _coot.map_to_model_correlation_per_residue

def map_to_model_correlation_per_residue_py(*args):
  return _coot.map_to_model_correlation_per_residue_py(*args)
map_to_model_correlation_per_residue_py = _coot.map_to_model_correlation_per_residue_py

def prodrg_import_function(*args):
  return _coot.prodrg_import_function(*args)
prodrg_import_function = _coot.prodrg_import_function

def sbase_import_function(*args):
  return _coot.sbase_import_function(*args)
sbase_import_function = _coot.sbase_import_function

def simple_text_dialog(*args):
  return _coot.simple_text_dialog(*args)
simple_text_dialog = _coot.simple_text_dialog

def on_simple_text_dialog_close_button_pressed(*args):
  return _coot.on_simple_text_dialog_close_button_pressed(*args)
on_simple_text_dialog_close_button_pressed = _coot.on_simple_text_dialog_close_button_pressed

def encode_ints(*args):
  return _coot.encode_ints(*args)
encode_ints = _coot.encode_ints

def decode_ints(*args):
  return _coot.decode_ints(*args)
decode_ints = _coot.decode_ints

def store_keyed_user_name(*args):
  return _coot.store_keyed_user_name(*args)
store_keyed_user_name = _coot.store_keyed_user_name

def py_to_residue_specs(*args):
  return _coot.py_to_residue_specs(*args)
py_to_residue_specs = _coot.py_to_residue_specs

def key_sym_code_py(*args):
  return _coot.key_sym_code_py(*args)
key_sym_code_py = _coot.key_sym_code_py

def py_symop_strings_to_space_group(*args):
  return _coot.py_symop_strings_to_space_group(*args)
py_symop_strings_to_space_group = _coot.py_symop_strings_to_space_group

def display_python(*args):
  return _coot.display_python(*args)
display_python = _coot.display_python

def make_atom_spec_py(*args):
  return _coot.make_atom_spec_py(*args)
make_atom_spec_py = _coot.make_atom_spec_py

def make_residue_spec_py(*args):
  return _coot.make_residue_spec_py(*args)
make_residue_spec_py = _coot.make_residue_spec_py

def new_molecule_sans_biggest_ligand(*args):
  return _coot.new_molecule_sans_biggest_ligand(*args)
new_molecule_sans_biggest_ligand = _coot.new_molecule_sans_biggest_ligand

def probe_clash_score(*args):
  return _coot.probe_clash_score(*args)
probe_clash_score = _coot.probe_clash_score

def residues_torsions_match_py(*args):
  return _coot.residues_torsions_match_py(*args)
residues_torsions_match_py = _coot.residues_torsions_match_py

def mogul_markup(*args):
  return _coot.mogul_markup(*args)
mogul_markup = _coot.mogul_markup

def update_restraints_using_mogul(*args):
  return _coot.update_restraints_using_mogul(*args)
update_restraints_using_mogul = _coot.update_restraints_using_mogul

def set_mogul_max_badness(*args):
  return _coot.set_mogul_max_badness(*args)
set_mogul_max_badness = _coot.set_mogul_max_badness

def get_mogul_max_badness():
  return _coot.get_mogul_max_badness()
get_mogul_max_badness = _coot.get_mogul_max_badness
class sequence_to_chain_results_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sequence_to_chain_results_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sequence_to_chain_results_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _coot.new_sequence_to_chain_results_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["matches"] = _coot.sequence_to_chain_results_t_matches_set
    __swig_getmethods__["matches"] = _coot.sequence_to_chain_results_t_matches_get
    if _newclass:matches = _swig_property(_coot.sequence_to_chain_results_t_matches_get, _coot.sequence_to_chain_results_t_matches_set)
    __swig_setmethods__["match_fraction"] = _coot.sequence_to_chain_results_t_match_fraction_set
    __swig_getmethods__["match_fraction"] = _coot.sequence_to_chain_results_t_match_fraction_get
    if _newclass:match_fraction = _swig_property(_coot.sequence_to_chain_results_t_match_fraction_get, _coot.sequence_to_chain_results_t_match_fraction_set)
    __swig_destroy__ = _coot.delete_sequence_to_chain_results_t
    __del__ = lambda self : None;
sequence_to_chain_results_t_swigregister = _coot.sequence_to_chain_results_t_swigregister
sequence_to_chain_results_t_swigregister(sequence_to_chain_results_t)

def atom_info_as_text_for_statusbar(*args):
  return _coot.atom_info_as_text_for_statusbar(*args)
atom_info_as_text_for_statusbar = _coot.atom_info_as_text_for_statusbar


def sequence_comparison_to_chains(*args):
  return _coot.sequence_comparison_to_chains(*args)
sequence_comparison_to_chains = _coot.sequence_comparison_to_chains

def assign_sequence_to_best_matching_chain(*args):
  return _coot.assign_sequence_to_best_matching_chain(*args)
assign_sequence_to_best_matching_chain = _coot.assign_sequence_to_best_matching_chain

def assign_sequences_to_best_matching_chain_from_fasta(*args):
  return _coot.assign_sequences_to_best_matching_chain_from_fasta(*args)
assign_sequences_to_best_matching_chain_from_fasta = _coot.assign_sequences_to_best_matching_chain_from_fasta
DELETED = _coot.DELETED
MUTATED = _coot.MUTATED
MOVINGATOMS = _coot.MOVINGATOMS
ROTAMERSEARCHAUTOMATIC = _coot.ROTAMERSEARCHAUTOMATIC
ROTAMERSEARCHHIGHRES = _coot.ROTAMERSEARCHHIGHRES
ROTAMERSEARCHLOWRES = _coot.ROTAMERSEARCHLOWRES
class probe_atom_spec_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, probe_atom_spec_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, probe_atom_spec_t, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coot.new_probe_atom_spec_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coot.delete_probe_atom_spec_t
    __del__ = lambda self : None;
probe_atom_spec_t_swigregister = _coot.probe_atom_spec_t_swigregister
probe_atom_spec_t_swigregister(probe_atom_spec_t)

class one_way_probe_contact_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, one_way_probe_contact_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, one_way_probe_contact_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["from_atom"] = _coot.one_way_probe_contact_t_from_atom_set
    __swig_getmethods__["from_atom"] = _coot.one_way_probe_contact_t_from_atom_get
    if _newclass:from_atom = _swig_property(_coot.one_way_probe_contact_t_from_atom_get, _coot.one_way_probe_contact_t_from_atom_set)
    __swig_setmethods__["to_atoms"] = _coot.one_way_probe_contact_t_to_atoms_set
    __swig_getmethods__["to_atoms"] = _coot.one_way_probe_contact_t_to_atoms_get
    if _newclass:to_atoms = _swig_property(_coot.one_way_probe_contact_t_to_atoms_get, _coot.one_way_probe_contact_t_to_atoms_set)
    def __init__(self, *args): 
        this = _coot.new_one_way_probe_contact_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(self): return _coot.one_way_probe_contact_t_size(self)
    def add(self, *args): return _coot.one_way_probe_contact_t_add(self, *args)
    __swig_destroy__ = _coot.delete_one_way_probe_contact_t
    __del__ = lambda self : None;
one_way_probe_contact_t_swigregister = _coot.one_way_probe_contact_t_swigregister
one_way_probe_contact_t_swigregister(one_way_probe_contact_t)

class one_way_probe_contact_container_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, one_way_probe_contact_container_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, one_way_probe_contact_container_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["contacts"] = _coot.one_way_probe_contact_container_t_contacts_set
    __swig_getmethods__["contacts"] = _coot.one_way_probe_contact_container_t_contacts_get
    if _newclass:contacts = _swig_property(_coot.one_way_probe_contact_container_t_contacts_get, _coot.one_way_probe_contact_container_t_contacts_set)
    def add(self, *args): return _coot.one_way_probe_contact_container_t_add(self, *args)
    def size(self): return _coot.one_way_probe_contact_container_t_size(self)
    def __init__(self): 
        this = _coot.new_one_way_probe_contact_container_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coot.delete_one_way_probe_contact_container_t
    __del__ = lambda self : None;
one_way_probe_contact_container_t_swigregister = _coot.one_way_probe_contact_container_t_swigregister
one_way_probe_contact_container_t_swigregister(one_way_probe_contact_container_t)

class probe_clash_score_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, probe_clash_score_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, probe_clash_score_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["filled"] = _coot.probe_clash_score_t_filled_set
    __swig_getmethods__["filled"] = _coot.probe_clash_score_t_filled_get
    if _newclass:filled = _swig_property(_coot.probe_clash_score_t_filled_get, _coot.probe_clash_score_t_filled_set)
    __swig_setmethods__["n_bad_overlaps"] = _coot.probe_clash_score_t_n_bad_overlaps_set
    __swig_getmethods__["n_bad_overlaps"] = _coot.probe_clash_score_t_n_bad_overlaps_get
    if _newclass:n_bad_overlaps = _swig_property(_coot.probe_clash_score_t_n_bad_overlaps_get, _coot.probe_clash_score_t_n_bad_overlaps_set)
    __swig_setmethods__["n_hydrogen_bonds"] = _coot.probe_clash_score_t_n_hydrogen_bonds_set
    __swig_getmethods__["n_hydrogen_bonds"] = _coot.probe_clash_score_t_n_hydrogen_bonds_get
    if _newclass:n_hydrogen_bonds = _swig_property(_coot.probe_clash_score_t_n_hydrogen_bonds_get, _coot.probe_clash_score_t_n_hydrogen_bonds_set)
    __swig_setmethods__["n_small_overlaps"] = _coot.probe_clash_score_t_n_small_overlaps_set
    __swig_getmethods__["n_small_overlaps"] = _coot.probe_clash_score_t_n_small_overlaps_get
    if _newclass:n_small_overlaps = _swig_property(_coot.probe_clash_score_t_n_small_overlaps_get, _coot.probe_clash_score_t_n_small_overlaps_set)
    __swig_setmethods__["n_close_contacts"] = _coot.probe_clash_score_t_n_close_contacts_set
    __swig_getmethods__["n_close_contacts"] = _coot.probe_clash_score_t_n_close_contacts_get
    if _newclass:n_close_contacts = _swig_property(_coot.probe_clash_score_t_n_close_contacts_get, _coot.probe_clash_score_t_n_close_contacts_set)
    __swig_setmethods__["n_wide_contacts"] = _coot.probe_clash_score_t_n_wide_contacts_set
    __swig_getmethods__["n_wide_contacts"] = _coot.probe_clash_score_t_n_wide_contacts_get
    if _newclass:n_wide_contacts = _swig_property(_coot.probe_clash_score_t_n_wide_contacts_get, _coot.probe_clash_score_t_n_wide_contacts_set)
    def __init__(self, *args): 
        this = _coot.new_probe_clash_score_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coot.delete_probe_clash_score_t
    __del__ = lambda self : None;
probe_clash_score_t_swigregister = _coot.probe_clash_score_t_swigregister
probe_clash_score_t_swigregister(probe_clash_score_t)

class spec_eraser(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, spec_eraser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, spec_eraser, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ref_specs"] = _coot.spec_eraser_ref_specs_set
    __swig_getmethods__["ref_specs"] = _coot.spec_eraser_ref_specs_get
    if _newclass:ref_specs = _swig_property(_coot.spec_eraser_ref_specs_get, _coot.spec_eraser_ref_specs_set)
    def __init__(self, *args): 
        this = _coot.new_spec_eraser(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _coot.spec_eraser___call__(self, *args)
    __swig_destroy__ = _coot.delete_spec_eraser
    __del__ = lambda self : None;
spec_eraser_swigregister = _coot.spec_eraser_swigregister
spec_eraser_swigregister(spec_eraser)


def probe_clash_score_py(*args):
  return _coot.probe_clash_score_py(*args)
probe_clash_score_py = _coot.probe_clash_score_py


