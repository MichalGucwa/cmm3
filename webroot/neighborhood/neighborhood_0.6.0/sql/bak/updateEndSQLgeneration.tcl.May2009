#!/usr/bin/tclsh

puts "
CREATE INDEX idx_id_assemblies   ON assemblies(id);
CREATE INDEX idx_id_cavities     ON cavities(id);
CREATE INDEX idx_id_cdhit_chains ON cdhit_chains(id);
CREATE INDEX idx_id_symop_chains ON symop_chains(id);
CREATE INDEX idx_id_residues     ON residues(id);
CREATE INDEX idx_id_atoms        ON atoms(id);
CREATE INDEX idx_id_neighbors    ON neighbors(id);

CREATE INDEX idx_residuetype_residues           ON residues(residuetype);
CREATE INDEX idx_atomtype_atoms                 ON atoms(atomtype);
CREATE INDEX idx_neighbortype_neighbors         ON neighbors(neighbortype);
";

# CREATE INDEX idx_neighborid_neighbors ON neighbors(neighborid);
# CREATE INDEX idx_id_atomneighbors ON atomneighbors(id);
# CREATE INDEX idx_atomneighborid_atomneighbors ON atomneighbors(atomneighborid);
# CREATE INDEX idx_residueid_atomneighbors ON atomneighbors(residueid_a, residueid_b);
# CREATE INDEX idx_atomneighbortype_atomneighbors ON atomneighbors(atomneighbortype);

set residue_list [list { 1 "01" gly -1 -1} \
                       { 2 "02" ala -1 -1} \
                       { 3 "03" val -1 -1} \
                       { 4 "04" leu -1 -1} \
                       { 5 "05" ile -1 -1} \
                       { 6 "06" ser -1 -1} \
                       { 7 "07" thr -1 -1} \
                       { 8 "08" cys -1 -1} \
                       { 9 "09" met -1 10} \
                       {11 "11" pro -1 -1} \
                       {12 "12" asp -1 -1} \
                       {13 "13" asn -1 -1} \
                       {14 "14" glu -1 -1} \
                       {15 "15" gln -1 -1} \
                       {16 "16" lys -1 -1} \
                       {17 "17" arg -1 -1} \
                       {18 "18" his -1 -1} \
                       {19 "19" phe -1 -1} \
                       {20 "20" tyr -1 -1} \
                       {21 "21" trp -1 -1} \
                       {22 "22" unk -1 -1} \
                       {23 "23" dna  1 -1} \
                       {24 "24" wat -1 -1} \
                       {25 "25" ion  1 28} \
                       {29 "29" lig  1 30}]
set atom_list [list { 1 "01" mc4n       } \
                    { 2 "02" mc4ca      } \
                    { 3 "03" mc4c       } \
                    { 4 "04" mc4o       } \
                    { 5 "05" sc4c       } \
                    { 6 "06" sc4narg    } \
                    { 7 "07" sc4oamide  } \
                    { 8 "08" sc4namide  } \
                    { 9 "09" sc4ocarbo  } \
                    {10 "10" sc4scys    } \
                    {11 "11" sc4cring   } \
                    {12 "12" sc4nring   } \
                    {13 "13" sc4nlys    } \
                    {14 "14" sc4smet    } \
                    {15 "15" sc4ohydro  } \
                    {16 "16" sc4se      } \
                    {17 "17" dr4c       } \
                    {18 "18" dr4n       } \
                    {19 "19" dr4o       } \
                    {20 "20" dr4p       } \
                    {21 "21" wt4o       } \
                    {22 "22" lg4c       } \
                    {23 "23" lg4n       } \
                    {24 "24" lg4o       } \
                    {25 "25" lg4p       } \
                    {26 "26" lg4s       } \
                    {27 "27" lg4h       } \
                    {28 "28" hydro      } \
                    {29 "29" alkali     } \
                    {30 "30" alkaline   } \
                    {31 "31" halogen    } \
                    {32 "32" light      } \
                    {33 "33" heavy      } \
                    {34 "34" other      }]

foreach residue_record $residue_list {
  set num_type     [lindex $residue_record 0]
  set txt_type     [lindex $residue_record 1]
  set res_name     [lindex $residue_record 2]
  set need_resname [lindex $residue_record 3]
  set need_another [lindex $residue_record 4]
  set table_name "residues${txt_type}_$res_name"
  puts -nonewline "CREATE TABLE $table_name AS (SELECT id, pdbfileid, residueid, chainid, resseq";
  if {$need_resname == 1}  {puts -nonewline ", resname"}
  if {$need_another != -1} {puts -nonewline ", residuetype"}
  puts -nonewline " FROM residues WHERE residuetype"
  if {$need_another == -1} {
    puts -nonewline "=$num_type"
  } elseif {[expr $need_another-$num_type] == 1} {
    puts -nonewline "=$num_type OR residuetype=$need_another"
  } elseif {[expr $need_another-$num_type] > 1} {
    puts -nonewline ">=$num_type AND residuetype<=$need_another"
  }
  puts ");"
  puts "ALTER TABLE $table_name ADD PRIMARY KEY (pdbfileid, residueid);"
}

foreach residue_record_1 $residue_list {
  set num_type_1     [lindex $residue_record_1 0]
  set txt_type_1     [lindex $residue_record_1 1]
  set res_name_1     [lindex $residue_record_1 2]
  set need_resname_1 [lindex $residue_record_1 3]
  set need_another_1 [lindex $residue_record_1 4]
  foreach residue_record_2 $residue_list {
  set num_type_2     [lindex $residue_record_2 0]
  set txt_type_2     [lindex $residue_record_2 1]
  set res_name_2     [lindex $residue_record_2 2]
  set need_resname_2 [lindex $residue_record_2 3]
  set need_another_2 [lindex $residue_record_2 4]
    if {$num_type_1 <= $num_type_2} {
      set table_name "neighbors$txt_type_1${txt_type_2}_${res_name_1}_$res_name_2"
      if {[string equal $res_name_2 "unk"]} {
        if {[string equal $res_name_1 "gly"]} {
          set table_name "neighbors$txt_type_1${txt_type_2}_kno_$res_name_2"
        } elseif {[string equal $res_name_1 "unk"]} {
        } else { continue; }
      } elseif {[string equal $res_name_1 "unk"]} {
        if {[string equal $res_name_2 "ion"] || [string equal $res_name_2 "lig"]} {
          set table_name "neighbors$txt_type_1${txt_type_2}_all_$res_name_2"
          set need_resname_1 1
        }
      }
      set table_type [expr 100*$num_type_1+$num_type_2]
      puts -nonewline "CREATE TABLE $table_name AS (SELECT id, pdbfileid, neighborid, residueid_a, residueid_b, atomid_a, atomid_b, atomname_a, atomname_b, atomneighbortype, distance"
      if {$need_resname_1 == 1} {puts -nonewline ", resname_a"}
      if {$need_resname_2 == 1} {puts -nonewline ", resname_b"}
      if {![string equal $res_name_1 "dna"] && ![string equal $res_name_2 "dna"] && ($need_resname_1 == 1 || $need_resname_2 == 1)} {puts -nonewline ", neighbortype"}
      if {[string equal $res_name_2 "unk"]} {
        if {[string equal $res_name_1 "gly"]} {
          puts -nonewline ", resname_a, neighbortype FROM neighbors WHERE neighbortype=$table_type"
          for {set i [expr $num_type_1+1]} {$i<$num_type_2} {incr i} {
            set table_type [expr 100*$i+$num_type_2]
            puts -nonewline " OR neighbortype=$table_type"
          }
        } else {
          puts -nonewline " FROM neighbors WHERE neighbortype=$table_type"
        }
      } elseif {[string equal $res_name_1 "unk"] && ([string equal $res_name_2 "ion"] || [string equal $res_name_2 "lig"])} {
        set higher_limits [expr ($num_type_1+1)*100]
        puts -nonewline " FROM neighbors WHERE neighbortype<$higher_limits"
        puts -nonewline " AND neighbortype%100>=$num_type_2 AND neighbortype%100<=$need_another_2"
      } elseif {[expr $need_another_1-$num_type_1] > 1 && [expr $need_another_2-$num_type_2] > 1} {
        set table_type_up [expr 100*$num_type_1+$need_another_2]
        puts -nonewline " FROM neighbors WHERE (neighbortype>=$table_type AND neighbortype<=$table_type_up)"
        for {set i [expr $num_type_1+1]} {$i<=$need_another_1} {incr i} {
          set table_type    [expr 100*$i+$num_type_2]
          set table_type_up [expr 100*$i+$need_another_2]
          puts -nonewline " OR (neighbortype>=$table_type AND neighbortype<=$table_type_up)"
        }
      } elseif {[expr $need_another_1-$num_type_1] > 1} {
        set table_type_up [expr 100*$need_another_1+$num_type_2]
        puts -nonewline " FROM neighbors WHERE neighbortype=$table_type"
        for {set i [expr $table_type+100]} {$i<=$table_type_up} {incr i 100} {
          puts -nonewline " OR neighbortype=$i"
        }
        if {$need_another_2 != -1} {
          set table_type    [expr 100*$num_type_1+$need_another_2]
          set table_type_up [expr 100*$need_another_1+$need_another_2]
          puts -nonewline " OR neighbortype=$table_type"
          for {set i [expr $table_type+100]} {$i<=$table_type_up} {incr i 100} {
            puts -nonewline " OR neighbortype=$i"
          }
        }
      } elseif {[expr $need_another_2-$num_type_2] > 1} {
        set table_type_up [expr 100*$num_type_1+$need_another_2]
        puts -nonewline " FROM neighbors WHERE (neighbortype>=$table_type AND neighbortype<=$table_type_up)"
        if {$need_another_1 != -1} {
          set table_type    [expr 100*$need_another_1+$num_type_2]
          set table_type_up [expr 100*$need_another_1+$need_another_2]
          puts -nonewline " OR (neighbortype>=$table_type AND neighbortype<=$table_type_up)"
        }
      } else {
        puts -nonewline " FROM neighbors WHERE neighbortype=$table_type"
        if {$need_another_1 != -1} {
          set table_type [expr 100*$need_another_1+$num_type_2]
          puts -nonewline " OR neighbortype=$table_type"
        }
        if {$need_another_2 != -1} {
          set table_type [expr 100*$num_type_1+$need_another_2]
          puts -nonewline " OR neighbortype=$table_type"
        }
        if {$need_another_1 != -1 && $need_another_2 != -1} {
          set table_type [expr 100*$need_another_1+$need_another_2]
          puts -nonewline " OR neighbortype=$table_type"
        }
      }
      puts ");"
      puts "ALTER TABLE $table_name ADD PRIMARY KEY (pdbfileid, residueid_a, residueid_b);"
#     puts "create index idxa_$table_name on ${table_name}(pdbfileid, residueid_a);"
#     puts "create index idxb_$table_name on ${table_name}(pdbfileid, residueid_b);"
    }
  }
}

foreach atom_record $atom_list {
  set num_type      [lindex $atom_record 0]
  set txt_type      [lindex $atom_record 1]
  set atom_name     [lindex $atom_record 2]
# set need_restrict [lindex $atom_record 3]
# set need_another  [lindex $atom_record 4]
  set table_name "atoms${txt_type}_$atom_name"
  puts -nonewline "CREATE TABLE $table_name AS (SELECT id, pdbfileid, atomid, residueid, atomname FROM atoms WHERE atomtype=$num_type";
# if {$need_another != -1}  {puts -nonewline " OR atomtype=$need_another"}
# if {$need_restrict != -1} {puts -nonewline " AND $need_restrict"}
  puts ");"
  puts "ALTER TABLE $table_name ADD PRIMARY KEY (pdbfileid, atomid);"
}
